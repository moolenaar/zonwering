
build/zonwering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e4e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001e4e  00001f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011b  00800066  00800066  00001f08  2**0
                  ALLOC
  3 .eeprom       000000b2  00810000  00810000  00001f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000064bc  00000000  00000000  00001fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001fb2  00000000  00000000  00008478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000a42a  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000a43c  2**2
                  CONTENTS, READONLY
  8 .avr.prop     00000016  00000000  00000000  0000a478  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000420  00000000  00000000  0000a48e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003e8  00000000  00000000  0000a8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000001a  00000000  00000000  0000ac96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000173  00000000  00000000  0000acb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c1       	rjmp	.+810    	; 0x32c <__ctors_end>
       2:	af c1       	rjmp	.+862    	; 0x362 <__bad_interrupt>
       4:	ae c1       	rjmp	.+860    	; 0x362 <__bad_interrupt>
       6:	ad c1       	rjmp	.+858    	; 0x362 <__bad_interrupt>
       8:	ac c1       	rjmp	.+856    	; 0x362 <__bad_interrupt>
       a:	ab c1       	rjmp	.+854    	; 0x362 <__bad_interrupt>
       c:	aa c1       	rjmp	.+852    	; 0x362 <__bad_interrupt>
       e:	a9 c1       	rjmp	.+850    	; 0x362 <__bad_interrupt>
      10:	a8 c1       	rjmp	.+848    	; 0x362 <__bad_interrupt>
      12:	78 c3       	rjmp	.+1776   	; 0x704 <__vector_9>
      14:	a6 c1       	rjmp	.+844    	; 0x362 <__bad_interrupt>
      16:	a5 c1       	rjmp	.+842    	; 0x362 <__bad_interrupt>
      18:	a4 c1       	rjmp	.+840    	; 0x362 <__bad_interrupt>
      1a:	42 c4       	rjmp	.+2180   	; 0x8a0 <__vector_13>
      1c:	a2 c1       	rjmp	.+836    	; 0x362 <__bad_interrupt>
      1e:	a1 c1       	rjmp	.+834    	; 0x362 <__bad_interrupt>
      20:	a0 c1       	rjmp	.+832    	; 0x362 <__bad_interrupt>
      22:	3c ca       	rjmp	.-2952   	; 0xfffff49c <__eeprom_end+0xff7ef3ea>
      24:	51 ca       	rjmp	.-2910   	; 0xfffff4c8 <__eeprom_end+0xff7ef416>
      26:	58 ca       	rjmp	.-2896   	; 0xfffff4d8 <__eeprom_end+0xff7ef426>
      28:	59 ca       	rjmp	.-2894   	; 0xfffff4dc <__eeprom_end+0xff7ef42a>
      2a:	60 ca       	rjmp	.-2880   	; 0xfffff4ec <__eeprom_end+0xff7ef43a>
      2c:	61 ca       	rjmp	.-2878   	; 0xfffff4f0 <__eeprom_end+0xff7ef43e>
      2e:	6e ca       	rjmp	.-2852   	; 0xfffff50c <__eeprom_end+0xff7ef45a>
      30:	64 ca       	rjmp	.-2872   	; 0xfffff4fa <__eeprom_end+0xff7ef448>
      32:	68 ca       	rjmp	.-2864   	; 0xfffff504 <__eeprom_end+0xff7ef452>

00000034 <__trampolines_end>:
      34:	0c 0a       	sbc	r0, r28
      36:	20 0c       	add	r2, r0
	...
      44:	2e 08       	sbc	r2, r14
      46:	80 01       	movw	r16, r0
      48:	80 01       	movw	r16, r0
      4a:	00 00       	nop
      4c:	00 00       	nop
      4e:	30 10       	cpse	r3, r0
      50:	fc 00       	.word	0x00fc	; ????
      52:	02 01       	movw	r0, r4
      54:	01 02       	muls	r16, r17
      56:	01 02       	muls	r16, r17
      58:	02 01       	movw	r0, r4
      5a:	fc 00       	.word	0x00fc	; ????
      5c:	00 00       	nop
      5e:	00 00       	nop
      60:	31 0e       	add	r3, r17
      62:	00 00       	nop
      64:	04 00       	.word	0x0004	; ????
      66:	02 00       	.word	0x0002	; ????
      68:	ff 03       	fmulsu	r23, r23
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	32 10       	cpse	r3, r2
      72:	82 03       	fmuls	r16, r18
      74:	41 02       	muls	r20, r17
      76:	21 02       	muls	r18, r17
      78:	11 02       	muls	r17, r17
      7a:	09 02       	muls	r16, r25
      7c:	06 02       	muls	r16, r22
      7e:	00 00       	nop
      80:	00 00       	nop
      82:	33 10       	cpse	r3, r3
      84:	02 01       	movw	r0, r4
      86:	01 02       	muls	r16, r17
      88:	11 02       	muls	r17, r17
      8a:	11 02       	muls	r17, r17
      8c:	2a 01       	movw	r4, r20
      8e:	c4 00       	.word	0x00c4	; ????
      90:	00 00       	nop
      92:	00 00       	nop
      94:	34 10       	cpse	r3, r4
      96:	60 00       	.word	0x0060	; ????
      98:	58 00       	.word	0x0058	; ????
      9a:	46 00       	.word	0x0046	; ????
      9c:	41 00       	.word	0x0041	; ????
      9e:	ff 03       	fmulsu	r23, r23
      a0:	40 00       	.word	0x0040	; ????
      a2:	00 00       	nop
      a4:	00 00       	nop
      a6:	35 10       	cpse	r3, r5
      a8:	1f 01       	movw	r2, r30
      aa:	11 02       	muls	r17, r17
      ac:	11 02       	muls	r17, r17
      ae:	11 02       	muls	r17, r17
      b0:	21 01       	movw	r4, r2
      b2:	c0 00       	.word	0x00c0	; ????
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	36 10       	cpse	r3, r6
      ba:	fc 00       	.word	0x00fc	; ????
      bc:	12 01       	movw	r2, r4
      be:	11 02       	muls	r17, r17
      c0:	11 02       	muls	r17, r17
      c2:	21 01       	movw	r4, r2
      c4:	c2 00       	.word	0x00c2	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	37 10       	cpse	r3, r7
      cc:	02 00       	.word	0x0002	; ????
      ce:	01 00       	.word	0x0001	; ????
      d0:	01 00       	.word	0x0001	; ????
      d2:	c1 03       	fmuls	r20, r17
      d4:	31 00       	.word	0x0031	; ????
      d6:	0f 00       	.word	0x000f	; ????
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	38 12       	cpse	r3, r24
      de:	c4 00       	.word	0x00c4	; ????
      e0:	2a 01       	movw	r4, r20
      e2:	11 02       	muls	r17, r17
      e4:	11 02       	muls	r17, r17
      e6:	11 02       	muls	r17, r17
      e8:	2a 01       	movw	r4, r20
      ea:	c4 00       	.word	0x00c4	; ????
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	39 10       	cpse	r3, r9
      f2:	0c 01       	movw	r0, r24
      f4:	12 02       	muls	r17, r18
      f6:	21 02       	muls	r18, r17
      f8:	21 02       	muls	r18, r17
      fa:	22 01       	movw	r4, r4
      fc:	dc 00       	.word	0x00dc	; ????
      fe:	00 00       	nop
	...

00000102 <lines5x12>:
     102:	05 0c 20 02 01 08 2f 02 fd 0b 3d 0a 01 08 01 08     .. .../...=.....
     112:	01 08 01 08 01 08 5b 0a ff 0f 01 08 01 08 01 08     ......[.........
     122:	01 08 5d 0a 01 08 01 08 01 08 01 08 ff 0f           ..]...........

00000130 <font5x8>:
     130:	43 08 20 04 00 00 00 00 2c 03 e0 60 00 2e 03 60     C. .....,..`...`
     140:	60 00 30 06 3e 51 49 45 3e 00 31 04 42 7f 40 00     `.0.>QIE>.1.B.@.
     150:	32 06 62 51 49 49 46 00 33 06 22 49 49 49 36 00     2.bQIIF.3."III6.
     160:	34 06 18 14 12 7f 10 00 35 06 2f 49 49 49 31 00     4.......5./III1.
     170:	36 06 3c 4a 49 49 30 00 37 06 01 71 09 05 03 00     6.<JII0.7..q....
     180:	38 06 36 49 49 49 36 00 39 06 06 49 49 29 1e 00     8.6III6.9..II)..
     190:	3f 06 02 01 59 09 06 00 41 06 7e 11 11 11 7e 00     ?...Y...A.~...~.
     1a0:	42 06 7f 49 49 49 36 00 43 06 3e 41 41 41 22 00     B..III6.C.>AAA".
     1b0:	44 06 7f 41 41 41 3e 00 45 06 7f 49 49 49 41 00     D..AAA>.E..IIIA.
     1c0:	46 06 7f 09 09 09 01 00 47 06 3e 41 49 49 7a 00     F.......G.>AIIz.
     1d0:	48 06 7f 08 08 08 7f 00 49 04 41 7f 41 00 4a 06     H.......I.A.A.J.
     1e0:	30 40 40 40 3f 00 4b 06 7f 08 14 22 41 00 4c 06     0@@@?.K...."A.L.
     1f0:	7f 40 40 40 40 00 4d 06 7f 02 04 02 7f 00 4e 06     .@@@@.M.......N.
     200:	7f 02 04 08 7f 00 4f 06 3e 41 41 41 3e 00 50 06     ......O.>AAA>.P.
     210:	7f 09 09 09 06 00 51 06 3e 41 51 21 5e 00 52 06     ......Q.>AQ!^.R.
     220:	7f 09 09 19 66 00 53 06 26 49 49 49 32 00 54 06     ....f.S.&III2.T.
     230:	01 01 7f 01 01 00 55 06 3f 40 40 40 3f 00 56 06     ......U.?@@@?.V.
     240:	1f 20 40 20 1f 00 57 06 3f 40 3c 40 3f 00 58 06     . @ ..W.?@<@?.X.
     250:	63 14 08 14 63 00 59 06 07 08 70 08 07 00 5a 05     c...c.Y...p...Z.
     260:	71 49 45 43 00 5f 05 01 01 01 01 01 61 06 20 54     qIEC._......a. T
     270:	54 54 78 00 62 06 7f 44 44 44 38 00 63 06 38 44     TTx.b..DDD8.c.8D
     280:	44 44 28 00 64 06 38 44 44 44 7f 00 65 06 38 54     DD(.d.8DDD..e.8T
     290:	54 54 08 00 66 05 08 7e 09 09 00 67 06 18 a4 a4     TT..f..~...g....
     2a0:	a4 7c 00 68 05 7f 04 04 78 00 69 03 7d 40 00 6a     .|.h....x.i.}@.j
     2b0:	05 40 80 84 7d 00 6b 05 7f 10 28 44 00 6c 04 7f     .@..}.k...(D.l..
     2c0:	40 40 00 6d 06 7c 04 18 04 78 00 6e 05 7c 04 04     @@.m.|...x.n.|..
     2d0:	78 00 6f 06 38 44 44 44 38 00 70 05 fc 44 44 38     x.o.8DDD8.p..DD8
     2e0:	00 71 05 38 44 44 fc 00 72 06 44 78 44 04 08 00     .q.8DD..r.DxD...
     2f0:	73 06 08 54 54 54 20 00 74 05 04 3e 44 24 00 75     s..TTT .t..>D$.u
     300:	05 3c 40 20 7c 00 76 06 1c 20 40 20 1c 00 77 06     .<@ |.v.. @ ..w.
     310:	3c 60 30 60 3c 00 78 05 6c 10 10 6c 00 79 05 9c     <`0`<.x.l..l.y..
     320:	a0 60 3c 00 7a 05 64 54 54 4c 00 00                 .`<.z.dTTL..

0000032c <__ctors_end>:
     32c:	11 24       	eor	r1, r1
     32e:	1f be       	out	0x3f, r1	; 63
     330:	cf e5       	ldi	r28, 0x5F	; 95
     332:	d2 e0       	ldi	r29, 0x02	; 2
     334:	de bf       	out	0x3e, r29	; 62
     336:	cd bf       	out	0x3d, r28	; 61

00000338 <__do_copy_data>:
     338:	10 e0       	ldi	r17, 0x00	; 0
     33a:	a0 e6       	ldi	r26, 0x60	; 96
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	ee e4       	ldi	r30, 0x4E	; 78
     340:	fe e1       	ldi	r31, 0x1E	; 30
     342:	02 c0       	rjmp	.+4      	; 0x348 <__do_copy_data+0x10>
     344:	05 90       	lpm	r0, Z+
     346:	0d 92       	st	X+, r0
     348:	a6 36       	cpi	r26, 0x66	; 102
     34a:	b1 07       	cpc	r27, r17
     34c:	d9 f7       	brne	.-10     	; 0x344 <__do_copy_data+0xc>

0000034e <__do_clear_bss>:
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	a6 e6       	ldi	r26, 0x66	; 102
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	01 c0       	rjmp	.+2      	; 0x358 <.do_clear_bss_start>

00000356 <.do_clear_bss_loop>:
     356:	1d 92       	st	X+, r1

00000358 <.do_clear_bss_start>:
     358:	a1 38       	cpi	r26, 0x81	; 129
     35a:	b2 07       	cpc	r27, r18
     35c:	e1 f7       	brne	.-8      	; 0x356 <.do_clear_bss_loop>
     35e:	02 d0       	rcall	.+4      	; 0x364 <main>
     360:	74 cd       	rjmp	.-1304   	; 0xfffffe4a <__eeprom_end+0xff7efd98>

00000362 <__bad_interrupt>:
     362:	4e ce       	rjmp	.-868    	; 0x0 <__vectors>

00000364 <main>:
}
#endif

int main (void)
{
   KernelSetup();
     364:	8e d0       	rcall	.+284    	; 0x482 <KernelSetup>
   AdcSetup();
     366:	89 d2       	rcall	.+1298   	; 0x87a <AdcSetup>
   MotorSetup();
     368:	5a d9       	rcall	.-3404   	; 0xfffff61e <__eeprom_end+0xff7ef56c>
   ButtonSetup();
     36a:	21 d8       	rcall	.-4030   	; 0xfffff3ae <__eeprom_end+0xff7ef2fc>

#ifdef test
   InitTask(TESTSTACKSIZE, testStack, TestTask);
#else
   InitTask(MOTORSTACKSIZE, motorStack, MotorTask);
     36c:	4b e2       	ldi	r20, 0x2B	; 43
     36e:	5b e0       	ldi	r21, 0x0B	; 11
     370:	6f e7       	ldi	r22, 0x7F	; 127
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	8d e3       	ldi	r24, 0x3D	; 61
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0d d0       	rcall	.+26     	; 0x394 <InitTask>
   InitTask(BUTTONSTACKSIZE, buttonStack, ButtonTask);
     37a:	4a ed       	ldi	r20, 0xDA	; 218
     37c:	59 e0       	ldi	r21, 0x09	; 9
     37e:	6c eb       	ldi	r22, 0xBC	; 188
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	83 e6       	ldi	r24, 0x63	; 99
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	06 d0       	rcall	.+12     	; 0x394 <InitTask>
#endif

   StartKernel(NULL);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	a0 d1       	rcall	.+832    	; 0x6ce <StartKernel>
}
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	08 95       	ret

00000394 <InitTask>:
   InitTask(sizeof(IdleTaskStack), IdleTaskStack, IdleTask);
}

uint8_t InitTask(uint16_t stackSize, uint8_t* stackBuffer, TaskFunction function)
{
   uint8_t* stackptr = stackBuffer + stackSize - 1;
     394:	dc 01       	movw	r26, r24
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	a6 0f       	add	r26, r22
     39a:	b7 1f       	adc	r27, r23
   
   *stackptr-- = (uint16_t)function & 0x00ff;
     39c:	4c 93       	st	X, r20
   *stackptr-- = (uint16_t)function >> 8;
     39e:	fd 01       	movw	r30, r26
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	50 83       	st	Z, r21
   *stackptr-- = 0x00;                                         // register R0
     3a4:	31 97       	sbiw	r30, 0x01	; 1
     3a6:	10 82       	st	Z, r1
   *stackptr-- = 0x00; nrTasks == 0 ? 0x00 : 0x80;             // status register; interrupt will be enabled later
     3a8:	31 97       	sbiw	r30, 0x01	; 1
     3aa:	10 82       	st	Z, r1
     3ac:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <nrTasks>

   tasks[nrTasks].stackbuffer = stackBuffer;
     3b0:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <nrTasks>
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	f9 01       	movw	r30, r18
     3b8:	ee 0f       	add	r30, r30
     3ba:	ff 1f       	adc	r31, r31
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	e2 0f       	add	r30, r18
     3c2:	f3 1f       	adc	r31, r19
     3c4:	ee 0f       	add	r30, r30
     3c6:	ff 1f       	adc	r31, r31
     3c8:	ef 5d       	subi	r30, 0xDF	; 223
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	71 83       	std	Z+1, r23	; 0x01
     3ce:	60 83       	st	Z, r22
   tasks[nrTasks].StackPointer = (uint16_t)stackptr - 31;      // store stack pointer
     3d0:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <nrTasks>
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	93 97       	sbiw	r26, 0x23	; 35
     3d8:	f9 01       	movw	r30, r18
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	e2 0f       	add	r30, r18
     3e4:	f3 1f       	adc	r31, r19
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	ef 5d       	subi	r30, 0xDF	; 223
     3ec:	fe 4f       	sbci	r31, 0xFE	; 254
     3ee:	b3 83       	std	Z+3, r27	; 0x03
     3f0:	a2 83       	std	Z+2, r26	; 0x02
   tasks[nrTasks].StackSize = stackSize;
     3f2:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <nrTasks>
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	f9 01       	movw	r30, r18
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	e2 0f       	add	r30, r18
     404:	f3 1f       	adc	r31, r19
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	ef 5d       	subi	r30, 0xDF	; 223
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	95 83       	std	Z+5, r25	; 0x05
     410:	84 83       	std	Z+4, r24	; 0x04
   tasks[nrTasks].Handle = nrTasks;
     412:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <nrTasks>
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <nrTasks>
     41c:	fc 01       	movw	r30, r24
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	e8 0f       	add	r30, r24
     428:	f9 1f       	adc	r31, r25
     42a:	ee 0f       	add	r30, r30
     42c:	ff 1f       	adc	r31, r31
     42e:	ef 5d       	subi	r30, 0xDF	; 223
     430:	fe 4f       	sbci	r31, 0xFE	; 254
     432:	26 83       	std	Z+6, r18	; 0x06
   tasks[nrTasks].TaskState = StateRunable;
     434:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <nrTasks>
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	ee 0f       	add	r30, r30
     43e:	ff 1f       	adc	r31, r31
     440:	ee 0f       	add	r30, r30
     442:	ff 1f       	adc	r31, r31
     444:	e8 0f       	add	r30, r24
     446:	f9 1f       	adc	r31, r25
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	ef 5d       	subi	r30, 0xDF	; 223
     44e:	fe 4f       	sbci	r31, 0xFE	; 254
     450:	80 e4       	ldi	r24, 0x40	; 64
     452:	87 83       	std	Z+7, r24	; 0x07
   tasks[nrTasks].NextRunTime = 0;
     454:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <nrTasks>
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fc 01       	movw	r30, r24
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	e8 0f       	add	r30, r24
     466:	f9 1f       	adc	r31, r25
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	ef 5d       	subi	r30, 0xDF	; 223
     46e:	fe 4f       	sbci	r31, 0xFE	; 254
     470:	11 86       	std	Z+9, r1	; 0x09
     472:	10 86       	std	Z+8, r1	; 0x08

   return nrTasks++;
     474:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <nrTasks>
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	98 0f       	add	r25, r24
     47c:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <nrTasks>
}
     480:	08 95       	ret

00000482 <KernelSetup>:
}

void KernelSetup()
{
   // timer / counter 0 is used to generate the 1 ms timing
   KernelTimerCounter = 0;
     482:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <KernelTimerCounter+0x1>
     486:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <KernelTimerCounter>
   TCCR0A = (1<<WGM01);            // CTC mode
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	80 bf       	out	0x30, r24	; 48
   TCCR0B = (1<<CS01);             // 8 MHz divide by 64 prescaler produces 125 KHz clock source
     48e:	83 bf       	out	0x33, r24	; 51
   OCR0A = 124;                    // 125 - 1 gives 1 ms compare match interrupts used for task switching
     490:	8c e7       	ldi	r24, 0x7C	; 124
     492:	86 bf       	out	0x36, r24	; 54

   nrTasks = 0;
     494:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <nrTasks>
   InitTask(sizeof(IdleTaskStack), IdleTaskStack, IdleTask);
     498:	46 e3       	ldi	r20, 0x36	; 54
     49a:	53 e0       	ldi	r21, 0x03	; 3
     49c:	65 e5       	ldi	r22, 0x55	; 85
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	87 e2       	ldi	r24, 0x27	; 39
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	77 df       	rcall	.-274    	; 0x394 <InitTask>
     4a6:	08 95       	ret

000004a8 <TaskSleep>:
}

void TaskSleep(uint16_t time)
{
   // store context of current task
   __asm volatile(
     4a8:	f8 94       	cli
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	1f 92       	push	r1
     4b2:	2f 92       	push	r2
     4b4:	3f 92       	push	r3
     4b6:	4f 92       	push	r4
     4b8:	5f 92       	push	r5
     4ba:	6f 92       	push	r6
     4bc:	7f 92       	push	r7
     4be:	8f 92       	push	r8
     4c0:	9f 92       	push	r9
     4c2:	af 92       	push	r10
     4c4:	bf 92       	push	r11
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	2f 93       	push	r18
     4d4:	3f 93       	push	r19
     4d6:	4f 93       	push	r20
     4d8:	5f 93       	push	r21
     4da:	6f 93       	push	r22
     4dc:	7f 93       	push	r23
     4de:	8f 93       	push	r24
     4e0:	9f 93       	push	r25
     4e2:	af 93       	push	r26
     4e4:	bf 93       	push	r27
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
     4ee:	11 24       	eor	r1, r1
      "              push r30          \n\t"
      "              push r31          \n\t"
      "              clr r1            \n\t" // reset the "zero" register
   ::);
   
   tasks[TaskIndex].StackPointer = SP;
     4f0:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <TaskIndex>
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	4d b7       	in	r20, 0x3d	; 61
     4f8:	5e b7       	in	r21, 0x3e	; 62
     4fa:	f9 01       	movw	r30, r18
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	e2 0f       	add	r30, r18
     506:	f3 1f       	adc	r31, r19
     508:	ee 0f       	add	r30, r30
     50a:	ff 1f       	adc	r31, r31
     50c:	ef 5d       	subi	r30, 0xDF	; 223
     50e:	fe 4f       	sbci	r31, 0xFE	; 254
     510:	53 83       	std	Z+3, r21	; 0x03
     512:	42 83       	std	Z+2, r20	; 0x02

   if (time > 0)
     514:	00 97       	sbiw	r24, 0x00	; 0
     516:	31 f1       	breq	.+76     	; 0x564 <TaskSleep+0xbc>
   {
      tasks[TaskIndex].TaskState = StateWaiting;
     518:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <TaskIndex>
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	f9 01       	movw	r30, r18
     520:	ee 0f       	add	r30, r30
     522:	ff 1f       	adc	r31, r31
     524:	ee 0f       	add	r30, r30
     526:	ff 1f       	adc	r31, r31
     528:	e2 0f       	add	r30, r18
     52a:	f3 1f       	adc	r31, r19
     52c:	ee 0f       	add	r30, r30
     52e:	ff 1f       	adc	r31, r31
     530:	ef 5d       	subi	r30, 0xDF	; 223
     532:	fe 4f       	sbci	r31, 0xFE	; 254
     534:	20 e2       	ldi	r18, 0x20	; 32
     536:	27 83       	std	Z+7, r18	; 0x07
      tasks[TaskIndex].NextRunTime = KernelTimerCounter + time;
     538:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <TaskIndex>
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <KernelTimerCounter>
     542:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <KernelTimerCounter+0x1>
     546:	84 0f       	add	r24, r20
     548:	95 1f       	adc	r25, r21
     54a:	f9 01       	movw	r30, r18
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	ee 0f       	add	r30, r30
     552:	ff 1f       	adc	r31, r31
     554:	e2 0f       	add	r30, r18
     556:	f3 1f       	adc	r31, r19
     558:	ee 0f       	add	r30, r30
     55a:	ff 1f       	adc	r31, r31
     55c:	ef 5d       	subi	r30, 0xDF	; 223
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	91 87       	std	Z+9, r25	; 0x09
     562:	80 87       	std	Z+8, r24	; 0x08
   }

   // find new task to run
   if (TaskIndex == 0) TaskIndex++;
     564:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <TaskIndex>
     568:	81 11       	cpse	r24, r1
     56a:	05 c0       	rjmp	.+10     	; 0x576 <TaskSleep+0xce>
     56c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <TaskIndex>
     570:	8f 5f       	subi	r24, 0xFF	; 255
     572:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <TaskIndex>
   TaskIterator = TaskIndex;
     576:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <TaskIndex>
     57a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <TaskIterator>
   do
   {
      TaskIterator = TaskIterator >= nrTasks - 1 ? 1 : TaskIterator + 1;
     57e:	41 e0       	ldi	r20, 0x01	; 1
     580:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <TaskIterator>
     584:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <nrTasks>
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	28 17       	cp	r18, r24
     590:	39 07       	cpc	r19, r25
     592:	24 f4       	brge	.+8      	; 0x59c <TaskSleep+0xf4>
     594:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <TaskIterator>
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	01 c0       	rjmp	.+2      	; 0x59e <TaskSleep+0xf6>
     59c:	84 2f       	mov	r24, r20
     59e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <TaskIterator>
   }
   while ((TaskIterator != TaskIndex) && (tasks[TaskIterator].TaskState != StateRunable));
     5a2:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <TaskIterator>
     5a6:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <TaskIndex>
     5aa:	98 17       	cp	r25, r24
     5ac:	89 f0       	breq	.+34     	; 0x5d0 <TaskSleep+0x128>
     5ae:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <TaskIterator>
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	e8 0f       	add	r30, r24
     5c0:	f9 1f       	adc	r31, r25
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	ef 5d       	subi	r30, 0xDF	; 223
     5c8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ca:	87 81       	ldd	r24, Z+7	; 0x07
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	c1 f6       	brne	.-80     	; 0x580 <TaskSleep+0xd8>

   TaskIndex = tasks[TaskIterator].TaskState == StateRunable ? TaskIterator : 0;
     5d0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <TaskIterator>
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	fc 01       	movw	r30, r24
     5d8:	ee 0f       	add	r30, r30
     5da:	ff 1f       	adc	r31, r31
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	e8 0f       	add	r30, r24
     5e2:	f9 1f       	adc	r31, r25
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	ef 5d       	subi	r30, 0xDF	; 223
     5ea:	fe 4f       	sbci	r31, 0xFE	; 254
     5ec:	87 81       	ldd	r24, Z+7	; 0x07
     5ee:	80 34       	cpi	r24, 0x40	; 64
     5f0:	19 f4       	brne	.+6      	; 0x5f8 <TaskSleep+0x150>
     5f2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <TaskIterator>
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <TaskSleep+0x152>
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <TaskIndex>

   // retrieve context of next task to run
   SP = tasks[TaskIndex].StackPointer;
     5fe:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <TaskIndex>
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	fc 01       	movw	r30, r24
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	e8 0f       	add	r30, r24
     610:	f9 1f       	adc	r31, r25
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ef 5d       	subi	r30, 0xDF	; 223
     618:	fe 4f       	sbci	r31, 0xFE	; 254
     61a:	82 81       	ldd	r24, Z+2	; 0x02
     61c:	93 81       	ldd	r25, Z+3	; 0x03
     61e:	9e bf       	out	0x3e, r25	; 62
     620:	8d bf       	out	0x3d, r24	; 61

00000622 <start>:

   __asm volatile(
     622:	ff 91       	pop	r31
     624:	ef 91       	pop	r30
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	bf 90       	pop	r11
     64c:	af 90       	pop	r10
     64e:	9f 90       	pop	r9
     650:	8f 90       	pop	r8
     652:	7f 90       	pop	r7
     654:	6f 90       	pop	r6
     656:	5f 90       	pop	r5
     658:	4f 90       	pop	r4
     65a:	3f 90       	pop	r3
     65c:	2f 90       	pop	r2
     65e:	1f 90       	pop	r1
     660:	0f 90       	pop	r0
     662:	0f be       	out	0x3f, r0	; 63
     664:	0f 90       	pop	r0
     666:	78 94       	sei
     668:	08 95       	ret
     66a:	08 95       	ret

0000066c <IdleTask>:

void IdleTask(void);

void IdleTask(void)
{
   if (initFunction != NULL)
     66c:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <initFunction>
     670:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <initFunction+0x1>
     674:	30 97       	sbiw	r30, 0x00	; 0
     676:	09 f0       	breq	.+2      	; 0x67a <IdleTask+0xe>
   {
      initFunction();
     678:	09 95       	icall
   }

   while(true)
   {
      TaskSleep(0);
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	14 df       	rcall	.-472    	; 0x4a8 <TaskSleep>
     680:	fc cf       	rjmp	.-8      	; 0x67a <IdleTask+0xe>

00000682 <TaskStart>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     682:	f8 94       	cli

void TaskStart(uint8_t index)
{
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      tasks[index].TaskState = StateRunable;
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	fc 01       	movw	r30, r24
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e8 0f       	add	r30, r24
     692:	f9 1f       	adc	r31, r25
     694:	ee 0f       	add	r30, r30
     696:	ff 1f       	adc	r31, r31
     698:	ef 5d       	subi	r30, 0xDF	; 223
     69a:	fe 4f       	sbci	r31, 0xFE	; 254
     69c:	80 e4       	ldi	r24, 0x40	; 64
     69e:	87 83       	std	Z+7, r24	; 0x07
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     6a0:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     6a2:	08 95       	ret

000006a4 <TaskStop>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6a4:	f8 94       	cli

void TaskStop(uint8_t index)
{
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      tasks[index].TaskState = StateStopped;
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	fc 01       	movw	r30, r24
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	ef 5d       	subi	r30, 0xDF	; 223
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	80 e1       	ldi	r24, 0x10	; 16
     6c0:	87 83       	std	Z+7, r24	; 0x07
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     6c2:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     6c4:	08 95       	ret

000006c6 <EnableTaskSwitching>:
   }
}

void EnableTaskSwitching(void)
{
   TIMSK0 |= (1<<OCIE0A);           // enable timer 0 compare match interrupt
     6c6:	89 b7       	in	r24, 0x39	; 57
     6c8:	82 60       	ori	r24, 0x02	; 2
     6ca:	89 bf       	out	0x39, r24	; 57
     6cc:	08 95       	ret

000006ce <StartKernel>:
   return nrTasks++;
}

void StartKernel(TaskFunction function)
{
   TaskIndex = 0;
     6ce:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <TaskIndex>
   initFunction = function;
     6d2:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <initFunction+0x1>
     6d6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <initFunction>
   
   EnableTaskSwitching();
     6da:	f5 df       	rcall	.-22     	; 0x6c6 <EnableTaskSwitching>
   SP = tasks[TaskIndex].StackPointer;
     6dc:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <TaskIndex>
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	fc 01       	movw	r30, r24
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	e8 0f       	add	r30, r24
     6ee:	f9 1f       	adc	r31, r25
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	ef 5d       	subi	r30, 0xDF	; 223
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	82 81       	ldd	r24, Z+2	; 0x02
     6fa:	93 81       	ldd	r25, Z+3	; 0x03
     6fc:	9e bf       	out	0x3e, r25	; 62
     6fe:	8d bf       	out	0x3d, r24	; 61

   __asm volatile(
     700:	90 cf       	rjmp	.-224    	; 0x622 <start>
     702:	08 95       	ret

00000704 <__vector_9>:
{
   TIMSK0 |= (1<<OCIE0A);           // enable timer 0 compare match interrupt
}

ISR (TIM0_COMPA_vect)
{
     704:	1f 92       	push	r1
     706:	0f 92       	push	r0
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	0f 92       	push	r0
     70c:	11 24       	eor	r1, r1
     70e:	2f 93       	push	r18
     710:	3f 93       	push	r19
     712:	4f 93       	push	r20
     714:	5f 93       	push	r21
     716:	6f 93       	push	r22
     718:	7f 93       	push	r23
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
     71e:	ef 93       	push	r30
     720:	ff 93       	push	r31
   static uint8_t delay = 0;
   static uint8_t i;
   
   sei(); // allow other interrupts (ADC)
     722:	78 94       	sei
   
   delay++;
     724:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <delay.1571>
     728:	8f 5f       	subi	r24, 0xFF	; 255
   if (delay == 10)
     72a:	8a 30       	cpi	r24, 0x0A	; 10
     72c:	19 f0       	breq	.+6      	; 0x734 <__vector_9+0x30>
   static uint8_t delay = 0;
   static uint8_t i;
   
   sei(); // allow other interrupts (ADC)
   
   delay++;
     72e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <delay.1571>
     732:	4a c0       	rjmp	.+148    	; 0x7c8 <__vector_9+0xc4>
   if (delay == 10)
   {
      delay = 0;
     734:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <delay.1571>
      KernelTimerCounter++;
     738:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <KernelTimerCounter>
     73c:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <KernelTimerCounter+0x1>
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <KernelTimerCounter+0x1>
     746:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <KernelTimerCounter>

      // update status of each task
      for (i = 0; i < nrTasks; i++)
     74a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
     74e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <nrTasks>
     752:	88 23       	and	r24, r24
     754:	c9 f1       	breq	.+114    	; 0x7c8 <__vector_9+0xc4>
     756:	20 e0       	ldi	r18, 0x00	; 0
      {
         if ((tasks[i].NextRunTime == KernelTimerCounter) &&
            (tasks[i].TaskState != StateStopped))
         {
            tasks[i].TaskState = StateRunable;
     758:	30 e4       	ldi	r19, 0x40	; 64
      KernelTimerCounter++;

      // update status of each task
      for (i = 0; i < nrTasks; i++)
      {
         if ((tasks[i].NextRunTime == KernelTimerCounter) &&
     75a:	82 2f       	mov	r24, r18
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	fc 01       	movw	r30, r24
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	e8 0f       	add	r30, r24
     76a:	f9 1f       	adc	r31, r25
     76c:	ee 0f       	add	r30, r30
     76e:	ff 1f       	adc	r31, r31
     770:	ef 5d       	subi	r30, 0xDF	; 223
     772:	fe 4f       	sbci	r31, 0xFE	; 254
     774:	60 85       	ldd	r22, Z+8	; 0x08
     776:	71 85       	ldd	r23, Z+9	; 0x09
     778:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <KernelTimerCounter>
     77c:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <KernelTimerCounter+0x1>
     780:	64 17       	cp	r22, r20
     782:	75 07       	cpc	r23, r21
     784:	d1 f4       	brne	.+52     	; 0x7ba <__vector_9+0xb6>
            (tasks[i].TaskState != StateStopped))
     786:	fc 01       	movw	r30, r24
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	e8 0f       	add	r30, r24
     792:	f9 1f       	adc	r31, r25
     794:	ee 0f       	add	r30, r30
     796:	ff 1f       	adc	r31, r31
     798:	ef 5d       	subi	r30, 0xDF	; 223
     79a:	fe 4f       	sbci	r31, 0xFE	; 254
     79c:	47 81       	ldd	r20, Z+7	; 0x07
      KernelTimerCounter++;

      // update status of each task
      for (i = 0; i < nrTasks; i++)
      {
         if ((tasks[i].NextRunTime == KernelTimerCounter) &&
     79e:	40 31       	cpi	r20, 0x10	; 16
     7a0:	61 f0       	breq	.+24     	; 0x7ba <__vector_9+0xb6>
            (tasks[i].TaskState != StateStopped))
         {
            tasks[i].TaskState = StateRunable;
     7a2:	fc 01       	movw	r30, r24
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	e8 0f       	add	r30, r24
     7ae:	f9 1f       	adc	r31, r25
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	ef 5d       	subi	r30, 0xDF	; 223
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	37 83       	std	Z+7, r19	; 0x07
   {
      delay = 0;
      KernelTimerCounter++;

      // update status of each task
      for (i = 0; i < nrTasks; i++)
     7ba:	2f 5f       	subi	r18, 0xFF	; 255
     7bc:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <nrTasks>
     7c0:	28 17       	cp	r18, r24
     7c2:	58 f2       	brcs	.-106    	; 0x75a <__vector_9+0x56>
     7c4:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
         {
            tasks[i].TaskState = StateRunable;
         }
      }
   }
}
     7c8:	ff 91       	pop	r31
     7ca:	ef 91       	pop	r30
     7cc:	9f 91       	pop	r25
     7ce:	8f 91       	pop	r24
     7d0:	7f 91       	pop	r23
     7d2:	6f 91       	pop	r22
     7d4:	5f 91       	pop	r21
     7d6:	4f 91       	pop	r20
     7d8:	3f 91       	pop	r19
     7da:	2f 91       	pop	r18
     7dc:	0f 90       	pop	r0
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	0f 90       	pop	r0
     7e2:	1f 90       	pop	r1
     7e4:	18 95       	reti

000007e6 <GetVoltage>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7e6:	f8 94       	cli
int16_t GetVoltage(void)
{
   int16_t value;
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      value = button; //voltage;
     7e8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     7ec:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     7f0:	78 94       	sei
   }
   return value * 4 / 3;
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	63 e0       	ldi	r22, 0x03	; 3
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	a3 da       	rcall	.-2746   	; 0xfffffd46 <__eeprom_end+0xff7efc94>
     800:	cb 01       	movw	r24, r22
}
     802:	08 95       	ret

00000804 <GetAdcButton>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     804:	f8 94       	cli
{
   enum ButtonAdc value;

   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      if ((button >= 480) && (button <= 520))        value = ButtonAdcMenu;  // 1.60V, cnt=500
     806:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     80a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     80e:	80 3e       	cpi	r24, 0xE0	; 224
     810:	91 40       	sbci	r25, 0x01	; 1
     812:	3c f0       	brlt	.+14     	; 0x822 <GetAdcButton+0x1e>
     814:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     818:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     81c:	89 30       	cpi	r24, 0x09	; 9
     81e:	92 40       	sbci	r25, 0x02	; 2
     820:	f4 f0       	brlt	.+60     	; 0x85e <GetAdcButton+0x5a>
      else if ((button >= 658) && (button <= 698))   value = ButtonAdcDown;  // 1.05V, cnt=680
     822:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     826:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     82a:	82 39       	cpi	r24, 0x92	; 146
     82c:	92 40       	sbci	r25, 0x02	; 2
     82e:	3c f0       	brlt	.+14     	; 0x83e <GetAdcButton+0x3a>
     830:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     834:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     838:	8b 3b       	cpi	r24, 0xBB	; 187
     83a:	92 40       	sbci	r25, 0x02	; 2
     83c:	94 f0       	brlt	.+36     	; 0x862 <GetAdcButton+0x5e>
      else if ((button >= 1000) && (button <= 1040)) value = ButtonAdcUp;    // 3.30V, cnt=1023
     83e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     842:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     846:	88 3e       	cpi	r24, 0xE8	; 232
     848:	93 40       	sbci	r25, 0x03	; 3
     84a:	6c f0       	brlt	.+26     	; 0x866 <GetAdcButton+0x62>
     84c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     850:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     854:	81 31       	cpi	r24, 0x11	; 17
     856:	94 40       	sbci	r25, 0x04	; 4
     858:	44 f4       	brge	.+16     	; 0x86a <GetAdcButton+0x66>
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	07 c0       	rjmp	.+14     	; 0x86c <GetAdcButton+0x68>
{
   enum ButtonAdc value;

   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      if ((button >= 480) && (button <= 520))        value = ButtonAdcMenu;  // 1.60V, cnt=500
     85e:	83 e0       	ldi	r24, 0x03	; 3
     860:	05 c0       	rjmp	.+10     	; 0x86c <GetAdcButton+0x68>
      else if ((button >= 658) && (button <= 698))   value = ButtonAdcDown;  // 1.05V, cnt=680
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	03 c0       	rjmp	.+6      	; 0x86c <GetAdcButton+0x68>
      else if ((button >= 1000) && (button <= 1040)) value = ButtonAdcUp;    // 3.30V, cnt=1023
      else value = ButtonAdcNone;
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	01 c0       	rjmp	.+2      	; 0x86c <GetAdcButton+0x68>
     86a:	80 e0       	ldi	r24, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     86c:	78 94       	sei
   }
   return value;
}
     86e:	08 95       	ret

00000870 <GetNrSamples>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     870:	f8 94       	cli
uint16_t GetNrSamples(void)
{
   uint16_t value;
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      value = OCR1A;
     872:	8a b5       	in	r24, 0x2a	; 42
     874:	9b b5       	in	r25, 0x2b	; 43
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     876:	78 94       	sei
   }
   return value;
}
     878:	08 95       	ret

0000087a <AdcSetup>:

void AdcSetup(void)
{
   /* ADC setup */
   DIDR0 = (1 << ADC0D) | (1 << ADC1D);                     // disable digital buffer for ADC0 and ADC1
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	81 b9       	out	0x01, r24	; 1
   ADMUX = 0;                                               // next digitize buttons and 5V reference
     87e:	17 b8       	out	0x07, r1	; 7

   ADCSRB = (1 << ADTS2) | (1 << ADTS0);                    // start conversion on timer 1 compare B
     880:	85 e0       	ldi	r24, 0x05	; 5
     882:	83 b9       	out	0x03, r24	; 3
   ADCSRA = (1 << ADEN) |                                   // enable ADC
     884:	8e ef       	ldi	r24, 0xFE	; 254
     886:	86 b9       	out	0x06, r24	; 6
            (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0) |    // 125KHz ADC clock
            (1 << ADIE) |                                   // generate interrupt when ready
            (1 << ADATE);                                   // use interrupt source to start ADC

   /* timer 1 setup */
   TCCR1A = 0;                         // CTC mode
     888:	1f bc       	out	0x2f, r1	; 47
   OCR1A = COUNTER_TIME_50HZ;          // 2500 - 1 gives 20 ms delay time
     88a:	83 ec       	ldi	r24, 0xC3	; 195
     88c:	99 e0       	ldi	r25, 0x09	; 9
     88e:	9b bd       	out	0x2b, r25	; 43
     890:	8a bd       	out	0x2a, r24	; 42
   OCR1B = COUNTER_DELAY_BUTTON;       // OCR1B is used to trigger the ADC. The ADC is used for buttons and zero detection
     892:	87 ee       	ldi	r24, 0xE7	; 231
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	99 bd       	out	0x29, r25	; 41
     898:	88 bd       	out	0x28, r24	; 40
   TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10); // CTC mode and 8 MHz divide by 64 prescaler produces 125 KHz clock source
     89a:	8b e0       	ldi	r24, 0x0B	; 11
     89c:	8e bd       	out	0x2e, r24	; 46
     89e:	08 95       	ret

000008a0 <__vector_13>:
}

ISR (ADC_vect)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
   static uint16_t average = COUNTER_TIME_50HZ;

   if (OCR1B == COUNTER_DELAY_BUTTON)
     8c2:	88 b5       	in	r24, 0x28	; 40
     8c4:	99 b5       	in	r25, 0x29	; 41
     8c6:	87 3e       	cpi	r24, 0xE7	; 231
     8c8:	93 40       	sbci	r25, 0x03	; 3
     8ca:	69 f4       	brne	.+26     	; 0x8e6 <__vector_13+0x46>
   {
      // buttons
      button = ADC;
     8cc:	84 b1       	in	r24, 0x04	; 4
     8ce:	95 b1       	in	r25, 0x05	; 5
     8d0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <button+0x1>
     8d4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <button>

      // next adc measurement will be zero crossing
      ADMUX = 1;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	87 b9       	out	0x07, r24	; 7
      OCR1B = 0;
     8dc:	19 bc       	out	0x29, r1	; 41
     8de:	18 bc       	out	0x28, r1	; 40
      SetMotorOutput(GetMotorDirection());
     8e0:	16 d6       	rcall	.+3116   	; 0x150e <GetMotorDirection>
     8e2:	a4 d6       	rcall	.+3400   	; 0x162c <SetMotorOutput>
     8e4:	40 c0       	rjmp	.+128    	; 0x966 <__vector_13+0xc6>
   }
   else
   {
      // zero crossing
      OCR1A = average + (465 - ADC);
     8e6:	24 b1       	in	r18, 0x04	; 4
     8e8:	35 b1       	in	r19, 0x05	; 5
     8ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     8ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     8f2:	8f 52       	subi	r24, 0x2F	; 47
     8f4:	9e 4f       	sbci	r25, 0xFE	; 254
     8f6:	82 1b       	sub	r24, r18
     8f8:	93 0b       	sbc	r25, r19
     8fa:	9b bd       	out	0x2b, r25	; 43
     8fc:	8a bd       	out	0x2a, r24	; 42
      average = (average * 9 + OCR1A) / 10;
     8fe:	4a b5       	in	r20, 0x2a	; 42
     900:	5b b5       	in	r21, 0x2b	; 43
     902:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     906:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     90a:	c9 01       	movw	r24, r18
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	28 0f       	add	r18, r24
     91a:	39 1f       	adc	r19, r25
     91c:	c9 01       	movw	r24, r18
     91e:	84 0f       	add	r24, r20
     920:	95 1f       	adc	r25, r21
     922:	6a e0       	ldi	r22, 0x0A	; 10
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	fb d9       	rcall	.-3082   	; 0xfffffd1e <__eeprom_end+0xff7efc6c>
     928:	86 2f       	mov	r24, r22
     92a:	97 2f       	mov	r25, r23
     92c:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
     930:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__data_start+0x1>
      if (average > COUNTER_TIME_50HZ + COUNTER_DELTA) average = COUNTER_TIME_50HZ + COUNTER_DELTA;
     934:	8c 38       	cpi	r24, 0x8C	; 140
     936:	2a e0       	ldi	r18, 0x0A	; 10
     938:	92 07       	cpc	r25, r18
     93a:	38 f0       	brcs	.+14     	; 0x94a <__vector_13+0xaa>
     93c:	8b e8       	ldi	r24, 0x8B	; 139
     93e:	9a e0       	ldi	r25, 0x0A	; 10
     940:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     944:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     948:	09 c0       	rjmp	.+18     	; 0x95c <__vector_13+0xbc>
      if (average < COUNTER_TIME_50HZ - COUNTER_DELTA) average = COUNTER_TIME_50HZ - COUNTER_DELTA;
     94a:	8b 3f       	cpi	r24, 0xFB	; 251
     94c:	98 40       	sbci	r25, 0x08	; 8
     94e:	30 f4       	brcc	.+12     	; 0x95c <__vector_13+0xbc>
     950:	8b ef       	ldi	r24, 0xFB	; 251
     952:	98 e0       	ldi	r25, 0x08	; 8
     954:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     958:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>

      // next adc measurement will be buttons
      ADMUX = 0;
     95c:	17 b8       	out	0x07, r1	; 7
      OCR1B = COUNTER_DELAY_BUTTON;
     95e:	87 ee       	ldi	r24, 0xE7	; 231
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	99 bd       	out	0x29, r25	; 41
     964:	88 bd       	out	0x28, r24	; 40
   }
   TIFR1 = (1 << TOV1) | (1 << OCF1B) | (1 << OCF1A) | (1 << ICF1);
     966:	87 e2       	ldi	r24, 0x27	; 39
     968:	8b b9       	out	0x0b, r24	; 11

   HandleClock();
     96a:	78 d9       	rcall	.-3344   	; 0xfffffc5c <__eeprom_end+0xff7efbaa>
}
     96c:	ff 91       	pop	r31
     96e:	ef 91       	pop	r30
     970:	bf 91       	pop	r27
     972:	af 91       	pop	r26
     974:	9f 91       	pop	r25
     976:	8f 91       	pop	r24
     978:	7f 91       	pop	r23
     97a:	6f 91       	pop	r22
     97c:	5f 91       	pop	r21
     97e:	4f 91       	pop	r20
     980:	3f 91       	pop	r19
     982:	2f 91       	pop	r18
     984:	0f 90       	pop	r0
     986:	0f be       	out	0x3f, r0	; 63
     988:	0f 90       	pop	r0
     98a:	1f 90       	pop	r1
     98c:	18 95       	reti

0000098e <WriteLcdData>:
   }
}

static void WriteLcdData(uint8_t data)
{
   USIDR = data;
     98e:	8f b9       	out	0x0f, r24	; 15
   USISR = (1 << USIOIF);                // clear counter and counter overflow interrupt flag
     990:	80 e4       	ldi	r24, 0x40	; 64
     992:	8e b9       	out	0x0e, r24	; 14
   while (!(USISR & (1 << USIOIF)) )
     994:	76 99       	sbic	0x0e, 6	; 14
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <WriteLcdData+0x12>
   {
      USICR = (1 << USIWM0) | (1 << USICS1) | (1 << USICLK) | (1 << USITC);
     998:	8b e1       	ldi	r24, 0x1B	; 27
     99a:	8d b9       	out	0x0d, r24	; 13

static void WriteLcdData(uint8_t data)
{
   USIDR = data;
   USISR = (1 << USIOIF);                // clear counter and counter overflow interrupt flag
   while (!(USISR & (1 << USIOIF)) )
     99c:	76 9b       	sbis	0x0e, 6	; 14
     99e:	fd cf       	rjmp	.-6      	; 0x99a <WriteLcdData+0xc>
     9a0:	08 95       	ret

000009a2 <WriteLcdCommand>:
   }
}

static void WriteLcdCommand(uint8_t data)
{
   PORTB &= ~(1 << DDB1);  // PB1: select command register (low)
     9a2:	c1 98       	cbi	0x18, 1	; 24
   WriteLcdData(data);
     9a4:	f4 df       	rcall	.-24     	; 0x98e <WriteLcdData>
   PORTB |= (1 << DDB1);   // PB1: select data register (high)
     9a6:	c1 9a       	sbi	0x18, 1	; 24
     9a8:	08 95       	ret

000009aa <SetAddress>:
}

static void SetAddress(uint8_t x, uint8_t y)
{
     9aa:	cf 93       	push	r28
     9ac:	c8 2f       	mov	r28, r24
   WriteLcdCommand(0x40 + y); // 0 <= y <= 5; bytes
     9ae:	80 e4       	ldi	r24, 0x40	; 64
     9b0:	86 0f       	add	r24, r22
     9b2:	f7 df       	rcall	.-18     	; 0x9a2 <WriteLcdCommand>
   WriteLcdCommand(0x80 + x); // 0 <= x <= 83; pixels
     9b4:	80 e8       	ldi	r24, 0x80	; 128
     9b6:	8c 0f       	add	r24, r28
     9b8:	f4 df       	rcall	.-24     	; 0x9a2 <WriteLcdCommand>
}
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <ReadStringFromRam>:
}

static char ReadStringFromRam(const char* address)
{
   return *address;
}
     9be:	fc 01       	movw	r30, r24
     9c0:	80 81       	ld	r24, Z
     9c2:	08 95       	ret

000009c4 <ReadStringFromEeprom>:
   return pgm_read_byte_near(&(font[characterIndex + position]));
}

static char ReadStringFromEeprom(const char* address)
{
   return eeprom_read_byte((uint8_t *)address);
     9c4:	3a da       	rcall	.-2956   	; 0xfffffe3a <__eeprom_end+0xff7efd88>
}
     9c6:	08 95       	ret

000009c8 <LcdSetup>:
#include "kernel.h"
#include "lcd.h"

void LcdSetup(void)
{
   PORTB &= ~((1 << PORTB1) | (1 << PORTB2));
     9c8:	88 b3       	in	r24, 0x18	; 24
     9ca:	89 7f       	andi	r24, 0xF9	; 249
     9cc:	88 bb       	out	0x18, r24	; 24
   PORTB |= (1 << PORTB0);
     9ce:	c0 9a       	sbi	0x18, 0	; 24
   DDRB |= (1 << DDB0)      // PB0; chip enable active low
     9d0:	87 b3       	in	r24, 0x17	; 23
     9d2:	87 60       	ori	r24, 0x07	; 7
     9d4:	87 bb       	out	0x17, r24	; 23
        |  (1 << DDB1)      // PB1: data register (high) / command register (low)
        |  (1 << DDB2);     // PB2: reset active low

   USICR = (1 << USICS1) | (1 << USICLK);
     9d6:	8a e0       	ldi	r24, 0x0A	; 10
     9d8:	8d b9       	out	0x0d, r24	; 13
   DDRA |= (1 << PORTA4)    // uclk as output
     9da:	8a b3       	in	r24, 0x1a	; 26
     9dc:	80 63       	ori	r24, 0x30	; 48
     9de:	8a bb       	out	0x1a, r24	; 26
        |  (1 << PORTA5);   // LCD Din as output

   PORTB |= (1 << PORTB2);  // nRESET high
     9e0:	c2 9a       	sbi	0x18, 2	; 24
     9e2:	08 95       	ret

000009e4 <EnableLcd>:
}

void EnableLcd(bool enable)
{
   if (enable)
     9e4:	88 23       	and	r24, r24
     9e6:	11 f0       	breq	.+4      	; 0x9ec <EnableLcd+0x8>
   {
      PORTB &= ~(1 << PORTB0);
     9e8:	c0 98       	cbi	0x18, 0	; 24
     9ea:	08 95       	ret
   }
   else
   {
      // enableing the LCD also turns on the backlight
      PORTB |= (1 << PORTB0);
     9ec:	c0 9a       	sbi	0x18, 0	; 24
     9ee:	08 95       	ret

000009f0 <Clear>:
   WriteLcdCommand(0x40 + y); // 0 <= y <= 5; bytes
   WriteLcdCommand(0x80 + x); // 0 <= x <= 83; pixels
}

void Clear(void)
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
   WriteLcdCommand(8);    // display control; switch display off
     9f4:	88 e0       	ldi	r24, 0x08	; 8
     9f6:	d5 df       	rcall	.-86     	; 0x9a2 <WriteLcdCommand>

   SetAddress(0, 0);
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	d6 df       	rcall	.-84     	; 0x9aa <SetAddress>
     9fe:	c8 ef       	ldi	r28, 0xF8	; 248
     a00:	d1 e0       	ldi	r29, 0x01	; 1
   for (uint16_t i = 0; i < 84 * 48 / 8; ++i)
   {
      WriteLcdData(0);
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	c4 df       	rcall	.-120    	; 0x98e <WriteLcdData>
     a06:	21 97       	sbiw	r28, 0x01	; 1
void Clear(void)
{
   WriteLcdCommand(8);    // display control; switch display off

   SetAddress(0, 0);
   for (uint16_t i = 0; i < 84 * 48 / 8; ++i)
     a08:	e1 f7       	brne	.-8      	; 0xa02 <Clear+0x12>
   {
      WriteLcdData(0);
   }
   WriteLcdCommand(0x0C); // display control; switch display on
     a0a:	8c e0       	ldi	r24, 0x0C	; 12
     a0c:	ca df       	rcall	.-108    	; 0x9a2 <WriteLcdCommand>
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <LcdInitialize>:

void LcdInitialize(void)
{
   EnableLcd(true);
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	e6 df       	rcall	.-52     	; 0x9e4 <EnableLcd>
   WriteLcdCommand(0x21); // function set; H = 1
     a18:	81 e2       	ldi	r24, 0x21	; 33
     a1a:	c3 df       	rcall	.-122    	; 0x9a2 <WriteLcdCommand>
   WriteLcdCommand(0x14); // bias value 4 (1 : 48)
     a1c:	84 e1       	ldi	r24, 0x14	; 20
     a1e:	c1 df       	rcall	.-126    	; 0x9a2 <WriteLcdCommand>
   WriteLcdCommand(0xb2); // set Vop to 3 + 50 * 0.06 = 6V
     a20:	82 eb       	ldi	r24, 0xB2	; 178
     a22:	bf df       	rcall	.-130    	; 0x9a2 <WriteLcdCommand>
   WriteLcdCommand(0x06); // temperature control
     a24:	86 e0       	ldi	r24, 0x06	; 6
     a26:	bd df       	rcall	.-134    	; 0x9a2 <WriteLcdCommand>
   WriteLcdCommand(0x20); // function set; H = 0, horizontal addressing mode
     a28:	80 e2       	ldi	r24, 0x20	; 32
     a2a:	bb df       	rcall	.-138    	; 0x9a2 <WriteLcdCommand>
   Clear();               // clear ram
     a2c:	e1 df       	rcall	.-62     	; 0x9f0 <Clear>
     a2e:	08 95       	ret

00000a30 <WriteString>:
   }
   SetAddress(x, y / 8);
}

void WriteString(const uint8_t *font, const uint8_t x, const uint8_t y, char* text)
{
     a30:	2f 92       	push	r2
     a32:	3f 92       	push	r3
     a34:	4f 92       	push	r4
     a36:	5f 92       	push	r5
     a38:	6f 92       	push	r6
     a3a:	7f 92       	push	r7
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	ec 01       	movw	r28, r24
     a56:	96 2e       	mov	r9, r22
     a58:	74 2e       	mov	r7, r20
     a5a:	69 01       	movw	r12, r18
   Clear();               // clear ram
}

static inline uint8_t GetNrRows(const uint8_t *font)
{
   return pgm_read_byte_near(&(font[1]));
     a5c:	fc 01       	movw	r30, r24
     a5e:	31 96       	adiw	r30, 0x01	; 1
     a60:	e4 91       	lpm	r30, Z
   SetAddress(x, y / 8);
}

void WriteString(const uint8_t *font, const uint8_t x, const uint8_t y, char* text)
{
   if (GetNrRows(font) > 8)
     a62:	e9 30       	cpi	r30, 0x09	; 9
     a64:	08 f4       	brcc	.+2      	; 0xa68 <WriteString+0x38>
     a66:	e2 c0       	rjmp	.+452    	; 0xc2c <WriteString+0x1fc>

void static inline Write16PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
     a68:	64 2e       	mov	r6, r20
     a6a:	66 94       	lsr	r6
     a6c:	66 94       	lsr	r6
     a6e:	66 94       	lsr	r6
     a70:	66 2d       	mov	r22, r6
     a72:	89 2d       	mov	r24, r9
     a74:	9a df       	rcall	.-204    	; 0x9aa <SetAddress>

   ch = source(&text[index++]);
     a76:	c6 01       	movw	r24, r12
     a78:	a2 df       	rcall	.-188    	; 0x9be <ReadStringFromRam>
     a7a:	b8 2e       	mov	r11, r24
   while (ch != 0)
     a7c:	88 23       	and	r24, r24
     a7e:	09 f4       	brne	.+2      	; 0xa82 <WriteString+0x52>
     a80:	58 c0       	rjmp	.+176    	; 0xb32 <WriteString+0x102>
     a82:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     a84:	8e 01       	movw	r16, r28
     a86:	0e 5f       	subi	r16, 0xFE	; 254
     a88:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     a8a:	37 2d       	mov	r19, r7
     a8c:	37 70       	andi	r19, 0x07	; 7
     a8e:	a3 2e       	mov	r10, r19
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <WriteString+0x64>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     a92:	24 2d       	mov	r18, r4
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     a94:	fe 01       	movw	r30, r28
     a96:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     a98:	44 23       	and	r20, r20
     a9a:	d9 f0       	breq	.+54     	; 0xad2 <WriteString+0xa2>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     a9c:	f8 01       	movw	r30, r16
     a9e:	84 91       	lpm	r24, Z
     aa0:	8b 15       	cp	r24, r11
     aa2:	d1 f0       	breq	.+52     	; 0xad8 <WriteString+0xa8>
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	06 c0       	rjmp	.+12     	; 0xab8 <WriteString+0x88>
     aac:	fe 01       	movw	r30, r28
     aae:	e8 0f       	add	r30, r24
     ab0:	f9 1f       	adc	r31, r25
     ab2:	e4 91       	lpm	r30, Z
     ab4:	eb 15       	cp	r30, r11
     ab6:	91 f0       	breq	.+36     	; 0xadc <WriteString+0xac>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     ab8:	fc 01       	movw	r30, r24
     aba:	31 96       	adiw	r30, 0x01	; 1
     abc:	ec 0f       	add	r30, r28
     abe:	fd 1f       	adc	r31, r29
     ac0:	e4 91       	lpm	r30, Z
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	32 96       	adiw	r30, 0x02	; 2
     ac6:	8e 0f       	add	r24, r30
     ac8:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     aca:	3f 5f       	subi	r19, 0xFF	; 255
     acc:	43 13       	cpse	r20, r19
     ace:	ee cf       	rjmp	.-36     	; 0xaac <WriteString+0x7c>
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <WriteString+0xac>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <WriteString+0xac>
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     adc:	7c 01       	movw	r14, r24
     ade:	f2 e0       	ldi	r31, 0x02	; 2
     ae0:	ef 0e       	add	r14, r31
     ae2:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     ae4:	fc 01       	movw	r30, r24
     ae6:	31 96       	adiw	r30, 0x01	; 1
     ae8:	ec 0f       	add	r30, r28
     aea:	fd 1f       	adc	r31, r29
     aec:	84 90       	lpm	r8, Z

   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     aee:	86 94       	lsr	r8
      ch = source(&text[index++]);
     af0:	44 24       	eor	r4, r4
     af2:	43 94       	inc	r4
     af4:	42 0e       	add	r4, r18
     af6:	c6 01       	movw	r24, r12
     af8:	82 0f       	add	r24, r18
     afa:	91 1d       	adc	r25, r1
     afc:	60 df       	rcall	.-320    	; 0x9be <ReadStringFromRam>
     afe:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     b00:	88 20       	and	r8, r8
     b02:	91 f0       	breq	.+36     	; 0xb28 <WriteString+0xf8>
     b04:	51 2c       	mov	r5, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     b06:	85 2d       	mov	r24, r5
     b08:	88 0f       	add	r24, r24
     b0a:	f7 01       	movw	r30, r14
     b0c:	e8 0f       	add	r30, r24
     b0e:	f1 1d       	adc	r31, r1
     b10:	ec 0f       	add	r30, r28
     b12:	fd 1f       	adc	r31, r29
     b14:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     b16:	0a 2c       	mov	r0, r10
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <WriteString+0xec>
     b1a:	88 0f       	add	r24, r24
     b1c:	0a 94       	dec	r0
     b1e:	ea f7       	brpl	.-6      	; 0xb1a <WriteString+0xea>
     b20:	36 df       	rcall	.-404    	; 0x98e <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     b22:	53 94       	inc	r5
     b24:	85 10       	cpse	r8, r5
     b26:	ef cf       	rjmp	.-34     	; 0xb06 <WriteString+0xd6>
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	bd dc       	rcall	.-1670   	; 0x4a8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while (ch != 0)
     b2e:	b1 10       	cpse	r11, r1
     b30:	b0 cf       	rjmp	.-160    	; 0xa92 <WriteString+0x62>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   SetAddress(x, y / 8 + 1);
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	66 0d       	add	r22, r6
     b36:	89 2d       	mov	r24, r9
     b38:	38 df       	rcall	.-400    	; 0x9aa <SetAddress>
   index = 0;
   ch = source(&text[index++]);
     b3a:	c6 01       	movw	r24, r12
     b3c:	40 df       	rcall	.-384    	; 0x9be <ReadStringFromRam>
     b3e:	88 2e       	mov	r8, r24
   while (ch != 0)
     b40:	88 23       	and	r24, r24
     b42:	09 f4       	brne	.+2      	; 0xb46 <WriteString+0x116>
     b44:	6f c0       	rjmp	.+222    	; 0xc24 <WriteString+0x1f4>
     b46:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     b48:	8e 01       	movw	r16, r28
     b4a:	0e 5f       	subi	r16, 0xFE	; 254
     b4c:	1f 4f       	sbci	r17, 0xFF	; 255
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
     b4e:	37 2d       	mov	r19, r7
     b50:	37 70       	andi	r19, 0x07	; 7
     b52:	73 2e       	mov	r7, r19
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     b54:	88 e0       	ldi	r24, 0x08	; 8
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	7c 01       	movw	r14, r24
     b5a:	e3 1a       	sub	r14, r19
     b5c:	f1 08       	sbc	r15, r1
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <WriteString+0x132>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     b60:	23 2d       	mov	r18, r3
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     b62:	fe 01       	movw	r30, r28
     b64:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     b66:	44 23       	and	r20, r20
     b68:	d9 f0       	breq	.+54     	; 0xba0 <WriteString+0x170>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     b6a:	f8 01       	movw	r30, r16
     b6c:	84 91       	lpm	r24, Z
     b6e:	88 15       	cp	r24, r8
     b70:	d1 f0       	breq	.+52     	; 0xba6 <WriteString+0x176>
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <WriteString+0x156>
     b7a:	fe 01       	movw	r30, r28
     b7c:	e8 0f       	add	r30, r24
     b7e:	f9 1f       	adc	r31, r25
     b80:	e4 91       	lpm	r30, Z
     b82:	e8 15       	cp	r30, r8
     b84:	91 f0       	breq	.+36     	; 0xbaa <WriteString+0x17a>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     b86:	fc 01       	movw	r30, r24
     b88:	31 96       	adiw	r30, 0x01	; 1
     b8a:	ec 0f       	add	r30, r28
     b8c:	fd 1f       	adc	r31, r29
     b8e:	e4 91       	lpm	r30, Z
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	32 96       	adiw	r30, 0x02	; 2
     b94:	8e 0f       	add	r24, r30
     b96:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     b98:	3f 5f       	subi	r19, 0xFF	; 255
     b9a:	43 13       	cpse	r20, r19
     b9c:	ee cf       	rjmp	.-36     	; 0xb7a <WriteString+0x14a>
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <WriteString+0x17a>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <WriteString+0x17a>
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     baa:	5c 01       	movw	r10, r24
     bac:	f2 e0       	ldi	r31, 0x02	; 2
     bae:	af 0e       	add	r10, r31
     bb0:	b1 1c       	adc	r11, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     bb2:	fc 01       	movw	r30, r24
     bb4:	31 96       	adiw	r30, 0x01	; 1
     bb6:	ec 0f       	add	r30, r28
     bb8:	fd 1f       	adc	r31, r29
     bba:	54 90       	lpm	r5, Z
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     bbc:	56 94       	lsr	r5
      ch = source(&text[index++]);
     bbe:	33 24       	eor	r3, r3
     bc0:	33 94       	inc	r3
     bc2:	32 0e       	add	r3, r18
     bc4:	c6 01       	movw	r24, r12
     bc6:	82 0f       	add	r24, r18
     bc8:	91 1d       	adc	r25, r1
     bca:	f9 de       	rcall	.-526    	; 0x9be <ReadStringFromRam>
     bcc:	88 2e       	mov	r8, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     bce:	55 20       	and	r5, r5
     bd0:	21 f1       	breq	.+72     	; 0xc1a <WriteString+0x1ea>
     bd2:	22 24       	eor	r2, r2
     bd4:	23 94       	inc	r2
     bd6:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     bd8:	84 2d       	mov	r24, r4
     bda:	88 0f       	add	r24, r24
     bdc:	f5 01       	movw	r30, r10
     bde:	e8 0f       	add	r30, r24
     be0:	f1 1d       	adc	r31, r1
     be2:	ec 0f       	add	r30, r28
     be4:	fd 1f       	adc	r31, r29
     be6:	24 91       	lpm	r18, Z
     be8:	f5 01       	movw	r30, r10
     bea:	e2 0d       	add	r30, r2
     bec:	f1 1d       	adc	r31, r1
     bee:	ec 0f       	add	r30, r28
     bf0:	fd 1f       	adc	r31, r29
     bf2:	84 91       	lpm	r24, Z
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	0e 2c       	mov	r0, r14
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <WriteString+0x1ce>
     bfa:	35 95       	asr	r19
     bfc:	27 95       	ror	r18
     bfe:	0a 94       	dec	r0
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <WriteString+0x1ca>
     c02:	07 2c       	mov	r0, r7
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <WriteString+0x1d8>
     c06:	88 0f       	add	r24, r24
     c08:	0a 94       	dec	r0
     c0a:	ea f7       	brpl	.-6      	; 0xc06 <WriteString+0x1d6>
     c0c:	82 2b       	or	r24, r18
     c0e:	bf de       	rcall	.-642    	; 0x98e <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     c10:	43 94       	inc	r4
     c12:	23 94       	inc	r2
     c14:	23 94       	inc	r2
     c16:	54 10       	cpse	r5, r4
     c18:	df cf       	rjmp	.-66     	; 0xbd8 <WriteString+0x1a8>
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	44 dc       	rcall	.-1912   	; 0x4a8 <TaskSleep>
   }

   SetAddress(x, y / 8 + 1);
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
     c20:	81 10       	cpse	r8, r1
     c22:	9e cf       	rjmp	.-196    	; 0xb60 <WriteString+0x130>
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
   }
   SetAddress(x, y / 8);
     c24:	66 2d       	mov	r22, r6
     c26:	89 2d       	mov	r24, r9
     c28:	c0 de       	rcall	.-640    	; 0x9aa <SetAddress>
     c2a:	d2 c0       	rjmp	.+420    	; 0xdd0 <WriteString+0x3a0>

static inline void Write8PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
     c2c:	84 2e       	mov	r8, r20
     c2e:	86 94       	lsr	r8
     c30:	86 94       	lsr	r8
     c32:	86 94       	lsr	r8
     c34:	68 2d       	mov	r22, r8
     c36:	89 2d       	mov	r24, r9
     c38:	b8 de       	rcall	.-656    	; 0x9aa <SetAddress>

   ch = source(&text[index++]);
     c3a:	c6 01       	movw	r24, r12
     c3c:	c0 de       	rcall	.-640    	; 0x9be <ReadStringFromRam>
     c3e:	b8 2e       	mov	r11, r24
   while ((ch != 0) && (ch != 255))
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	8b 0d       	add	r24, r11
     c44:	8e 3f       	cpi	r24, 0xFE	; 254
     c46:	08 f0       	brcs	.+2      	; 0xc4a <WriteString+0x21a>
     c48:	59 c0       	rjmp	.+178    	; 0xcfc <WriteString+0x2cc>
     c4a:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     c4c:	8e 01       	movw	r16, r28
     c4e:	0e 5f       	subi	r16, 0xFE	; 254
     c50:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
     c52:	37 2d       	mov	r19, r7
     c54:	37 70       	andi	r19, 0x07	; 7
     c56:	a3 2e       	mov	r10, r19
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <WriteString+0x22c>
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
     c5a:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     c5c:	fe 01       	movw	r30, r28
     c5e:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     c60:	44 23       	and	r20, r20
     c62:	d9 f0       	breq	.+54     	; 0xc9a <WriteString+0x26a>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     c64:	f8 01       	movw	r30, r16
     c66:	84 91       	lpm	r24, Z
     c68:	8b 15       	cp	r24, r11
     c6a:	d1 f0       	breq	.+52     	; 0xca0 <WriteString+0x270>
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	06 c0       	rjmp	.+12     	; 0xc80 <WriteString+0x250>
     c74:	fe 01       	movw	r30, r28
     c76:	e8 0f       	add	r30, r24
     c78:	f9 1f       	adc	r31, r25
     c7a:	e4 91       	lpm	r30, Z
     c7c:	eb 15       	cp	r30, r11
     c7e:	91 f0       	breq	.+36     	; 0xca4 <WriteString+0x274>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     c80:	fc 01       	movw	r30, r24
     c82:	31 96       	adiw	r30, 0x01	; 1
     c84:	ec 0f       	add	r30, r28
     c86:	fd 1f       	adc	r31, r29
     c88:	e4 91       	lpm	r30, Z
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	32 96       	adiw	r30, 0x02	; 2
     c8e:	8e 0f       	add	r24, r30
     c90:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     c92:	3f 5f       	subi	r19, 0xFF	; 255
     c94:	43 13       	cpse	r20, r19
     c96:	ee cf       	rjmp	.-36     	; 0xc74 <WriteString+0x244>
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <WriteString+0x274>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <WriteString+0x274>
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     ca4:	7c 01       	movw	r14, r24
     ca6:	f2 e0       	ldi	r31, 0x02	; 2
     ca8:	ef 0e       	add	r14, r31
     caa:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     cac:	fc 01       	movw	r30, r24
     cae:	31 96       	adiw	r30, 0x01	; 1
     cb0:	ec 0f       	add	r30, r28
     cb2:	fd 1f       	adc	r31, r29
     cb4:	64 90       	lpm	r6, Z
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
     cb6:	55 24       	eor	r5, r5
     cb8:	53 94       	inc	r5
     cba:	52 0e       	add	r5, r18
     cbc:	c6 01       	movw	r24, r12
     cbe:	82 0f       	add	r24, r18
     cc0:	91 1d       	adc	r25, r1
     cc2:	7d de       	rcall	.-774    	; 0x9be <ReadStringFromRam>
     cc4:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     cc6:	66 20       	and	r6, r6
     cc8:	89 f0       	breq	.+34     	; 0xcec <WriteString+0x2bc>
     cca:	ec 0e       	add	r14, r28
     ccc:	fd 1e       	adc	r15, r29
     cce:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     cd0:	f7 01       	movw	r30, r14
     cd2:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
     cd4:	0a 2c       	mov	r0, r10
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <WriteString+0x2aa>
     cd8:	88 0f       	add	r24, r24
     cda:	0a 94       	dec	r0
     cdc:	ea f7       	brpl	.-6      	; 0xcd8 <WriteString+0x2a8>
     cde:	57 de       	rcall	.-850    	; 0x98e <WriteLcdData>
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     ce0:	43 94       	inc	r4
     ce2:	ff ef       	ldi	r31, 0xFF	; 255
     ce4:	ef 1a       	sub	r14, r31
     ce6:	ff 0a       	sbc	r15, r31
     ce8:	64 10       	cpse	r6, r4
     cea:	f2 cf       	rjmp	.-28     	; 0xcd0 <WriteString+0x2a0>
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	db db       	rcall	.-2122   	; 0x4a8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	8b 0d       	add	r24, r11
     cf6:	8e 3f       	cpi	r24, 0xFE	; 254
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <WriteString+0x2cc>
     cfa:	af cf       	rjmp	.-162    	; 0xc5a <WriteString+0x22a>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   if (y % 8 > 0)
     cfc:	17 2d       	mov	r17, r7
     cfe:	17 70       	andi	r17, 0x07	; 7
     d00:	09 f4       	brne	.+2      	; 0xd04 <WriteString+0x2d4>
     d02:	63 c0       	rjmp	.+198    	; 0xdca <WriteString+0x39a>
   {
      index = 0;
      ch = source(&text[index++]);
     d04:	c6 01       	movw	r24, r12
     d06:	5b de       	rcall	.-842    	; 0x9be <ReadStringFromRam>
     d08:	68 2e       	mov	r6, r24
      SetAddress(x, y / 8 + 1);
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	68 0d       	add	r22, r8
     d0e:	89 2d       	mov	r24, r9
     d10:	4c de       	rcall	.-872    	; 0x9aa <SetAddress>
      while (ch != 0)
     d12:	66 20       	and	r6, r6
     d14:	09 f4       	brne	.+2      	; 0xd18 <WriteString+0x2e8>
     d16:	59 c0       	rjmp	.+178    	; 0xdca <WriteString+0x39a>
     d18:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     d1a:	5e 01       	movw	r10, r28
     d1c:	32 e0       	ldi	r19, 0x02	; 2
     d1e:	a3 0e       	add	r10, r19
     d20:	b1 1c       	adc	r11, r1
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
     d22:	88 e0       	ldi	r24, 0x08	; 8
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	7c 01       	movw	r14, r24
     d28:	e1 1a       	sub	r14, r17
     d2a:	f1 08       	sbc	r15, r1
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <WriteString+0x300>
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
     d2e:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     d30:	fe 01       	movw	r30, r28
     d32:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     d34:	44 23       	and	r20, r20
     d36:	d9 f0       	breq	.+54     	; 0xd6e <WriteString+0x33e>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     d38:	f5 01       	movw	r30, r10
     d3a:	84 91       	lpm	r24, Z
     d3c:	86 15       	cp	r24, r6
     d3e:	d1 f0       	breq	.+52     	; 0xd74 <WriteString+0x344>
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	06 c0       	rjmp	.+12     	; 0xd54 <WriteString+0x324>
     d48:	fe 01       	movw	r30, r28
     d4a:	e8 0f       	add	r30, r24
     d4c:	f9 1f       	adc	r31, r25
     d4e:	e4 91       	lpm	r30, Z
     d50:	e6 15       	cp	r30, r6
     d52:	91 f0       	breq	.+36     	; 0xd78 <WriteString+0x348>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     d54:	fc 01       	movw	r30, r24
     d56:	31 96       	adiw	r30, 0x01	; 1
     d58:	ec 0f       	add	r30, r28
     d5a:	fd 1f       	adc	r31, r29
     d5c:	e4 91       	lpm	r30, Z
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	32 96       	adiw	r30, 0x02	; 2
     d62:	8e 0f       	add	r24, r30
     d64:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     d66:	3f 5f       	subi	r19, 0xFF	; 255
     d68:	43 13       	cpse	r20, r19
     d6a:	ee cf       	rjmp	.-36     	; 0xd48 <WriteString+0x318>
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <WriteString+0x348>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <WriteString+0x348>
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     d78:	8c 01       	movw	r16, r24
     d7a:	0e 5f       	subi	r16, 0xFE	; 254
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     d7e:	fc 01       	movw	r30, r24
     d80:	31 96       	adiw	r30, 0x01	; 1
     d82:	ec 0f       	add	r30, r28
     d84:	fd 1f       	adc	r31, r29
     d86:	74 90       	lpm	r7, Z
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
     d88:	55 24       	eor	r5, r5
     d8a:	53 94       	inc	r5
     d8c:	52 0e       	add	r5, r18
     d8e:	c6 01       	movw	r24, r12
     d90:	82 0f       	add	r24, r18
     d92:	91 1d       	adc	r25, r1
     d94:	14 de       	rcall	.-984    	; 0x9be <ReadStringFromRam>
     d96:	68 2e       	mov	r6, r24
         for (uint8_t n = 0; n < nrColumns; ++n)
     d98:	77 20       	and	r7, r7
     d9a:	91 f0       	breq	.+36     	; 0xdc0 <WriteString+0x390>
     d9c:	0c 0f       	add	r16, r28
     d9e:	1d 1f       	adc	r17, r29
     da0:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     da2:	f8 01       	movw	r30, r16
     da4:	84 91       	lpm	r24, Z
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 2c       	mov	r0, r14
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <WriteString+0x380>
     dac:	95 95       	asr	r25
     dae:	87 95       	ror	r24
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <WriteString+0x37c>
            WriteLcdData(data);
     db4:	ec dd       	rcall	.-1064   	; 0x98e <WriteLcdData>
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
     db6:	43 94       	inc	r4
     db8:	0f 5f       	subi	r16, 0xFF	; 255
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	74 10       	cpse	r7, r4
     dbe:	f1 cf       	rjmp	.-30     	; 0xda2 <WriteString+0x372>
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
            WriteLcdData(data);
         }
         TaskSleep(0);
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	71 db       	rcall	.-2334   	; 0x4a8 <TaskSleep>
   if (y % 8 > 0)
   {
      index = 0;
      ch = source(&text[index++]);
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
     dc6:	61 10       	cpse	r6, r1
     dc8:	b2 cf       	rjmp	.-156    	; 0xd2e <WriteString+0x2fe>
            WriteLcdData(data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
     dca:	68 2d       	mov	r22, r8
     dcc:	89 2d       	mov	r24, r9
     dce:	ed dd       	rcall	.-1062   	; 0x9aa <SetAddress>
   }
   else
   {
      Write8PixelString(font, x, y, ReadStringFromRam, text);
   }
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	7f 90       	pop	r7
     dea:	6f 90       	pop	r6
     dec:	5f 90       	pop	r5
     dee:	4f 90       	pop	r4
     df0:	3f 90       	pop	r3
     df2:	2f 90       	pop	r2
     df4:	08 95       	ret

00000df6 <WriteStaticString>:

void WriteStaticString(const uint8_t *font, uint8_t x, uint8_t y, const char* text)
{
     df6:	2f 92       	push	r2
     df8:	3f 92       	push	r3
     dfa:	4f 92       	push	r4
     dfc:	5f 92       	push	r5
     dfe:	6f 92       	push	r6
     e00:	7f 92       	push	r7
     e02:	8f 92       	push	r8
     e04:	9f 92       	push	r9
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	ec 01       	movw	r28, r24
     e1c:	96 2e       	mov	r9, r22
     e1e:	74 2e       	mov	r7, r20
     e20:	69 01       	movw	r12, r18
   Clear();               // clear ram
}

static inline uint8_t GetNrRows(const uint8_t *font)
{
   return pgm_read_byte_near(&(font[1]));
     e22:	fc 01       	movw	r30, r24
     e24:	31 96       	adiw	r30, 0x01	; 1
     e26:	e4 91       	lpm	r30, Z
   }
}

void WriteStaticString(const uint8_t *font, uint8_t x, uint8_t y, const char* text)
{
   if (GetNrRows(font) > 8)
     e28:	e9 30       	cpi	r30, 0x09	; 9
     e2a:	08 f4       	brcc	.+2      	; 0xe2e <WriteStaticString+0x38>
     e2c:	e2 c0       	rjmp	.+452    	; 0xff2 <WriteStaticString+0x1fc>

void static inline Write16PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
     e2e:	64 2e       	mov	r6, r20
     e30:	66 94       	lsr	r6
     e32:	66 94       	lsr	r6
     e34:	66 94       	lsr	r6
     e36:	66 2d       	mov	r22, r6
     e38:	89 2d       	mov	r24, r9
     e3a:	b7 dd       	rcall	.-1170   	; 0x9aa <SetAddress>

   ch = source(&text[index++]);
     e3c:	c6 01       	movw	r24, r12
     e3e:	c2 dd       	rcall	.-1148   	; 0x9c4 <ReadStringFromEeprom>
     e40:	b8 2e       	mov	r11, r24
   while (ch != 0)
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <WriteStaticString+0x52>
     e46:	58 c0       	rjmp	.+176    	; 0xef8 <WriteStaticString+0x102>
     e48:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     e4a:	8e 01       	movw	r16, r28
     e4c:	0e 5f       	subi	r16, 0xFE	; 254
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     e50:	37 2d       	mov	r19, r7
     e52:	37 70       	andi	r19, 0x07	; 7
     e54:	a3 2e       	mov	r10, r19
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <WriteStaticString+0x64>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     e58:	24 2d       	mov	r18, r4
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     e5a:	fe 01       	movw	r30, r28
     e5c:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     e5e:	44 23       	and	r20, r20
     e60:	d9 f0       	breq	.+54     	; 0xe98 <WriteStaticString+0xa2>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     e62:	f8 01       	movw	r30, r16
     e64:	84 91       	lpm	r24, Z
     e66:	8b 15       	cp	r24, r11
     e68:	d1 f0       	breq	.+52     	; 0xe9e <WriteStaticString+0xa8>
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <WriteStaticString+0x88>
     e72:	fe 01       	movw	r30, r28
     e74:	e8 0f       	add	r30, r24
     e76:	f9 1f       	adc	r31, r25
     e78:	e4 91       	lpm	r30, Z
     e7a:	eb 15       	cp	r30, r11
     e7c:	91 f0       	breq	.+36     	; 0xea2 <WriteStaticString+0xac>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     e7e:	fc 01       	movw	r30, r24
     e80:	31 96       	adiw	r30, 0x01	; 1
     e82:	ec 0f       	add	r30, r28
     e84:	fd 1f       	adc	r31, r29
     e86:	e4 91       	lpm	r30, Z
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	32 96       	adiw	r30, 0x02	; 2
     e8c:	8e 0f       	add	r24, r30
     e8e:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     e90:	3f 5f       	subi	r19, 0xFF	; 255
     e92:	43 13       	cpse	r20, r19
     e94:	ee cf       	rjmp	.-36     	; 0xe72 <WriteStaticString+0x7c>
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <WriteStaticString+0xac>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <WriteStaticString+0xac>
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     ea2:	7c 01       	movw	r14, r24
     ea4:	f2 e0       	ldi	r31, 0x02	; 2
     ea6:	ef 0e       	add	r14, r31
     ea8:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     eaa:	fc 01       	movw	r30, r24
     eac:	31 96       	adiw	r30, 0x01	; 1
     eae:	ec 0f       	add	r30, r28
     eb0:	fd 1f       	adc	r31, r29
     eb2:	84 90       	lpm	r8, Z

   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     eb4:	86 94       	lsr	r8
      ch = source(&text[index++]);
     eb6:	44 24       	eor	r4, r4
     eb8:	43 94       	inc	r4
     eba:	42 0e       	add	r4, r18
     ebc:	c6 01       	movw	r24, r12
     ebe:	82 0f       	add	r24, r18
     ec0:	91 1d       	adc	r25, r1
     ec2:	80 dd       	rcall	.-1280   	; 0x9c4 <ReadStringFromEeprom>
     ec4:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     ec6:	88 20       	and	r8, r8
     ec8:	91 f0       	breq	.+36     	; 0xeee <WriteStaticString+0xf8>
     eca:	51 2c       	mov	r5, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     ecc:	85 2d       	mov	r24, r5
     ece:	88 0f       	add	r24, r24
     ed0:	f7 01       	movw	r30, r14
     ed2:	e8 0f       	add	r30, r24
     ed4:	f1 1d       	adc	r31, r1
     ed6:	ec 0f       	add	r30, r28
     ed8:	fd 1f       	adc	r31, r29
     eda:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     edc:	0a 2c       	mov	r0, r10
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <WriteStaticString+0xec>
     ee0:	88 0f       	add	r24, r24
     ee2:	0a 94       	dec	r0
     ee4:	ea f7       	brpl	.-6      	; 0xee0 <WriteStaticString+0xea>
     ee6:	53 dd       	rcall	.-1370   	; 0x98e <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     ee8:	53 94       	inc	r5
     eea:	85 10       	cpse	r8, r5
     eec:	ef cf       	rjmp	.-34     	; 0xecc <WriteStaticString+0xd6>
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	da da       	rcall	.-2636   	; 0x4a8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while (ch != 0)
     ef4:	b1 10       	cpse	r11, r1
     ef6:	b0 cf       	rjmp	.-160    	; 0xe58 <WriteStaticString+0x62>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   SetAddress(x, y / 8 + 1);
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	66 0d       	add	r22, r6
     efc:	89 2d       	mov	r24, r9
     efe:	55 dd       	rcall	.-1366   	; 0x9aa <SetAddress>
   index = 0;
   ch = source(&text[index++]);
     f00:	c6 01       	movw	r24, r12
     f02:	60 dd       	rcall	.-1344   	; 0x9c4 <ReadStringFromEeprom>
     f04:	88 2e       	mov	r8, r24
   while (ch != 0)
     f06:	88 23       	and	r24, r24
     f08:	09 f4       	brne	.+2      	; 0xf0c <WriteStaticString+0x116>
     f0a:	6f c0       	rjmp	.+222    	; 0xfea <WriteStaticString+0x1f4>
     f0c:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     f0e:	8e 01       	movw	r16, r28
     f10:	0e 5f       	subi	r16, 0xFE	; 254
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
     f14:	37 2d       	mov	r19, r7
     f16:	37 70       	andi	r19, 0x07	; 7
     f18:	73 2e       	mov	r7, r19
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	7c 01       	movw	r14, r24
     f20:	e3 1a       	sub	r14, r19
     f22:	f1 08       	sbc	r15, r1
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <WriteStaticString+0x132>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     f26:	23 2d       	mov	r18, r3
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     f28:	fe 01       	movw	r30, r28
     f2a:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     f2c:	44 23       	and	r20, r20
     f2e:	d9 f0       	breq	.+54     	; 0xf66 <WriteStaticString+0x170>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     f30:	f8 01       	movw	r30, r16
     f32:	84 91       	lpm	r24, Z
     f34:	88 15       	cp	r24, r8
     f36:	d1 f0       	breq	.+52     	; 0xf6c <WriteStaticString+0x176>
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	06 c0       	rjmp	.+12     	; 0xf4c <WriteStaticString+0x156>
     f40:	fe 01       	movw	r30, r28
     f42:	e8 0f       	add	r30, r24
     f44:	f9 1f       	adc	r31, r25
     f46:	e4 91       	lpm	r30, Z
     f48:	e8 15       	cp	r30, r8
     f4a:	91 f0       	breq	.+36     	; 0xf70 <WriteStaticString+0x17a>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     f4c:	fc 01       	movw	r30, r24
     f4e:	31 96       	adiw	r30, 0x01	; 1
     f50:	ec 0f       	add	r30, r28
     f52:	fd 1f       	adc	r31, r29
     f54:	e4 91       	lpm	r30, Z
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	32 96       	adiw	r30, 0x02	; 2
     f5a:	8e 0f       	add	r24, r30
     f5c:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     f5e:	3f 5f       	subi	r19, 0xFF	; 255
     f60:	43 13       	cpse	r20, r19
     f62:	ee cf       	rjmp	.-36     	; 0xf40 <WriteStaticString+0x14a>
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <WriteStaticString+0x17a>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <WriteStaticString+0x17a>
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     f70:	5c 01       	movw	r10, r24
     f72:	f2 e0       	ldi	r31, 0x02	; 2
     f74:	af 0e       	add	r10, r31
     f76:	b1 1c       	adc	r11, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     f78:	fc 01       	movw	r30, r24
     f7a:	31 96       	adiw	r30, 0x01	; 1
     f7c:	ec 0f       	add	r30, r28
     f7e:	fd 1f       	adc	r31, r29
     f80:	54 90       	lpm	r5, Z
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     f82:	56 94       	lsr	r5
      ch = source(&text[index++]);
     f84:	33 24       	eor	r3, r3
     f86:	33 94       	inc	r3
     f88:	32 0e       	add	r3, r18
     f8a:	c6 01       	movw	r24, r12
     f8c:	82 0f       	add	r24, r18
     f8e:	91 1d       	adc	r25, r1
     f90:	19 dd       	rcall	.-1486   	; 0x9c4 <ReadStringFromEeprom>
     f92:	88 2e       	mov	r8, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     f94:	55 20       	and	r5, r5
     f96:	21 f1       	breq	.+72     	; 0xfe0 <WriteStaticString+0x1ea>
     f98:	22 24       	eor	r2, r2
     f9a:	23 94       	inc	r2
     f9c:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     f9e:	84 2d       	mov	r24, r4
     fa0:	88 0f       	add	r24, r24
     fa2:	f5 01       	movw	r30, r10
     fa4:	e8 0f       	add	r30, r24
     fa6:	f1 1d       	adc	r31, r1
     fa8:	ec 0f       	add	r30, r28
     faa:	fd 1f       	adc	r31, r29
     fac:	24 91       	lpm	r18, Z
     fae:	f5 01       	movw	r30, r10
     fb0:	e2 0d       	add	r30, r2
     fb2:	f1 1d       	adc	r31, r1
     fb4:	ec 0f       	add	r30, r28
     fb6:	fd 1f       	adc	r31, r29
     fb8:	84 91       	lpm	r24, Z
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	0e 2c       	mov	r0, r14
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <WriteStaticString+0x1ce>
     fc0:	35 95       	asr	r19
     fc2:	27 95       	ror	r18
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <WriteStaticString+0x1ca>
     fc8:	07 2c       	mov	r0, r7
     fca:	01 c0       	rjmp	.+2      	; 0xfce <WriteStaticString+0x1d8>
     fcc:	88 0f       	add	r24, r24
     fce:	0a 94       	dec	r0
     fd0:	ea f7       	brpl	.-6      	; 0xfcc <WriteStaticString+0x1d6>
     fd2:	82 2b       	or	r24, r18
     fd4:	dc dc       	rcall	.-1608   	; 0x98e <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     fd6:	43 94       	inc	r4
     fd8:	23 94       	inc	r2
     fda:	23 94       	inc	r2
     fdc:	54 10       	cpse	r5, r4
     fde:	df cf       	rjmp	.-66     	; 0xf9e <WriteStaticString+0x1a8>
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	61 da       	rcall	.-2878   	; 0x4a8 <TaskSleep>
   }

   SetAddress(x, y / 8 + 1);
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
     fe6:	81 10       	cpse	r8, r1
     fe8:	9e cf       	rjmp	.-196    	; 0xf26 <WriteStaticString+0x130>
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
   }
   SetAddress(x, y / 8);
     fea:	66 2d       	mov	r22, r6
     fec:	89 2d       	mov	r24, r9
     fee:	dd dc       	rcall	.-1606   	; 0x9aa <SetAddress>
     ff0:	d2 c0       	rjmp	.+420    	; 0x1196 <WriteStaticString+0x3a0>

static inline void Write8PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
     ff2:	84 2e       	mov	r8, r20
     ff4:	86 94       	lsr	r8
     ff6:	86 94       	lsr	r8
     ff8:	86 94       	lsr	r8
     ffa:	68 2d       	mov	r22, r8
     ffc:	89 2d       	mov	r24, r9
     ffe:	d5 dc       	rcall	.-1622   	; 0x9aa <SetAddress>

   ch = source(&text[index++]);
    1000:	c6 01       	movw	r24, r12
    1002:	e0 dc       	rcall	.-1600   	; 0x9c4 <ReadStringFromEeprom>
    1004:	b8 2e       	mov	r11, r24
   while ((ch != 0) && (ch != 255))
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	8b 0d       	add	r24, r11
    100a:	8e 3f       	cpi	r24, 0xFE	; 254
    100c:	08 f0       	brcs	.+2      	; 0x1010 <WriteStaticString+0x21a>
    100e:	59 c0       	rjmp	.+178    	; 0x10c2 <WriteStaticString+0x2cc>
    1010:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
    1012:	8e 01       	movw	r16, r28
    1014:	0e 5f       	subi	r16, 0xFE	; 254
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
    1018:	37 2d       	mov	r19, r7
    101a:	37 70       	andi	r19, 0x07	; 7
    101c:	a3 2e       	mov	r10, r19
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <WriteStaticString+0x22c>
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
    1020:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
    1022:	fe 01       	movw	r30, r28
    1024:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1026:	44 23       	and	r20, r20
    1028:	d9 f0       	breq	.+54     	; 0x1060 <WriteStaticString+0x26a>
   {
      if (value == pgm_read_byte_near(&(font[index])))
    102a:	f8 01       	movw	r30, r16
    102c:	84 91       	lpm	r24, Z
    102e:	8b 15       	cp	r24, r11
    1030:	d1 f0       	breq	.+52     	; 0x1066 <WriteStaticString+0x270>
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <WriteStaticString+0x250>
    103a:	fe 01       	movw	r30, r28
    103c:	e8 0f       	add	r30, r24
    103e:	f9 1f       	adc	r31, r25
    1040:	e4 91       	lpm	r30, Z
    1042:	eb 15       	cp	r30, r11
    1044:	91 f0       	breq	.+36     	; 0x106a <WriteStaticString+0x274>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
    1046:	fc 01       	movw	r30, r24
    1048:	31 96       	adiw	r30, 0x01	; 1
    104a:	ec 0f       	add	r30, r28
    104c:	fd 1f       	adc	r31, r29
    104e:	e4 91       	lpm	r30, Z
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	32 96       	adiw	r30, 0x02	; 2
    1054:	8e 0f       	add	r24, r30
    1056:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1058:	3f 5f       	subi	r19, 0xFF	; 255
    105a:	43 13       	cpse	r20, r19
    105c:	ee cf       	rjmp	.-36     	; 0x103a <WriteStaticString+0x244>
    105e:	05 c0       	rjmp	.+10     	; 0x106a <WriteStaticString+0x274>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <WriteStaticString+0x274>
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
    106a:	7c 01       	movw	r14, r24
    106c:	f2 e0       	ldi	r31, 0x02	; 2
    106e:	ef 0e       	add	r14, r31
    1070:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
    1072:	fc 01       	movw	r30, r24
    1074:	31 96       	adiw	r30, 0x01	; 1
    1076:	ec 0f       	add	r30, r28
    1078:	fd 1f       	adc	r31, r29
    107a:	64 90       	lpm	r6, Z
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
    107c:	55 24       	eor	r5, r5
    107e:	53 94       	inc	r5
    1080:	52 0e       	add	r5, r18
    1082:	c6 01       	movw	r24, r12
    1084:	82 0f       	add	r24, r18
    1086:	91 1d       	adc	r25, r1
    1088:	9d dc       	rcall	.-1734   	; 0x9c4 <ReadStringFromEeprom>
    108a:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
    108c:	66 20       	and	r6, r6
    108e:	89 f0       	breq	.+34     	; 0x10b2 <WriteStaticString+0x2bc>
    1090:	ec 0e       	add	r14, r28
    1092:	fd 1e       	adc	r15, r29
    1094:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
    1096:	f7 01       	movw	r30, r14
    1098:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
    109a:	0a 2c       	mov	r0, r10
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <WriteStaticString+0x2aa>
    109e:	88 0f       	add	r24, r24
    10a0:	0a 94       	dec	r0
    10a2:	ea f7       	brpl	.-6      	; 0x109e <WriteStaticString+0x2a8>
    10a4:	74 dc       	rcall	.-1816   	; 0x98e <WriteLcdData>
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
    10a6:	43 94       	inc	r4
    10a8:	ff ef       	ldi	r31, 0xFF	; 255
    10aa:	ef 1a       	sub	r14, r31
    10ac:	ff 0a       	sbc	r15, r31
    10ae:	64 10       	cpse	r6, r4
    10b0:	f2 cf       	rjmp	.-28     	; 0x1096 <WriteStaticString+0x2a0>
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	f8 d9       	rcall	.-3088   	; 0x4a8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	8b 0d       	add	r24, r11
    10bc:	8e 3f       	cpi	r24, 0xFE	; 254
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <WriteStaticString+0x2cc>
    10c0:	af cf       	rjmp	.-162    	; 0x1020 <WriteStaticString+0x22a>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   if (y % 8 > 0)
    10c2:	17 2d       	mov	r17, r7
    10c4:	17 70       	andi	r17, 0x07	; 7
    10c6:	09 f4       	brne	.+2      	; 0x10ca <WriteStaticString+0x2d4>
    10c8:	63 c0       	rjmp	.+198    	; 0x1190 <WriteStaticString+0x39a>
   {
      index = 0;
      ch = source(&text[index++]);
    10ca:	c6 01       	movw	r24, r12
    10cc:	7b dc       	rcall	.-1802   	; 0x9c4 <ReadStringFromEeprom>
    10ce:	68 2e       	mov	r6, r24
      SetAddress(x, y / 8 + 1);
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	68 0d       	add	r22, r8
    10d4:	89 2d       	mov	r24, r9
    10d6:	69 dc       	rcall	.-1838   	; 0x9aa <SetAddress>
      while (ch != 0)
    10d8:	66 20       	and	r6, r6
    10da:	09 f4       	brne	.+2      	; 0x10de <WriteStaticString+0x2e8>
    10dc:	59 c0       	rjmp	.+178    	; 0x1190 <WriteStaticString+0x39a>
    10de:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
    10e0:	5e 01       	movw	r10, r28
    10e2:	32 e0       	ldi	r19, 0x02	; 2
    10e4:	a3 0e       	add	r10, r19
    10e6:	b1 1c       	adc	r11, r1
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
    10e8:	88 e0       	ldi	r24, 0x08	; 8
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	7c 01       	movw	r14, r24
    10ee:	e1 1a       	sub	r14, r17
    10f0:	f1 08       	sbc	r15, r1
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <WriteStaticString+0x300>
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
    10f4:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
    10f6:	fe 01       	movw	r30, r28
    10f8:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    10fa:	44 23       	and	r20, r20
    10fc:	d9 f0       	breq	.+54     	; 0x1134 <WriteStaticString+0x33e>
   {
      if (value == pgm_read_byte_near(&(font[index])))
    10fe:	f5 01       	movw	r30, r10
    1100:	84 91       	lpm	r24, Z
    1102:	86 15       	cp	r24, r6
    1104:	d1 f0       	breq	.+52     	; 0x113a <WriteStaticString+0x344>
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	06 c0       	rjmp	.+12     	; 0x111a <WriteStaticString+0x324>
    110e:	fe 01       	movw	r30, r28
    1110:	e8 0f       	add	r30, r24
    1112:	f9 1f       	adc	r31, r25
    1114:	e4 91       	lpm	r30, Z
    1116:	e6 15       	cp	r30, r6
    1118:	91 f0       	breq	.+36     	; 0x113e <WriteStaticString+0x348>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
    111a:	fc 01       	movw	r30, r24
    111c:	31 96       	adiw	r30, 0x01	; 1
    111e:	ec 0f       	add	r30, r28
    1120:	fd 1f       	adc	r31, r29
    1122:	e4 91       	lpm	r30, Z
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	32 96       	adiw	r30, 0x02	; 2
    1128:	8e 0f       	add	r24, r30
    112a:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    112c:	3f 5f       	subi	r19, 0xFF	; 255
    112e:	43 13       	cpse	r20, r19
    1130:	ee cf       	rjmp	.-36     	; 0x110e <WriteStaticString+0x318>
    1132:	05 c0       	rjmp	.+10     	; 0x113e <WriteStaticString+0x348>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <WriteStaticString+0x348>
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
    113e:	8c 01       	movw	r16, r24
    1140:	0e 5f       	subi	r16, 0xFE	; 254
    1142:	1f 4f       	sbci	r17, 0xFF	; 255
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
    1144:	fc 01       	movw	r30, r24
    1146:	31 96       	adiw	r30, 0x01	; 1
    1148:	ec 0f       	add	r30, r28
    114a:	fd 1f       	adc	r31, r29
    114c:	74 90       	lpm	r7, Z
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
    114e:	55 24       	eor	r5, r5
    1150:	53 94       	inc	r5
    1152:	52 0e       	add	r5, r18
    1154:	c6 01       	movw	r24, r12
    1156:	82 0f       	add	r24, r18
    1158:	91 1d       	adc	r25, r1
    115a:	34 dc       	rcall	.-1944   	; 0x9c4 <ReadStringFromEeprom>
    115c:	68 2e       	mov	r6, r24
         for (uint8_t n = 0; n < nrColumns; ++n)
    115e:	77 20       	and	r7, r7
    1160:	91 f0       	breq	.+36     	; 0x1186 <WriteStaticString+0x390>
    1162:	0c 0f       	add	r16, r28
    1164:	1d 1f       	adc	r17, r29
    1166:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
    1168:	f8 01       	movw	r30, r16
    116a:	84 91       	lpm	r24, Z
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 2c       	mov	r0, r14
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <WriteStaticString+0x380>
    1172:	95 95       	asr	r25
    1174:	87 95       	ror	r24
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <WriteStaticString+0x37c>
            WriteLcdData(data);
    117a:	09 dc       	rcall	.-2030   	; 0x98e <WriteLcdData>
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
    117c:	43 94       	inc	r4
    117e:	0f 5f       	subi	r16, 0xFF	; 255
    1180:	1f 4f       	sbci	r17, 0xFF	; 255
    1182:	74 10       	cpse	r7, r4
    1184:	f1 cf       	rjmp	.-30     	; 0x1168 <WriteStaticString+0x372>
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
            WriteLcdData(data);
         }
         TaskSleep(0);
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	8e d9       	rcall	.-3300   	; 0x4a8 <TaskSleep>
   if (y % 8 > 0)
   {
      index = 0;
      ch = source(&text[index++]);
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
    118c:	61 10       	cpse	r6, r1
    118e:	b2 cf       	rjmp	.-156    	; 0x10f4 <WriteStaticString+0x2fe>
            WriteLcdData(data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
    1190:	68 2d       	mov	r22, r8
    1192:	89 2d       	mov	r24, r9
    1194:	0a dc       	rcall	.-2028   	; 0x9aa <SetAddress>
   }
   else
   {
      Write8PixelString(font, x, y, ReadStringFromEeprom, text);
   }
}
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	df 90       	pop	r13
    11a4:	cf 90       	pop	r12
    11a6:	bf 90       	pop	r11
    11a8:	af 90       	pop	r10
    11aa:	9f 90       	pop	r9
    11ac:	8f 90       	pop	r8
    11ae:	7f 90       	pop	r7
    11b0:	6f 90       	pop	r6
    11b2:	5f 90       	pop	r5
    11b4:	4f 90       	pop	r4
    11b6:	3f 90       	pop	r3
    11b8:	2f 90       	pop	r2
    11ba:	08 95       	ret

000011bc <WriteInverted8PixelString>:

void WriteInverted8PixelString(const uint8_t *font, const uint8_t x, uint8_t y, const char* text)
{
    11bc:	4f 92       	push	r4
    11be:	5f 92       	push	r5
    11c0:	6f 92       	push	r6
    11c2:	7f 92       	push	r7
    11c4:	8f 92       	push	r8
    11c6:	9f 92       	push	r9
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
    11de:	96 2e       	mov	r9, r22
    11e0:	74 2e       	mov	r7, r20
    11e2:	69 01       	movw	r12, r18
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
    11e4:	84 2e       	mov	r8, r20
    11e6:	86 94       	lsr	r8
    11e8:	86 94       	lsr	r8
    11ea:	86 94       	lsr	r8
    11ec:	68 2d       	mov	r22, r8
    11ee:	89 2d       	mov	r24, r9
    11f0:	dc db       	rcall	.-2120   	; 0x9aa <SetAddress>

   ch = eeprom_read_byte(&text[index++]);
    11f2:	c6 01       	movw	r24, r12
    11f4:	22 d6       	rcall	.+3140   	; 0x1e3a <eeprom_read_byte>
    11f6:	b8 2e       	mov	r11, r24
   while (ch != 0)
    11f8:	88 23       	and	r24, r24
    11fa:	09 f4       	brne	.+2      	; 0x11fe <WriteInverted8PixelString+0x42>
    11fc:	57 c0       	rjmp	.+174    	; 0x12ac <WriteInverted8PixelString+0xf0>
    11fe:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
    1200:	8e 01       	movw	r16, r28
    1202:	0e 5f       	subi	r16, 0xFE	; 254
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = eeprom_read_byte(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(~data);
    1206:	37 2d       	mov	r19, r7
    1208:	37 70       	andi	r19, 0x07	; 7
    120a:	a3 2e       	mov	r10, r19
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <WriteInverted8PixelString+0x54>
   ch = eeprom_read_byte(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = eeprom_read_byte(&text[index++]);
    120e:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
    1210:	fe 01       	movw	r30, r28
    1212:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1214:	44 23       	and	r20, r20
    1216:	d9 f0       	breq	.+54     	; 0x124e <WriteInverted8PixelString+0x92>
   {
      if (value == pgm_read_byte_near(&(font[index])))
    1218:	f8 01       	movw	r30, r16
    121a:	84 91       	lpm	r24, Z
    121c:	8b 15       	cp	r24, r11
    121e:	d1 f0       	breq	.+52     	; 0x1254 <WriteInverted8PixelString+0x98>
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	06 c0       	rjmp	.+12     	; 0x1234 <WriteInverted8PixelString+0x78>
    1228:	fe 01       	movw	r30, r28
    122a:	e8 0f       	add	r30, r24
    122c:	f9 1f       	adc	r31, r25
    122e:	e4 91       	lpm	r30, Z
    1230:	eb 15       	cp	r30, r11
    1232:	91 f0       	breq	.+36     	; 0x1258 <WriteInverted8PixelString+0x9c>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
    1234:	fc 01       	movw	r30, r24
    1236:	31 96       	adiw	r30, 0x01	; 1
    1238:	ec 0f       	add	r30, r28
    123a:	fd 1f       	adc	r31, r29
    123c:	e4 91       	lpm	r30, Z
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	32 96       	adiw	r30, 0x02	; 2
    1242:	8e 0f       	add	r24, r30
    1244:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1246:	3f 5f       	subi	r19, 0xFF	; 255
    1248:	43 13       	cpse	r20, r19
    124a:	ee cf       	rjmp	.-36     	; 0x1228 <WriteInverted8PixelString+0x6c>
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <WriteInverted8PixelString+0x9c>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <WriteInverted8PixelString+0x9c>
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
    1258:	7c 01       	movw	r14, r24
    125a:	f2 e0       	ldi	r31, 0x02	; 2
    125c:	ef 0e       	add	r14, r31
    125e:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
    1260:	fc 01       	movw	r30, r24
    1262:	31 96       	adiw	r30, 0x01	; 1
    1264:	ec 0f       	add	r30, r28
    1266:	fd 1f       	adc	r31, r29
    1268:	64 90       	lpm	r6, Z
   ch = eeprom_read_byte(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = eeprom_read_byte(&text[index++]);
    126a:	55 24       	eor	r5, r5
    126c:	53 94       	inc	r5
    126e:	52 0e       	add	r5, r18
    1270:	c6 01       	movw	r24, r12
    1272:	82 0f       	add	r24, r18
    1274:	91 1d       	adc	r25, r1
    1276:	e1 d5       	rcall	.+3010   	; 0x1e3a <eeprom_read_byte>
    1278:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
    127a:	66 20       	and	r6, r6
    127c:	91 f0       	breq	.+36     	; 0x12a2 <WriteInverted8PixelString+0xe6>
    127e:	ec 0e       	add	r14, r28
    1280:	fd 1e       	adc	r15, r29
    1282:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
    1284:	f7 01       	movw	r30, r14
    1286:	84 91       	lpm	r24, Z
      ch = eeprom_read_byte(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(~data);
    1288:	0a 2c       	mov	r0, r10
    128a:	01 c0       	rjmp	.+2      	; 0x128e <WriteInverted8PixelString+0xd2>
    128c:	88 0f       	add	r24, r24
    128e:	0a 94       	dec	r0
    1290:	ea f7       	brpl	.-6      	; 0x128c <WriteInverted8PixelString+0xd0>
    1292:	80 95       	com	r24
    1294:	7c db       	rcall	.-2312   	; 0x98e <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = eeprom_read_byte(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
    1296:	43 94       	inc	r4
    1298:	ff ef       	ldi	r31, 0xFF	; 255
    129a:	ef 1a       	sub	r14, r31
    129c:	ff 0a       	sbc	r15, r31
    129e:	46 10       	cpse	r4, r6
    12a0:	f1 cf       	rjmp	.-30     	; 0x1284 <WriteInverted8PixelString+0xc8>
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(~data);
      }
      TaskSleep(0);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	00 d9       	rcall	.-3584   	; 0x4a8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = eeprom_read_byte(&text[index++]);
   while (ch != 0)
    12a8:	b1 10       	cpse	r11, r1
    12aa:	b1 cf       	rjmp	.-158    	; 0x120e <WriteInverted8PixelString+0x52>
         WriteLcdData(~data);
      }
      TaskSleep(0);
   }

   if (y % 8 > 0)
    12ac:	17 2d       	mov	r17, r7
    12ae:	17 70       	andi	r17, 0x07	; 7
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <WriteInverted8PixelString+0xf8>
    12b2:	64 c0       	rjmp	.+200    	; 0x137c <WriteInverted8PixelString+0x1c0>
   {
      index = 0;
      ch = eeprom_read_byte(&text[index++]);
    12b4:	c6 01       	movw	r24, r12
    12b6:	c1 d5       	rcall	.+2946   	; 0x1e3a <eeprom_read_byte>
    12b8:	68 2e       	mov	r6, r24
      SetAddress(x, y / 8 + 1);
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	68 0d       	add	r22, r8
    12be:	89 2d       	mov	r24, r9
    12c0:	74 db       	rcall	.-2328   	; 0x9aa <SetAddress>
      while (ch != 0)
    12c2:	66 20       	and	r6, r6
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <WriteInverted8PixelString+0x10c>
    12c6:	5a c0       	rjmp	.+180    	; 0x137c <WriteInverted8PixelString+0x1c0>
    12c8:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
    12ca:	5e 01       	movw	r10, r28
    12cc:	32 e0       	ldi	r19, 0x02	; 2
    12ce:	a3 0e       	add	r10, r19
    12d0:	b1 1c       	adc	r11, r1
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
    12d2:	88 e0       	ldi	r24, 0x08	; 8
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	7c 01       	movw	r14, r24
    12d8:	e1 1a       	sub	r14, r17
    12da:	f1 08       	sbc	r15, r1
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <WriteInverted8PixelString+0x124>
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
    12de:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
    12e0:	fe 01       	movw	r30, r28
    12e2:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    12e4:	44 23       	and	r20, r20
    12e6:	d9 f0       	breq	.+54     	; 0x131e <WriteInverted8PixelString+0x162>
   {
      if (value == pgm_read_byte_near(&(font[index])))
    12e8:	f5 01       	movw	r30, r10
    12ea:	84 91       	lpm	r24, Z
    12ec:	86 15       	cp	r24, r6
    12ee:	d1 f0       	breq	.+52     	; 0x1324 <WriteInverted8PixelString+0x168>
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <WriteInverted8PixelString+0x148>
    12f8:	fe 01       	movw	r30, r28
    12fa:	e8 0f       	add	r30, r24
    12fc:	f9 1f       	adc	r31, r25
    12fe:	e4 91       	lpm	r30, Z
    1300:	e6 15       	cp	r30, r6
    1302:	91 f0       	breq	.+36     	; 0x1328 <WriteInverted8PixelString+0x16c>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
    1304:	fc 01       	movw	r30, r24
    1306:	31 96       	adiw	r30, 0x01	; 1
    1308:	ec 0f       	add	r30, r28
    130a:	fd 1f       	adc	r31, r29
    130c:	e4 91       	lpm	r30, Z
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	32 96       	adiw	r30, 0x02	; 2
    1312:	8e 0f       	add	r24, r30
    1314:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1316:	3f 5f       	subi	r19, 0xFF	; 255
    1318:	43 13       	cpse	r20, r19
    131a:	ee cf       	rjmp	.-36     	; 0x12f8 <WriteInverted8PixelString+0x13c>
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <WriteInverted8PixelString+0x16c>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <WriteInverted8PixelString+0x16c>
    1324:	82 e0       	ldi	r24, 0x02	; 2
    1326:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
    1328:	8c 01       	movw	r16, r24
    132a:	0e 5f       	subi	r16, 0xFE	; 254
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
    132e:	fc 01       	movw	r30, r24
    1330:	31 96       	adiw	r30, 0x01	; 1
    1332:	ec 0f       	add	r30, r28
    1334:	fd 1f       	adc	r31, r29
    1336:	74 90       	lpm	r7, Z
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
    1338:	55 24       	eor	r5, r5
    133a:	53 94       	inc	r5
    133c:	52 0e       	add	r5, r18
    133e:	c6 01       	movw	r24, r12
    1340:	82 0f       	add	r24, r18
    1342:	91 1d       	adc	r25, r1
    1344:	7a d5       	rcall	.+2804   	; 0x1e3a <eeprom_read_byte>
    1346:	68 2e       	mov	r6, r24
         for (uint8_t n = 0; n < nrColumns; ++n)
    1348:	77 20       	and	r7, r7
    134a:	99 f0       	breq	.+38     	; 0x1372 <WriteInverted8PixelString+0x1b6>
    134c:	0c 0f       	add	r16, r28
    134e:	1d 1f       	adc	r17, r29
    1350:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
    1352:	f8 01       	movw	r30, r16
    1354:	84 91       	lpm	r24, Z
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 2c       	mov	r0, r14
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <WriteInverted8PixelString+0x1a4>
    135c:	95 95       	asr	r25
    135e:	87 95       	ror	r24
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <WriteInverted8PixelString+0x1a0>
            WriteLcdData(~data);
    1364:	80 95       	com	r24
    1366:	13 db       	rcall	.-2522   	; 0x98e <WriteLcdData>
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
    1368:	43 94       	inc	r4
    136a:	0f 5f       	subi	r16, 0xFF	; 255
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	47 10       	cpse	r4, r7
    1370:	f0 cf       	rjmp	.-32     	; 0x1352 <WriteInverted8PixelString+0x196>
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
            WriteLcdData(~data);
         }
         TaskSleep(0);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	98 d8       	rcall	.-3792   	; 0x4a8 <TaskSleep>
   if (y % 8 > 0)
   {
      index = 0;
      ch = eeprom_read_byte(&text[index++]);
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
    1378:	61 10       	cpse	r6, r1
    137a:	b1 cf       	rjmp	.-158    	; 0x12de <WriteInverted8PixelString+0x122>
            WriteLcdData(~data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
    137c:	68 2d       	mov	r22, r8
    137e:	89 2d       	mov	r24, r9
    1380:	14 db       	rcall	.-2520   	; 0x9aa <SetAddress>
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	bf 90       	pop	r11
    1394:	af 90       	pop	r10
    1396:	9f 90       	pop	r9
    1398:	8f 90       	pop	r8
    139a:	7f 90       	pop	r7
    139c:	6f 90       	pop	r6
    139e:	5f 90       	pop	r5
    13a0:	4f 90       	pop	r4
    13a2:	08 95       	ret

000013a4 <SetKeyHandler>:
   }
}

void SetKeyHandler(void (*handler)(enum PressedButtonState))
{
   keyHandler = handler;
    13a4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <keyHandler+0x1>
    13a8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <keyHandler>
    13ac:	08 95       	ret

000013ae <ButtonSetup>:
}

void ButtonSetup(void)
{
   LcdSetup();
    13ae:	0c db       	rcall	.-2536   	; 0x9c8 <LcdSetup>
   LcdInitialize();
    13b0:	31 db       	rcall	.-2462   	; 0xa14 <LcdInitialize>
    13b2:	08 95       	ret

000013b4 <ButtonTask>:
   if (oldAdcButton != newAdcButton)
   {
      count = 0;
      if (keyHandler)
      {
         if (pressedButton % 3 == 1)
    13b4:	d3 e0       	ldi	r29, 0x03	; 3
         {
            pressedButton = PressedButtonNone;
    13b6:	19 e0       	ldi	r17, 0x09	; 9
         pressedButton++;
         if (keyHandler) keyHandler(pressedButton);
      }
      else if (count > LONGPRESS)
      {
        count = LONGPRESS + 1;
    13b8:	05 e6       	ldi	r16, 0x65	; 101
{
   switch (adcButton)
   {
      case ButtonAdcDown: return PressedButtonDown;
      case ButtonAdcUp:   return PressedButtonUp;
      case ButtonAdcMenu: return PressedButtonMenu;
    13ba:	0f 2e       	mov	r0, r31
    13bc:	f6 e0       	ldi	r31, 0x06	; 6
    13be:	ff 2e       	mov	r15, r31
    13c0:	f0 2d       	mov	r31, r0

static inline void CheckButtonPress(void)
{
   static enum ButtonAdc oldAdcButton = ButtonAdcNone;
   static uint8_t count = 0;
   enum ButtonAdc newAdcButton = GetAdcButton();
    13c2:	20 da       	rcall	.-3008   	; 0x804 <GetAdcButton>
    13c4:	c8 2f       	mov	r28, r24

   if (oldAdcButton != newAdcButton)
    13c6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <oldAdcButton.1578>
    13ca:	c8 17       	cp	r28, r24
    13cc:	d1 f0       	breq	.+52     	; 0x1402 <ButtonTask+0x4e>
   {
      count = 0;
    13ce:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <count.1579>
      if (keyHandler)
    13d2:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <keyHandler>
    13d6:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <keyHandler+0x1>
    13da:	30 97       	sbiw	r30, 0x00	; 0
    13dc:	81 f0       	breq	.+32     	; 0x13fe <ButtonTask+0x4a>
      {
         if (pressedButton % 3 == 1)
    13de:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <pressedButton>
    13e2:	82 2f       	mov	r24, r18
    13e4:	6d 2f       	mov	r22, r29
    13e6:	8f d4       	rcall	.+2334   	; 0x1d06 <__udivmodqi4>
    13e8:	91 30       	cpi	r25, 0x01	; 1
    13ea:	19 f4       	brne	.+6      	; 0x13f2 <ButtonTask+0x3e>
         {
            pressedButton = PressedButtonNone;
    13ec:	10 93 62 00 	sts	0x0062, r17	; 0x800062 <pressedButton>
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <ButtonTask+0x44>
         }
         else
         {
            pressedButton += 2;
    13f2:	2e 5f       	subi	r18, 0xFE	; 254
    13f4:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <pressedButton>
         }
         
         keyHandler(pressedButton);
    13f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pressedButton>
    13fc:	09 95       	icall
      }
      oldAdcButton = newAdcButton;
    13fe:	c0 93 6b 00 	sts	0x006B, r28	; 0x80006b <oldAdcButton.1578>
   }

   if (newAdcButton != ButtonAdcNone)
    1402:	cc 23       	and	r28, r28
    1404:	91 f1       	breq	.+100    	; 0x146a <ButtonTask+0xb6>
   {
      count++;
    1406:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <count.1579>
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <count.1579>

      if (count == 5)
    1410:	85 30       	cpi	r24, 0x05	; 5
    1412:	c1 f4       	brne	.+48     	; 0x1444 <ButtonTask+0x90>
static enum PressedButtonState pressedButton = PressedButtonNone;
static void (*keyHandler)(enum PressedButtonState);

static inline enum PressedButtonState AdcButtonToPressedButton(enum ButtonAdc adcButton)
{
   switch (adcButton)
    1414:	c2 30       	cpi	r28, 0x02	; 2
    1416:	29 f0       	breq	.+10     	; 0x1422 <ButtonTask+0x6e>
    1418:	c3 30       	cpi	r28, 0x03	; 3
    141a:	29 f0       	breq	.+10     	; 0x1426 <ButtonTask+0x72>
    141c:	c1 30       	cpi	r28, 0x01	; 1
    141e:	29 f4       	brne	.+10     	; 0x142a <ButtonTask+0x76>
    1420:	06 c0       	rjmp	.+12     	; 0x142e <ButtonTask+0x7a>
   {
      case ButtonAdcDown: return PressedButtonDown;
      case ButtonAdcUp:   return PressedButtonUp;
    1422:	8d 2f       	mov	r24, r29
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <ButtonTask+0x7c>
      case ButtonAdcMenu: return PressedButtonMenu;
    1426:	8f 2d       	mov	r24, r15
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <ButtonTask+0x7c>
      case ButtonAdcNone:
      default:
         return PressedButtonNone;
    142a:	81 2f       	mov	r24, r17
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <ButtonTask+0x7c>

static inline enum PressedButtonState AdcButtonToPressedButton(enum ButtonAdc adcButton)
{
   switch (adcButton)
   {
      case ButtonAdcDown: return PressedButtonDown;
    142e:	80 e0       	ldi	r24, 0x00	; 0
   {
      count++;

      if (count == 5)
      {
         pressedButton = AdcButtonToPressedButton(newAdcButton);
    1430:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pressedButton>
         if (keyHandler) keyHandler(pressedButton);
    1434:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <keyHandler>
    1438:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <keyHandler+0x1>
    143c:	30 97       	sbiw	r30, 0x00	; 0
    143e:	a9 f0       	breq	.+42     	; 0x146a <ButtonTask+0xb6>
    1440:	09 95       	icall
    1442:	13 c0       	rjmp	.+38     	; 0x146a <ButtonTask+0xb6>
      }
      else if (count == LONGPRESS)
    1444:	84 36       	cpi	r24, 0x64	; 100
    1446:	69 f4       	brne	.+26     	; 0x1462 <ButtonTask+0xae>
      {
         pressedButton++;
    1448:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pressedButton>
    144c:	8f 5f       	subi	r24, 0xFF	; 255
    144e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pressedButton>
         if (keyHandler) keyHandler(pressedButton);
    1452:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <keyHandler>
    1456:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <keyHandler+0x1>
    145a:	30 97       	sbiw	r30, 0x00	; 0
    145c:	31 f0       	breq	.+12     	; 0x146a <ButtonTask+0xb6>
    145e:	09 95       	icall
    1460:	04 c0       	rjmp	.+8      	; 0x146a <ButtonTask+0xb6>
      }
      else if (count > LONGPRESS)
    1462:	85 36       	cpi	r24, 0x65	; 101
    1464:	10 f0       	brcs	.+4      	; 0x146a <ButtonTask+0xb6>
      {
        count = LONGPRESS + 1;
    1466:	00 93 6a 00 	sts	0x006A, r16	; 0x80006a <count.1579>
void ButtonTask(void)
{
   while (true)
   {
      CheckButtonPress();
      TaskSleep(5);
    146a:	85 e0       	ldi	r24, 0x05	; 5
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	1c d8       	rcall	.-4040   	; 0x4a8 <TaskSleep>
      HandleDisplay();
    1470:	0a d0       	rcall	.+20     	; 0x1486 <HandleDisplay>
      TaskSleep(5);
    1472:	85 e0       	ldi	r24, 0x05	; 5
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	18 d8       	rcall	.-4048   	; 0x4a8 <TaskSleep>
   }
    1478:	a4 cf       	rjmp	.-184    	; 0x13c2 <ButtonTask+0xe>

0000147a <GetScreenMode>:
}

enum ScreenModeType GetScreenMode(void)
{
   return screen;
}
    147a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <screen>
    147e:	08 95       	ret

00001480 <SetScreenMode>:

void SetScreenMode(enum ScreenModeType screenMode)
{
   screen = screenMode;
    1480:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
    1484:	08 95       	ret

00001486 <HandleDisplay>:
}

void HandleDisplay(void)
{
   switch(screen)
    1486:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <screen>
    148a:	8e 2f       	mov	r24, r30
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	89 30       	cpi	r24, 0x09	; 9
    1490:	91 05       	cpc	r25, r1
    1492:	d0 f5       	brcc	.+116    	; 0x1508 <HandleDisplay+0x82>
    1494:	fc 01       	movw	r30, r24
    1496:	ef 5e       	subi	r30, 0xEF	; 239
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	09 94       	ijmp
static char EEMEM ProductTitle[20] = "Sun Blind Control";
static char EEMEM ProductVersion[20] = "version 1.0";

static void displayProductTitle(void)
{
   Clear();
    149c:	a9 da       	rcall	.-2734   	; 0x9f0 <Clear>
   WriteStaticString(font5x8, 0, 10, ProductTitle);
    149e:	24 e1       	ldi	r18, 0x14	; 20
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4a e0       	ldi	r20, 0x0A	; 10
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	80 e3       	ldi	r24, 0x30	; 48
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	a5 dc       	rcall	.-1718   	; 0xdf6 <WriteStaticString>
   WriteStaticString(font5x8, 10, 24, ProductVersion);
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	48 e1       	ldi	r20, 0x18	; 24
    14b2:	6a e0       	ldi	r22, 0x0A	; 10
    14b4:	80 e3       	ldi	r24, 0x30	; 48
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	9e dc       	rcall	.-1732   	; 0xdf6 <WriteStaticString>
   TaskSleep(2000);
    14ba:	80 ed       	ldi	r24, 0xD0	; 208
    14bc:	97 e0       	ldi	r25, 0x07	; 7
    14be:	f4 d7       	rcall	.+4072   	; 0x24a8 <__TEXT_REGION_LENGTH__+0x4a8>
   switch(screen)
   {
      case ModeProductTitle:
         // write product title and software version
         displayProductTitle();
         screen = ModeMainScreenInit;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
         break;
    14c6:	08 95       	ret

      case ModeMainScreenInit:
         // display main screen with progress bar and percent blinds lowered
         mainScreenInit();
    14c8:	99 d1       	rcall	.+818    	; 0x17fc <mainScreenInit>
         SetKeyHandler(mainScreenKey);
    14ca:	88 e2       	ldi	r24, 0x28	; 40
    14cc:	9c e0       	ldi	r25, 0x0C	; 12
    14ce:	6a df       	rcall	.-300    	; 0x13a4 <SetKeyHandler>
         screen = ModeMainScreenUpdate;
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
         break;
    14d6:	08 95       	ret

      case ModeMainScreenUpdate:
         // update main screen
         mainScreenUpdate();
    14d8:	10 d2       	rcall	.+1056   	; 0x18fa <mainScreenUpdate>
         break;
    14da:	08 95       	ret

      case ModeAskClosingTimeInit:
         // ask user to input time before closing the sun blinds
         closingTimeInit();
    14dc:	aa d2       	rcall	.+1364   	; 0x1a32 <closingTimeInit>
         SetKeyHandler(ClosingTimeKey);
    14de:	87 e3       	ldi	r24, 0x37	; 55
    14e0:	9d e0       	ldi	r25, 0x0D	; 13
    14e2:	60 df       	rcall	.-320    	; 0x13a4 <SetKeyHandler>
         screen = ModeAskClosingTimeUpdate;
    14e4:	84 e0       	ldi	r24, 0x04	; 4
    14e6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
         break;
    14ea:	08 95       	ret

      case ModeAskClosingTimeUpdate:
         // update the input time screen
         closingTimeUpdate();
    14ec:	02 d3       	rcall	.+1540   	; 0x1af2 <closingTimeUpdate>
         break;
    14ee:	08 95       	ret

      case ModeAskFullOpenInit:
         // display screen to input time to open sun blinds 100%
         Clear();
    14f0:	7f da       	rcall	.-2818   	; 0x9f0 <Clear>
         screen = ModeAskFullOpenUpdate;
    14f2:	86 e0       	ldi	r24, 0x06	; 6
    14f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
         break;
    14f8:	08 95       	ret
         // screen to input 100% open time is displayed
         break;

      case ModeDiagnosticInit:
         // display diagnostic screen
         diagnosticInit();
    14fa:	83 d2       	rcall	.+1286   	; 0x1a02 <diagnosticInit>
         screen = ModeDiagnosticUpdate;
    14fc:	88 e0       	ldi	r24, 0x08	; 8
    14fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
         break;
    1502:	08 95       	ret

      case ModeDiagnosticUpdate:
         // diagnostic screen is displayed
         diagnosticUpdate();
    1504:	95 d2       	rcall	.+1322   	; 0x1a30 <diagnosticUpdate>
         break;
    1506:	08 95       	ret

      default:
         screen = ModeProductTitle;
    1508:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <screen>
    150c:	08 95       	ret

0000150e <GetMotorDirection>:

static bool delayClose = false;

direction_type GetMotorDirection(void)
{
   return motorDirection;
    150e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
}
    1512:	08 95       	ret

00001514 <MotorOpenPercent>:

void MotorOpenPercent(uint8_t value)
{
    1514:	28 2f       	mov	r18, r24
   requestedOpenTime = ((int32_t)value * (int32_t)fullyOpen) / 100;
    1516:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <fullyOpen>
    151a:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <fullyOpen+0x1>
    151e:	07 2e       	mov	r0, r23
    1520:	00 0c       	add	r0, r0
    1522:	88 0b       	sbc	r24, r24
    1524:	99 0b       	sbc	r25, r25
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	d3 d3       	rcall	.+1958   	; 0x1cd4 <__mulsi3>
    152e:	24 e6       	ldi	r18, 0x64	; 100
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	3c d4       	rcall	.+2168   	; 0x1db0 <__divmodsi4>
    1538:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <requestedOpenTime+0x1>
    153c:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <requestedOpenTime>
    1540:	08 95       	ret

00001542 <MotorOpen>:
}
 
void MotorOpen(void)
{
   StartDown();
    1542:	71 d3       	rcall	.+1762   	; 0x1c26 <StartDown>
   requestedOpenTime = -1;
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	9f ef       	ldi	r25, 0xFF	; 255
    1548:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <requestedOpenTime+0x1>
    154c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <requestedOpenTime>
   motorDirection = DIRECTION_DOWN;
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <motorDirection>
    1556:	08 95       	ret

00001558 <MotorClose>:
}

void MotorClose(void)
{
   if (GetUpDownTime() > 0)
    1558:	78 d3       	rcall	.+1776   	; 0x1c4a <GetUpDownTime>
    155a:	89 2b       	or	r24, r25
    155c:	21 f0       	breq	.+8      	; 0x1566 <MotorClose+0xe>
   {
      StartUp();
    155e:	67 d3       	rcall	.+1742   	; 0x1c2e <StartUp>
      motorDirection = DIRECTION_UP;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <motorDirection>
   }
   requestedOpenTime = -1;
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	9f ef       	ldi	r25, 0xFF	; 255
    156a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <requestedOpenTime+0x1>
    156e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <requestedOpenTime>
    1572:	08 95       	ret

00001574 <MotorStop>:
}

void MotorStop(void)
{
   StopUpDown();
    1574:	60 d3       	rcall	.+1728   	; 0x1c36 <StopUpDown>
   requestedOpenTime = -1;
    1576:	8f ef       	ldi	r24, 0xFF	; 255
    1578:	9f ef       	ldi	r25, 0xFF	; 255
    157a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <requestedOpenTime+0x1>
    157e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <requestedOpenTime>
   motorDirection = DIRECTION_STOP;
    1582:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <motorDirection>
    1586:	08 95       	ret

00001588 <MotorProgress>:
}

uint8_t MotorProgress(void)
{
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
   uint8_t value = 0;
   if (fullyOpen)
    158c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <fullyOpen>
    1590:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <fullyOpen+0x1>
    1594:	89 2b       	or	r24, r25
    1596:	b1 f1       	breq	.+108    	; 0x1604 <MotorProgress+0x7c>
   {
      value = ((int32_t)100 * GetUpDownTime()) / fullyOpen;
    1598:	58 d3       	rcall	.+1712   	; 0x1c4a <GetUpDownTime>
    159a:	a0 e0       	ldi	r26, 0x00	; 0
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	aa 1f       	adc	r26, r26
    15a4:	bb 1f       	adc	r27, r27
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	aa 1f       	adc	r26, r26
    15ac:	bb 1f       	adc	r27, r27
    15ae:	ac 01       	movw	r20, r24
    15b0:	bd 01       	movw	r22, r26
    15b2:	44 0f       	add	r20, r20
    15b4:	55 1f       	adc	r21, r21
    15b6:	66 1f       	adc	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	44 0f       	add	r20, r20
    15bc:	55 1f       	adc	r21, r21
    15be:	66 1f       	adc	r22, r22
    15c0:	77 1f       	adc	r23, r23
    15c2:	84 0f       	add	r24, r20
    15c4:	95 1f       	adc	r25, r21
    15c6:	a6 1f       	adc	r26, r22
    15c8:	b7 1f       	adc	r27, r23
    15ca:	ac 01       	movw	r20, r24
    15cc:	bd 01       	movw	r22, r26
    15ce:	44 0f       	add	r20, r20
    15d0:	55 1f       	adc	r21, r21
    15d2:	66 1f       	adc	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	44 0f       	add	r20, r20
    15d8:	55 1f       	adc	r21, r21
    15da:	66 1f       	adc	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	8c 01       	movw	r16, r24
    15e0:	9d 01       	movw	r18, r26
    15e2:	04 0f       	add	r16, r20
    15e4:	15 1f       	adc	r17, r21
    15e6:	26 1f       	adc	r18, r22
    15e8:	37 1f       	adc	r19, r23
    15ea:	c9 01       	movw	r24, r18
    15ec:	b8 01       	movw	r22, r16
    15ee:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <fullyOpen>
    15f2:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <fullyOpen+0x1>
    15f6:	03 2e       	mov	r0, r19
    15f8:	00 0c       	add	r0, r0
    15fa:	44 0b       	sbc	r20, r20
    15fc:	55 0b       	sbc	r21, r21
    15fe:	d8 d3       	rcall	.+1968   	; 0x1db0 <__divmodsi4>
    1600:	82 2f       	mov	r24, r18
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <MotorProgress+0x7e>
   motorDirection = DIRECTION_STOP;
}

uint8_t MotorProgress(void)
{
   uint8_t value = 0;
    1604:	80 e0       	ldi	r24, 0x00	; 0
   if (fullyOpen)
   {
      value = ((int32_t)100 * GetUpDownTime()) / fullyOpen;
   }
   if (value > 100) value = 100;
   return value;
    1606:	85 36       	cpi	r24, 0x65	; 101
    1608:	08 f0       	brcs	.+2      	; 0x160c <MotorProgress+0x84>
    160a:	84 e6       	ldi	r24, 0x64	; 100
}
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <SetFullyOpen>:

void SetFullyOpen(void)
{
   fullyOpen = GetUpDownTime();
    1612:	1b d3       	rcall	.+1590   	; 0x1c4a <GetUpDownTime>
    1614:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <fullyOpen+0x1>
    1618:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <fullyOpen>
    161c:	08 95       	ret

0000161e <MotorSetup>:
}

void MotorSetup(void)
{
   // PA2; drive motor down, PA3: drive motor up
   PORTA &= ~((1 << PORTA2) | (1 << PORTA3)); // make sure outputs are low at startup
    161e:	8b b3       	in	r24, 0x1b	; 27
    1620:	83 7f       	andi	r24, 0xF3	; 243
    1622:	8b bb       	out	0x1b, r24	; 27
   DDRA |= (1 << DDA2) | (1 << DDA3);
    1624:	8a b3       	in	r24, 0x1a	; 26
    1626:	8c 60       	ori	r24, 0x0C	; 12
    1628:	8a bb       	out	0x1a, r24	; 26
    162a:	08 95       	ret

0000162c <SetMotorOutput>:
}

void SetMotorOutput(direction_type direction)
{
   switch (direction)
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	21 f0       	breq	.+8      	; 0x1638 <SetMotorOutput+0xc>
    1630:	48 f0       	brcs	.+18     	; 0x1644 <SetMotorOutput+0x18>
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	21 f0       	breq	.+8      	; 0x163e <SetMotorOutput+0x12>
    1636:	08 95       	ret
   {
      case DIRECTION_UP:
         PORTA &= ~(1 << PORTA2);
    1638:	da 98       	cbi	0x1b, 2	; 27
         PORTA |= (1 << PORTA3);
    163a:	db 9a       	sbi	0x1b, 3	; 27
         break;
    163c:	08 95       	ret

      case DIRECTION_DOWN:
         PORTA &= ~(1 << PORTA3);
    163e:	db 98       	cbi	0x1b, 3	; 27
         PORTA |= (1 << PORTA2);
    1640:	da 9a       	sbi	0x1b, 2	; 27
         break;
    1642:	08 95       	ret

      case DIRECTION_STOP:
         PORTA &= ~((1 << PORTA2) | (1 << PORTA3));
    1644:	8b b3       	in	r24, 0x1b	; 27
    1646:	83 7f       	andi	r24, 0xF3	; 243
    1648:	8b bb       	out	0x1b, r24	; 27
    164a:	08 95       	ret

0000164c <MotorDelayClose>:
   }
}

void MotorDelayClose(uint16_t delayTime)
{
   StartTime(delayTime);
    164c:	97 d2       	rcall	.+1326   	; 0x1b7c <StartTime>
   delayClose = true;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <delayClose>
    1654:	08 95       	ret

00001656 <MotorTask>:

      /* start automatic moving down */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime > 0) && (requestedOpenTime > GetUpDownTime()))
      {
         StartDown();
         motorDirection = DIRECTION_DOWN;
    1656:	02 e0       	ldi	r16, 0x02	; 2

      /* start automatic moving up */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime >= 0) && (requestedOpenTime < GetUpDownTime()))
      {
         StartUp();
         motorDirection = DIRECTION_UP;
    1658:	11 e0       	ldi	r17, 0x01	; 1

      /* stop automatic moving up */
      if ((motorDirection == DIRECTION_UP) && (requestedOpenTime >= 0) && (requestedOpenTime > GetUpDownTime()))
      {
         StopUpDown();
         requestedOpenTime = -1;
    165a:	cf ef       	ldi	r28, 0xFF	; 255
    165c:	df ef       	ldi	r29, 0xFF	; 255
void MotorTask(void)
{
   while (true)
   {
      /* manual moving up but already fully closed */
      if ((motorDirection == DIRECTION_UP) && (GetUpDownTime() == 0))
    165e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	49 f4       	brne	.+18     	; 0x1678 <MotorTask+0x22>
    1666:	f1 d2       	rcall	.+1506   	; 0x1c4a <GetUpDownTime>
    1668:	89 2b       	or	r24, r25
    166a:	31 f4       	brne	.+12     	; 0x1678 <MotorTask+0x22>
      {
         /* extra time to make sure fully closed */
         TaskSleep(500);
    166c:	84 ef       	ldi	r24, 0xF4	; 244
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	1b d7       	rcall	.+3638   	; 0x24a8 <__TEXT_REGION_LENGTH__+0x4a8>
         StopUpDown();
    1672:	e1 d2       	rcall	.+1474   	; 0x1c36 <StopUpDown>
         motorDirection = DIRECTION_STOP;
    1674:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <motorDirection>
      }

      /* start automatic moving down */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime > 0) && (requestedOpenTime > GetUpDownTime()))
    1678:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    167c:	81 11       	cpse	r24, r1
    167e:	12 c0       	rjmp	.+36     	; 0x16a4 <MotorTask+0x4e>
    1680:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <requestedOpenTime>
    1684:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    1688:	18 16       	cp	r1, r24
    168a:	19 06       	cpc	r1, r25
    168c:	5c f4       	brge	.+22     	; 0x16a4 <MotorTask+0x4e>
    168e:	dd d2       	rcall	.+1466   	; 0x1c4a <GetUpDownTime>
    1690:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <requestedOpenTime>
    1694:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    1698:	82 17       	cp	r24, r18
    169a:	93 07       	cpc	r25, r19
    169c:	18 f4       	brcc	.+6      	; 0x16a4 <MotorTask+0x4e>
      {
         StartDown();
    169e:	c3 d2       	rcall	.+1414   	; 0x1c26 <StartDown>
         motorDirection = DIRECTION_DOWN;
    16a0:	00 93 72 00 	sts	0x0072, r16	; 0x800072 <motorDirection>
      }

      /* start automatic moving up */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime >= 0) && (requestedOpenTime < GetUpDownTime()))
    16a4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    16a8:	81 11       	cpse	r24, r1
    16aa:	11 c0       	rjmp	.+34     	; 0x16ce <MotorTask+0x78>
    16ac:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <requestedOpenTime>
    16b0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    16b4:	99 23       	and	r25, r25
    16b6:	5c f0       	brlt	.+22     	; 0x16ce <MotorTask+0x78>
    16b8:	c8 d2       	rcall	.+1424   	; 0x1c4a <GetUpDownTime>
    16ba:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <requestedOpenTime>
    16be:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    16c2:	28 17       	cp	r18, r24
    16c4:	39 07       	cpc	r19, r25
    16c6:	18 f4       	brcc	.+6      	; 0x16ce <MotorTask+0x78>
      {
         StartUp();
    16c8:	b2 d2       	rcall	.+1380   	; 0x1c2e <StartUp>
         motorDirection = DIRECTION_UP;
    16ca:	10 93 72 00 	sts	0x0072, r17	; 0x800072 <motorDirection>
      }

      /* stop automatic moving down */
      if ((motorDirection == DIRECTION_DOWN) && (requestedOpenTime > 0) && (requestedOpenTime < GetUpDownTime()))
    16ce:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	c9 f4       	brne	.+50     	; 0x1708 <MotorTask+0xb2>
    16d6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <requestedOpenTime>
    16da:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    16de:	18 16       	cp	r1, r24
    16e0:	19 06       	cpc	r1, r25
    16e2:	94 f4       	brge	.+36     	; 0x1708 <MotorTask+0xb2>
    16e4:	b2 d2       	rcall	.+1380   	; 0x1c4a <GetUpDownTime>
    16e6:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <requestedOpenTime>
    16ea:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    16ee:	28 17       	cp	r18, r24
    16f0:	39 07       	cpc	r19, r25
    16f2:	50 f4       	brcc	.+20     	; 0x1708 <MotorTask+0xb2>
      {
         StopUpDown();
    16f4:	a0 d2       	rcall	.+1344   	; 0x1c36 <StopUpDown>
         requestedOpenTime = -1;
    16f6:	d0 93 71 00 	sts	0x0071, r29	; 0x800071 <requestedOpenTime+0x1>
    16fa:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <requestedOpenTime>
         motorDirection = DIRECTION_STOP;
    16fe:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <motorDirection>
      }

      /* stop automatic moving up */
      if ((motorDirection == DIRECTION_UP) && (requestedOpenTime >= 0) && (requestedOpenTime > GetUpDownTime()))
    1702:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    1706:	19 c0       	rjmp	.+50     	; 0x173a <MotorTask+0xe4>
    1708:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	a9 f4       	brne	.+42     	; 0x173a <MotorTask+0xe4>
    1710:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <requestedOpenTime>
    1714:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    1718:	99 23       	and	r25, r25
    171a:	7c f0       	brlt	.+30     	; 0x173a <MotorTask+0xe4>
    171c:	96 d2       	rcall	.+1324   	; 0x1c4a <GetUpDownTime>
    171e:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <requestedOpenTime>
    1722:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    1726:	82 17       	cp	r24, r18
    1728:	93 07       	cpc	r25, r19
    172a:	38 f4       	brcc	.+14     	; 0x173a <MotorTask+0xe4>
      {
         StopUpDown();
    172c:	84 d2       	rcall	.+1288   	; 0x1c36 <StopUpDown>
         requestedOpenTime = -1;
    172e:	d0 93 71 00 	sts	0x0071, r29	; 0x800071 <requestedOpenTime+0x1>
    1732:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <requestedOpenTime>
         motorDirection = DIRECTION_STOP;
    1736:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <motorDirection>
      }

      /* time delay has passed; close */
      if (delayClose && (GetTime() == 0))
    173a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <delayClose>
    173e:	88 23       	and	r24, r24
    1740:	31 f0       	breq	.+12     	; 0x174e <MotorTask+0xf8>
    1742:	62 d2       	rcall	.+1220   	; 0x1c08 <GetTime>
    1744:	89 2b       	or	r24, r25
    1746:	19 f4       	brne	.+6      	; 0x174e <MotorTask+0xf8>
      {
         delayClose = false;
    1748:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <delayClose>
         MotorClose();
    174c:	05 df       	rcall	.-502    	; 0x1558 <MotorClose>
      }
      TaskSleep(10);
    174e:	8a e0       	ldi	r24, 0x0A	; 10
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	aa d6       	rcall	.+3412   	; 0x24a8 <__TEXT_REGION_LENGTH__+0x4a8>
   }
    1754:	84 cf       	rjmp	.-248    	; 0x165e <MotorTask+0x8>

00001756 <ProgressPercent>:
   }
   return buffer;
}

static void ProgressPercent(void)
{
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	00 d0       	rcall	.+0      	; 0x175c <ProgressPercent+0x6>
    175c:	00 d0       	rcall	.+0      	; 0x175e <ProgressPercent+0x8>
    175e:	00 d0       	rcall	.+0      	; 0x1760 <ProgressPercent+0xa>
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    1764:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    1768:	4a e0       	ldi	r20, 0x0A	; 10
    176a:	be 01       	movw	r22, r28
    176c:	6f 5f       	subi	r22, 0xFF	; 255
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	3a d3       	rcall	.+1652   	; 0x1de8 <__utoa_ncheck>
}

static char *utoaRightAligned(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	81 11       	cpse	r24, r1
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <ProgressPercent+0x2e>
   {
      buffer[2] = 0;
      buffer[1] = buffer[0];
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    177e:	80 e2       	ldi	r24, 0x20	; 32
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	03 c0       	rjmp	.+6      	; 0x178a <ProgressPercent+0x34>

   }
   if (buffer[2] == 0)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	81 11       	cpse	r24, r1
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <ProgressPercent+0x42>
   {
      buffer[3] = 0;
    178a:	1c 82       	std	Y+4, r1	; 0x04
      buffer[2] = buffer[1];
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	8b 83       	std	Y+3, r24	; 0x03
      buffer[1] = buffer[0];
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    1794:	80 e2       	ldi	r24, 0x20	; 32
    1796:	89 83       	std	Y+1, r24	; 0x01

static void ProgressPercent(void)
{
   char buffer[6];

   WriteString(font6x10, 8, 26, utoaRightAligned(openPercent, buffer));
    1798:	9e 01       	movw	r18, r28
    179a:	2f 5f       	subi	r18, 0xFF	; 255
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	4a e1       	ldi	r20, 0x1A	; 26
    17a0:	68 e0       	ldi	r22, 0x08	; 8
    17a2:	84 e3       	ldi	r24, 0x34	; 52
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	44 d9       	rcall	.-3448   	; 0xa30 <WriteString>
   WriteString(font6x10, 50, 26, utoaRightAligned(MotorProgress(), buffer));
    17a8:	ef de       	rcall	.-546    	; 0x1588 <MotorProgress>
    17aa:	4a e0       	ldi	r20, 0x0A	; 10
    17ac:	be 01       	movw	r22, r28
    17ae:	6f 5f       	subi	r22, 0xFF	; 255
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	19 d3       	rcall	.+1586   	; 0x1de8 <__utoa_ncheck>
}

static char *utoaRightAligned(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	81 11       	cpse	r24, r1
    17ba:	05 c0       	rjmp	.+10     	; 0x17c6 <ProgressPercent+0x70>
   {
      buffer[2] = 0;
      buffer[1] = buffer[0];
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    17c0:	80 e2       	ldi	r24, 0x20	; 32
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <ProgressPercent+0x76>

   }
   if (buffer[2] == 0)
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	81 11       	cpse	r24, r1
    17ca:	07 c0       	rjmp	.+14     	; 0x17da <ProgressPercent+0x84>
   {
      buffer[3] = 0;
    17cc:	1c 82       	std	Y+4, r1	; 0x04
      buffer[2] = buffer[1];
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	8b 83       	std	Y+3, r24	; 0x03
      buffer[1] = buffer[0];
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    17d6:	80 e2       	ldi	r24, 0x20	; 32
    17d8:	89 83       	std	Y+1, r24	; 0x01
static void ProgressPercent(void)
{
   char buffer[6];

   WriteString(font6x10, 8, 26, utoaRightAligned(openPercent, buffer));
   WriteString(font6x10, 50, 26, utoaRightAligned(MotorProgress(), buffer));
    17da:	9e 01       	movw	r18, r28
    17dc:	2f 5f       	subi	r18, 0xFF	; 255
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	4a e1       	ldi	r20, 0x1A	; 26
    17e2:	62 e3       	ldi	r22, 0x32	; 50
    17e4:	84 e3       	ldi	r24, 0x34	; 52
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	23 d9       	rcall	.-3514   	; 0xa30 <WriteString>
}
    17ea:	26 96       	adiw	r28, 0x06	; 6
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <mainScreenInit>:

   }
}
void mainScreenInit(void)
{
   block = false;
    17fc:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <block>
   Clear();
    1800:	f7 d8       	rcall	.-3602   	; 0x9f0 <Clear>
uint8_t current;
bool block;

static void ProgressBarSetup(void)
{
   WriteStaticString(lines5x12, 2, 2, ProgressOutline);
    1802:	24 e5       	ldi	r18, 0x54	; 84
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	42 e0       	ldi	r20, 0x02	; 2
    1808:	62 e0       	ldi	r22, 0x02	; 2
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	f3 da       	rcall	.-2586   	; 0xdf6 <WriteStaticString>
   current = 0;
    1810:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <current>
void mainScreenInit(void)
{
   block = false;
   Clear();
   ProgressBarSetup();
   ProgressPercent();
    1814:	a0 df       	rcall	.-192    	; 0x1756 <ProgressPercent>
   WriteStaticString(font5x8, 13, 40, Up);
    1816:	26 e4       	ldi	r18, 0x46	; 70
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	48 e2       	ldi	r20, 0x28	; 40
    181c:	6d e0       	ldi	r22, 0x0D	; 13
    181e:	80 e3       	ldi	r24, 0x30	; 48
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	e9 da       	rcall	.-2606   	; 0xdf6 <WriteStaticString>
   WriteStaticString(font5x8, 50, 40, Down);
    1824:	2c e3       	ldi	r18, 0x3C	; 60
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	48 e2       	ldi	r20, 0x28	; 40
    182a:	62 e3       	ldi	r22, 0x32	; 50
    182c:	80 e3       	ldi	r24, 0x30	; 48
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	e2 da       	rcall	.-2620   	; 0xdf6 <WriteStaticString>
   WriteStaticString(font5x8, 10, 16, Set);
    1832:	28 e2       	ldi	r18, 0x28	; 40
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e1       	ldi	r20, 0x10	; 16
    1838:	6a e0       	ldi	r22, 0x0A	; 10
    183a:	80 e3       	ldi	r24, 0x30	; 48
    183c:	91 e0       	ldi	r25, 0x01	; 1
    183e:	db da       	rcall	.-2634   	; 0xdf6 <WriteStaticString>
   WriteStaticString(font5x8, 40, 16, Actual);
    1840:	22 e3       	ldi	r18, 0x32	; 50
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e1       	ldi	r20, 0x10	; 16
    1846:	68 e2       	ldi	r22, 0x28	; 40
    1848:	80 e3       	ldi	r24, 0x30	; 48
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	d4 da       	rcall	.-2648   	; 0xdf6 <WriteStaticString>
    184e:	08 95       	ret

00001850 <mainScreenKey>:
}

void mainScreenKey(enum PressedButtonState key)
{
   switch (key)
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	69 f1       	breq	.+90     	; 0x18ae <mainScreenKey+0x5e>
    1854:	28 f4       	brcc	.+10     	; 0x1860 <mainScreenKey+0x10>
    1856:	88 23       	and	r24, r24
    1858:	69 f0       	breq	.+26     	; 0x1874 <mainScreenKey+0x24>
    185a:	82 30       	cpi	r24, 0x02	; 2
    185c:	a9 f0       	breq	.+42     	; 0x1888 <mainScreenKey+0x38>
    185e:	08 95       	ret
    1860:	88 30       	cpi	r24, 0x08	; 8
    1862:	09 f4       	brne	.+2      	; 0x1866 <mainScreenKey+0x16>
    1864:	43 c0       	rjmp	.+134    	; 0x18ec <mainScreenKey+0x9c>
    1866:	89 30       	cpi	r24, 0x09	; 9
    1868:	09 f4       	brne	.+2      	; 0x186c <mainScreenKey+0x1c>
    186a:	43 c0       	rjmp	.+134    	; 0x18f2 <mainScreenKey+0xa2>
    186c:	85 30       	cpi	r24, 0x05	; 5
    186e:	09 f0       	breq	.+2      	; 0x1872 <mainScreenKey+0x22>
    1870:	43 c0       	rjmp	.+134    	; 0x18f8 <mainScreenKey+0xa8>
    1872:	29 c0       	rjmp	.+82     	; 0x18c6 <mainScreenKey+0x76>
   {
      case PressedButtonDown:
         if (GetMotorDirection() == DIRECTION_UP)
    1874:	4c de       	rcall	.-872    	; 0x150e <GetMotorDirection>
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	29 f4       	brne	.+10     	; 0x1884 <mainScreenKey+0x34>
         {
            MotorStop();
    187a:	7c de       	rcall	.-776    	; 0x1574 <MotorStop>
            block = true;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <block>
    1882:	08 95       	ret
         }
         else
         {
            MotorOpen();
    1884:	5e de       	rcall	.-836    	; 0x1542 <MotorOpen>
    1886:	08 95       	ret
         }
         break;

      case PressedButtonDownKey:
         if (block)
    1888:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <block>
    188c:	88 23       	and	r24, r24
    188e:	21 f0       	breq	.+8      	; 0x1898 <mainScreenKey+0x48>
         {
            MotorStop();
    1890:	71 de       	rcall	.-798    	; 0x1574 <MotorStop>
            block = false;
    1892:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <block>
    1896:	08 95       	ret
         }
         else
         {
            if (openPercent < 100) openPercent += 25;
    1898:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    189c:	84 36       	cpi	r24, 0x64	; 100
    189e:	18 f4       	brcc	.+6      	; 0x18a6 <mainScreenKey+0x56>
    18a0:	87 5e       	subi	r24, 0xE7	; 231
    18a2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <openPercent>
            MotorOpenPercent(openPercent);
    18a6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    18aa:	34 de       	rcall	.-920    	; 0x1514 <MotorOpenPercent>
    18ac:	08 95       	ret
         }
         break;

      case PressedButtonUp:
         if (GetMotorDirection() == DIRECTION_DOWN)
    18ae:	2f de       	rcall	.-930    	; 0x150e <GetMotorDirection>
    18b0:	82 30       	cpi	r24, 0x02	; 2
    18b2:	29 f4       	brne	.+10     	; 0x18be <mainScreenKey+0x6e>
         {
            MotorStop();
    18b4:	5f de       	rcall	.-834    	; 0x1574 <MotorStop>
            block = true;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <block>
    18bc:	08 95       	ret
         }
         else
         {
            openPercent = 0;
    18be:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <openPercent>
            MotorClose();
    18c2:	4a de       	rcall	.-876    	; 0x1558 <MotorClose>
    18c4:	08 95       	ret
         }
         break;

      case PressedButtonUpKey:
         if (block)
    18c6:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <block>
    18ca:	88 23       	and	r24, r24
    18cc:	21 f0       	breq	.+8      	; 0x18d6 <mainScreenKey+0x86>
         {
            MotorStop();
    18ce:	52 de       	rcall	.-860    	; 0x1574 <MotorStop>
            block = false;
    18d0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <block>
    18d4:	08 95       	ret
         }
         else
         {
            if (openPercent >= 25) openPercent -= 25;
    18d6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    18da:	89 31       	cpi	r24, 0x19	; 25
    18dc:	18 f0       	brcs	.+6      	; 0x18e4 <mainScreenKey+0x94>
    18de:	89 51       	subi	r24, 0x19	; 25
    18e0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <openPercent>
            MotorOpenPercent(openPercent);
    18e4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    18e8:	15 de       	rcall	.-982    	; 0x1514 <MotorOpenPercent>
    18ea:	08 95       	ret
         }
         break;

      case PressedButtonMenuKey:
         SetScreenMode(ModeAskClosingTimeInit);
    18ec:	83 e0       	ldi	r24, 0x03	; 3
    18ee:	c8 dd       	rcall	.-1136   	; 0x1480 <SetScreenMode>
         break;
    18f0:	08 95       	ret

      case PressedButtonNone:
         openPercent = 0;
    18f2:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <openPercent>
         MotorStop();
    18f6:	3e de       	rcall	.-900    	; 0x1574 <MotorStop>
    18f8:	08 95       	ret

000018fa <mainScreenUpdate>:
         break;
   }
}

void mainScreenUpdate(void)
{
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
   static uint8_t selection = 0;

   selection++;
    1900:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <selection.1851>
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <selection.1851>

   switch(selection % 20)
    190a:	64 e1       	ldi	r22, 0x14	; 20
    190c:	fc d1       	rcall	.+1016   	; 0x1d06 <__udivmodqi4>
    190e:	95 30       	cpi	r25, 0x05	; 5
    1910:	19 f0       	breq	.+6      	; 0x1918 <mainScreenUpdate+0x1e>
    1912:	9f 30       	cpi	r25, 0x0F	; 15
    1914:	19 f0       	breq	.+6      	; 0x191c <mainScreenUpdate+0x22>
    1916:	35 c0       	rjmp	.+106    	; 0x1982 <mainScreenUpdate+0x88>
   {
      case 5:
         ProgressPercent();
    1918:	1e df       	rcall	.-452    	; 0x1756 <ProgressPercent>
         break;
    191a:	6f c0       	rjmp	.+222    	; 0x19fa <mainScreenUpdate+0x100>
   WriteString(font6x10, 50, 26, utoaRightAligned(MotorProgress(), buffer));
}

static void InvertedWhenMoving(void)
{
   switch(GetMotorDirection())
    191c:	f8 dd       	rcall	.-1040   	; 0x150e <GetMotorDirection>
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	19 f0       	breq	.+6      	; 0x1928 <mainScreenUpdate+0x2e>
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	81 f0       	breq	.+32     	; 0x1946 <mainScreenUpdate+0x4c>
    1926:	1e c0       	rjmp	.+60     	; 0x1964 <mainScreenUpdate+0x6a>
   {
      case DIRECTION_UP:
         WriteInverted8PixelString(font5x8, 13, 40, Up);
    1928:	26 e4       	ldi	r18, 0x46	; 70
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	48 e2       	ldi	r20, 0x28	; 40
    192e:	6d e0       	ldi	r22, 0x0D	; 13
    1930:	80 e3       	ldi	r24, 0x30	; 48
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	43 dc       	rcall	.-1914   	; 0x11bc <WriteInverted8PixelString>
         WriteStaticString(font5x8, 50, 40, Down);
    1936:	2c e3       	ldi	r18, 0x3C	; 60
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	48 e2       	ldi	r20, 0x28	; 40
    193c:	62 e3       	ldi	r22, 0x32	; 50
    193e:	80 e3       	ldi	r24, 0x30	; 48
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	59 da       	rcall	.-2894   	; 0xdf6 <WriteStaticString>
    1944:	5a c0       	rjmp	.+180    	; 0x19fa <mainScreenUpdate+0x100>
         break;

      case DIRECTION_DOWN:
         WriteStaticString(font5x8, 13, 40, Up);
    1946:	26 e4       	ldi	r18, 0x46	; 70
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	48 e2       	ldi	r20, 0x28	; 40
    194c:	6d e0       	ldi	r22, 0x0D	; 13
    194e:	80 e3       	ldi	r24, 0x30	; 48
    1950:	91 e0       	ldi	r25, 0x01	; 1
    1952:	51 da       	rcall	.-2910   	; 0xdf6 <WriteStaticString>
         WriteInverted8PixelString(font5x8, 50, 40, Down);
    1954:	2c e3       	ldi	r18, 0x3C	; 60
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	48 e2       	ldi	r20, 0x28	; 40
    195a:	62 e3       	ldi	r22, 0x32	; 50
    195c:	80 e3       	ldi	r24, 0x30	; 48
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	2d dc       	rcall	.-1958   	; 0x11bc <WriteInverted8PixelString>
    1962:	4b c0       	rjmp	.+150    	; 0x19fa <mainScreenUpdate+0x100>
         break;

      case DIRECTION_STOP:
      default:
         WriteStaticString(font5x8, 13, 40, Up);
    1964:	26 e4       	ldi	r18, 0x46	; 70
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	48 e2       	ldi	r20, 0x28	; 40
    196a:	6d e0       	ldi	r22, 0x0D	; 13
    196c:	80 e3       	ldi	r24, 0x30	; 48
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	42 da       	rcall	.-2940   	; 0xdf6 <WriteStaticString>
         WriteStaticString(font5x8, 50, 40, Down);
    1972:	2c e3       	ldi	r18, 0x3C	; 60
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	48 e2       	ldi	r20, 0x28	; 40
    1978:	62 e3       	ldi	r22, 0x32	; 50
    197a:	80 e3       	ldi	r24, 0x30	; 48
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	3b da       	rcall	.-2954   	; 0xdf6 <WriteStaticString>
    1980:	3c c0       	rjmp	.+120    	; 0x19fa <mainScreenUpdate+0x100>
      case 15:
         InvertedWhenMoving();
         break;

      default:
         ProgressBar(MotorProgress());
    1982:	02 de       	rcall	.-1020   	; 0x1588 <MotorProgress>
   current = 0;
}

static void ProgressBar(uint8_t targetValue)
{
   targetValue = (uint16_t)targetValue * 77 / 100;
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9c 01       	movw	r18, r24
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	22 0f       	add	r18, r18
    198e:	33 1f       	adc	r19, r19
    1990:	28 0f       	add	r18, r24
    1992:	39 1f       	adc	r19, r25
    1994:	22 0f       	add	r18, r18
    1996:	33 1f       	adc	r19, r19
    1998:	82 0f       	add	r24, r18
    199a:	93 1f       	adc	r25, r19
    199c:	9c 01       	movw	r18, r24
    199e:	22 0f       	add	r18, r18
    19a0:	33 1f       	adc	r19, r19
    19a2:	22 0f       	add	r18, r18
    19a4:	33 1f       	adc	r19, r19
    19a6:	22 0f       	add	r18, r18
    19a8:	33 1f       	adc	r19, r19
    19aa:	a9 01       	movw	r20, r18
    19ac:	48 1b       	sub	r20, r24
    19ae:	59 0b       	sbc	r21, r25
    19b0:	ca 01       	movw	r24, r20
    19b2:	64 e6       	ldi	r22, 0x64	; 100
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	b3 d1       	rcall	.+870    	; 0x1d1e <__udivmodhi4>
    19b8:	16 2f       	mov	r17, r22
    19ba:	d6 2f       	mov	r29, r22
   if (targetValue >= current)
    19bc:	c0 91 80 01 	lds	r28, 0x0180	; 0x800180 <current>
    19c0:	6c 17       	cp	r22, r28
    19c2:	70 f0       	brcs	.+28     	; 0x19e0 <mainScreenUpdate+0xe6>
   {
      for (uint8_t i = current; i < targetValue; ++i)
    19c4:	c6 17       	cp	r28, r22
    19c6:	b8 f4       	brcc	.+46     	; 0x19f6 <mainScreenUpdate+0xfc>
      {
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineSolid);
    19c8:	63 e0       	ldi	r22, 0x03	; 3
    19ca:	6c 0f       	add	r22, r28
    19cc:	22 e5       	ldi	r18, 0x52	; 82
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	42 e0       	ldi	r20, 0x02	; 2
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	0f da       	rcall	.-3042   	; 0xdf6 <WriteStaticString>
static void ProgressBar(uint8_t targetValue)
{
   targetValue = (uint16_t)targetValue * 77 / 100;
   if (targetValue >= current)
   {
      for (uint8_t i = current; i < targetValue; ++i)
    19d8:	cf 5f       	subi	r28, 0xFF	; 255
    19da:	cd 17       	cp	r28, r29
    19dc:	a8 f3       	brcs	.-22     	; 0x19c8 <mainScreenUpdate+0xce>
    19de:	0b c0       	rjmp	.+22     	; 0x19f6 <mainScreenUpdate+0xfc>
   }
   else if (targetValue < current)
   {
      for (uint8_t i = current; i > targetValue; --i)
      {
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineBlank);
    19e0:	63 e0       	ldi	r22, 0x03	; 3
    19e2:	6c 0f       	add	r22, r28
    19e4:	20 e5       	ldi	r18, 0x50	; 80
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	42 e0       	ldi	r20, 0x02	; 2
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	03 da       	rcall	.-3066   	; 0xdf6 <WriteStaticString>
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineSolid);
      }
   }
   else if (targetValue < current)
   {
      for (uint8_t i = current; i > targetValue; --i)
    19f0:	c1 50       	subi	r28, 0x01	; 1
    19f2:	dc 17       	cp	r29, r28
    19f4:	a8 f3       	brcs	.-22     	; 0x19e0 <mainScreenUpdate+0xe6>
      {
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineBlank);
      }
   }

   current = targetValue;
    19f6:	10 93 80 01 	sts	0x0180, r17	; 0x800180 <current>

      default:
         ProgressBar(MotorProgress());
         break;
   };
}
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	08 95       	ret

00001a02 <diagnosticInit>:
static char EEMEM Menu2[9]    = "Menu 2";
static char EEMEM None[9]     = "        ";

void diagnosticInit(void)
{
   Clear();
    1a02:	f6 d7       	rcall	.+4076   	; 0x29f0 <__TEXT_REGION_LENGTH__+0x9f0>
   WriteStaticString(font5x8, 0, 0, Button);
    1a04:	28 e6       	ldi	r18, 0x68	; 104
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	80 e3       	ldi	r24, 0x30	; 48
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	f2 d9       	rcall	.-3100   	; 0xdf6 <WriteStaticString>
   WriteStaticString(font5x8, 0, 8, Voltage);
    1a12:	2c e7       	ldi	r18, 0x7C	; 124
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	48 e0       	ldi	r20, 0x08	; 8
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	80 e3       	ldi	r24, 0x30	; 48
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	eb d9       	rcall	.-3114   	; 0xdf6 <WriteStaticString>
   WriteStaticString(font5x8, 0, 16, Samples);
    1a20:	22 e7       	ldi	r18, 0x72	; 114
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e1       	ldi	r20, 0x10	; 16
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	80 e3       	ldi	r24, 0x30	; 48
    1a2a:	91 e0       	ldi	r25, 0x01	; 1
    1a2c:	e4 d9       	rcall	.-3128   	; 0xdf6 <WriteStaticString>
    1a2e:	08 95       	ret

00001a30 <diagnosticUpdate>:
}

void diagnosticUpdate(void)
{
    1a30:	08 95       	ret

00001a32 <closingTimeInit>:
   WriteString(font6x10, 28, 20, utoa2Digits(GetTime() % 60, buffer));
}

void closingTimeInit(void)
{
   Clear();
    1a32:	de d7       	rcall	.+4028   	; 0x29f0 <__TEXT_REGION_LENGTH__+0x9f0>
   WriteStaticString(font5x8, 0, 0, WaitTitle1);
    1a34:	2e e9       	ldi	r18, 0x9E	; 158
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	80 e3       	ldi	r24, 0x30	; 48
    1a3e:	91 e0       	ldi	r25, 0x01	; 1
    1a40:	da d9       	rcall	.-3148   	; 0xdf6 <WriteStaticString>
   WriteStaticString(font5x8, 0, 8, WaitTitle2);
    1a42:	2a e8       	ldi	r18, 0x8A	; 138
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	48 e0       	ldi	r20, 0x08	; 8
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	80 e3       	ldi	r24, 0x30	; 48
    1a4c:	91 e0       	ldi	r25, 0x01	; 1
    1a4e:	d3 d9       	rcall	.-3162   	; 0xdf6 <WriteStaticString>
   WriteStaticString(font6x10, 23, 20, Semicolon);
    1a50:	28 e8       	ldi	r18, 0x88	; 136
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	44 e1       	ldi	r20, 0x14	; 20
    1a56:	67 e1       	ldi	r22, 0x17	; 23
    1a58:	84 e3       	ldi	r24, 0x34	; 52
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	cc d9       	rcall	.-3176   	; 0xdf6 <WriteStaticString>
   WriteStaticString(font5x8, 46, 23, Hour);
    1a5e:	26 e8       	ldi	r18, 0x86	; 134
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	47 e1       	ldi	r20, 0x17	; 23
    1a64:	6e e2       	ldi	r22, 0x2E	; 46
    1a66:	80 e3       	ldi	r24, 0x30	; 48
    1a68:	91 e0       	ldi	r25, 0x01	; 1
    1a6a:	c5 d9       	rcall	.-3190   	; 0xdf6 <WriteStaticString>
    1a6c:	08 95       	ret

00001a6e <ClosingTimeKey>:
}

void ClosingTimeKey(enum PressedButtonState key)
{
   switch (key)
    1a6e:	85 30       	cpi	r24, 0x05	; 5
    1a70:	19 f1       	breq	.+70     	; 0x1ab8 <ClosingTimeKey+0x4a>
    1a72:	18 f4       	brcc	.+6      	; 0x1a7a <ClosingTimeKey+0xc>
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	31 f0       	breq	.+12     	; 0x1a84 <ClosingTimeKey+0x16>
    1a78:	08 95       	ret
    1a7a:	88 30       	cpi	r24, 0x08	; 8
    1a7c:	a1 f1       	breq	.+104    	; 0x1ae6 <ClosingTimeKey+0x78>
    1a7e:	89 30       	cpi	r24, 0x09	; 9
    1a80:	a9 f1       	breq	.+106    	; 0x1aec <ClosingTimeKey+0x7e>
    1a82:	08 95       	ret
   {
      case PressedButtonDownKey:
         if (delayTime < 720 - 30)
    1a84:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <delayTime>
    1a88:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <delayTime+0x1>
    1a8c:	82 3b       	cpi	r24, 0xB2	; 178
    1a8e:	22 e0       	ldi	r18, 0x02	; 2
    1a90:	92 07       	cpc	r25, r18
    1a92:	30 f4       	brcc	.+12     	; 0x1aa0 <ClosingTimeKey+0x32>
         {
            delayTime += 30;
    1a94:	4e 96       	adiw	r24, 0x1e	; 30
    1a96:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <delayTime+0x1>
    1a9a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <delayTime>
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <ClosingTimeKey+0x3e>
         }
         else
         {
            delayTime = 720;
    1aa0:	80 ed       	ldi	r24, 0xD0	; 208
    1aa2:	92 e0       	ldi	r25, 0x02	; 2
    1aa4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <delayTime+0x1>
    1aa8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <delayTime>
         }
         MotorDelayClose(delayTime);
    1aac:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <delayTime>
    1ab0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <delayTime+0x1>
    1ab4:	cb dd       	rcall	.-1130   	; 0x164c <MotorDelayClose>
         break;
    1ab6:	08 95       	ret

      case PressedButtonUpKey:
         if (delayTime > 30)
    1ab8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <delayTime>
    1abc:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <delayTime+0x1>
    1ac0:	8f 31       	cpi	r24, 0x1F	; 31
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	30 f0       	brcs	.+12     	; 0x1ad2 <ClosingTimeKey+0x64>
         {
            delayTime -= 30;
    1ac6:	4e 97       	sbiw	r24, 0x1e	; 30
    1ac8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <delayTime+0x1>
    1acc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <delayTime>
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <ClosingTimeKey+0x6c>
         }
         else
         {
            delayTime = 0;
    1ad2:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <delayTime+0x1>
    1ad6:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <delayTime>
         }
         MotorDelayClose(delayTime);
    1ada:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <delayTime>
    1ade:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <delayTime+0x1>
    1ae2:	b4 dd       	rcall	.-1176   	; 0x164c <MotorDelayClose>
         break;
    1ae4:	08 95       	ret

      case PressedButtonMenuKey:
         SetScreenMode(ModeMainScreenInit);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	cb dc       	rcall	.-1642   	; 0x1480 <SetScreenMode>
         break;
    1aea:	08 95       	ret

      case PressedButtonNone:
         step = 0;
    1aec:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <step>
    1af0:	08 95       	ret

00001af2 <closingTimeUpdate>:
         break;
   }
}

void closingTimeUpdate(void)
{
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <closingTimeUpdate+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <closingTimeUpdate+0x8>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <closingTimeUpdate+0xa>
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62

static void updateTime(void)
{
   char buffer[6];

   WriteString(font6x10, 5, 20, utoa2Digits(GetTime() / 60, buffer));
    1b00:	83 d0       	rcall	.+262    	; 0x1c08 <GetTime>
    1b02:	6c e3       	ldi	r22, 0x3C	; 60
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	1f d1       	rcall	.+574    	; 0x1d46 <__divmodhi4>
    1b08:	86 2f       	mov	r24, r22
    1b0a:	4a e0       	ldi	r20, 0x0A	; 10
    1b0c:	be 01       	movw	r22, r28
    1b0e:	6f 5f       	subi	r22, 0xFF	; 255
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	69 d1       	rcall	.+722    	; 0x1de8 <__utoa_ncheck>
static char EEMEM Hour[2]   = "h";

static char *utoa2Digits(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	81 11       	cpse	r24, r1
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <closingTimeUpdate+0x34>
   {
      buffer[1] = buffer[0];
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = '0';
    1b20:	80 e3       	ldi	r24, 0x30	; 48
    1b22:	89 83       	std	Y+1, r24	; 0x01
      buffer[2] = 0;
    1b24:	1b 82       	std	Y+3, r1	; 0x03

static void updateTime(void)
{
   char buffer[6];

   WriteString(font6x10, 5, 20, utoa2Digits(GetTime() / 60, buffer));
    1b26:	9e 01       	movw	r18, r28
    1b28:	2f 5f       	subi	r18, 0xFF	; 255
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	44 e1       	ldi	r20, 0x14	; 20
    1b2e:	65 e0       	ldi	r22, 0x05	; 5
    1b30:	84 e3       	ldi	r24, 0x34	; 52
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	7d d7       	rcall	.+3834   	; 0x2a30 <__TEXT_REGION_LENGTH__+0xa30>
   WriteString(font6x10, 28, 20, utoa2Digits(GetTime() % 60, buffer));
    1b36:	68 d0       	rcall	.+208    	; 0x1c08 <GetTime>
    1b38:	6c e3       	ldi	r22, 0x3C	; 60
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	04 d1       	rcall	.+520    	; 0x1d46 <__divmodhi4>
    1b3e:	4a e0       	ldi	r20, 0x0A	; 10
    1b40:	be 01       	movw	r22, r28
    1b42:	6f 5f       	subi	r22, 0xFF	; 255
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	4f d1       	rcall	.+670    	; 0x1de8 <__utoa_ncheck>
static char EEMEM Hour[2]   = "h";

static char *utoa2Digits(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	81 11       	cpse	r24, r1
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <closingTimeUpdate+0x68>
   {
      buffer[1] = buffer[0];
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = '0';
    1b54:	80 e3       	ldi	r24, 0x30	; 48
    1b56:	89 83       	std	Y+1, r24	; 0x01
      buffer[2] = 0;
    1b58:	1b 82       	std	Y+3, r1	; 0x03
static void updateTime(void)
{
   char buffer[6];

   WriteString(font6x10, 5, 20, utoa2Digits(GetTime() / 60, buffer));
   WriteString(font6x10, 28, 20, utoa2Digits(GetTime() % 60, buffer));
    1b5a:	9e 01       	movw	r18, r28
    1b5c:	2f 5f       	subi	r18, 0xFF	; 255
    1b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b60:	44 e1       	ldi	r20, 0x14	; 20
    1b62:	6c e1       	ldi	r22, 0x1C	; 28
    1b64:	84 e3       	ldi	r24, 0x34	; 52
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	63 d7       	rcall	.+3782   	; 0x2a30 <__TEXT_REGION_LENGTH__+0xa30>
}

void closingTimeUpdate(void)
{
   updateTime();
}
    1b6a:	26 96       	adiw	r28, 0x06	; 6
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	08 95       	ret

00001b7c <StartTime>:
static volatile uint16_t upDownCounter = 0;
static volatile int8_t step = 0;

void StartTime(uint16_t waitTime)
{
   timeCounter = (uint32_t)waitTime * 50 * 60;
    1b7c:	ac 01       	movw	r20, r24
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	db 01       	movw	r26, r22
    1b84:	ca 01       	movw	r24, r20
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	aa 1f       	adc	r26, r26
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	84 0f       	add	r24, r20
    1b90:	95 1f       	adc	r25, r21
    1b92:	a6 1f       	adc	r26, r22
    1b94:	b7 1f       	adc	r27, r23
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	aa 1f       	adc	r26, r26
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	aa 1f       	adc	r26, r26
    1ba4:	bb 1f       	adc	r27, r27
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	aa 1f       	adc	r26, r26
    1bac:	bb 1f       	adc	r27, r27
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	aa 1f       	adc	r26, r26
    1bb4:	bb 1f       	adc	r27, r27
    1bb6:	84 1b       	sub	r24, r20
    1bb8:	95 0b       	sbc	r25, r21
    1bba:	a6 0b       	sbc	r26, r22
    1bbc:	b7 0b       	sbc	r27, r23
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	aa 1f       	adc	r26, r26
    1bc4:	bb 1f       	adc	r27, r27
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	aa 1f       	adc	r26, r26
    1bcc:	bb 1f       	adc	r27, r27
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	aa 1f       	adc	r26, r26
    1bd4:	bb 1f       	adc	r27, r27
    1bd6:	84 1b       	sub	r24, r20
    1bd8:	95 0b       	sbc	r25, r21
    1bda:	a6 0b       	sbc	r26, r22
    1bdc:	b7 0b       	sbc	r27, r23
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	aa 1f       	adc	r26, r26
    1be4:	bb 1f       	adc	r27, r27
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	aa 1f       	adc	r26, r26
    1bec:	bb 1f       	adc	r27, r27
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	aa 1f       	adc	r26, r26
    1bf4:	bb 1f       	adc	r27, r27
    1bf6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <timeCounter>
    1bfa:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <timeCounter+0x1>
    1bfe:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <timeCounter+0x2>
    1c02:	b0 93 7e 00 	sts	0x007E, r27	; 0x80007e <timeCounter+0x3>
    1c06:	08 95       	ret

00001c08 <GetTime>:
}

uint16_t GetTime(void)
{
   /* minutes resolution */
   return timeCounter / 50 / 60;
    1c08:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <timeCounter>
    1c0c:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <timeCounter+0x1>
    1c10:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <timeCounter+0x2>
    1c14:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <timeCounter+0x3>
    1c18:	28 eb       	ldi	r18, 0xB8	; 184
    1c1a:	3b e0       	ldi	r19, 0x0B	; 11
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	a5 d0       	rcall	.+330    	; 0x1d6c <__udivmodsi4>
}
    1c22:	c9 01       	movw	r24, r18
    1c24:	08 95       	ret

00001c26 <StartDown>:

void StartDown(void)
{
   step = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <step>
    1c2c:	08 95       	ret

00001c2e <StartUp>:
}

void StartUp(void)
{
   step = -1;
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <step>
    1c34:	08 95       	ret

00001c36 <StopUpDown>:
}

void StopUpDown(void)
{
   step = 0;
    1c36:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <step>
    1c3a:	08 95       	ret

00001c3c <ResetUpDown>:
}

void ResetUpDown(void)
{
   step = 0;
    1c3c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <step>
   upDownCounter = 0;
    1c40:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <upDownCounter+0x1>
    1c44:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <upDownCounter>
    1c48:	08 95       	ret

00001c4a <GetUpDownTime>:
}

uint16_t GetUpDownTime(void)
{
   /* 100ms resolution */
   return upDownCounter / 5;
    1c4a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <upDownCounter>
    1c4e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <upDownCounter+0x1>
    1c52:	65 e0       	ldi	r22, 0x05	; 5
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	63 d0       	rcall	.+198    	; 0x1d1e <__udivmodhi4>
    1c58:	cb 01       	movw	r24, r22
}
    1c5a:	08 95       	ret

00001c5c <HandleClock>:

void HandleClock(void)
{
   upDownCounter += step;
    1c5c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <step>
    1c60:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <upDownCounter>
    1c64:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <upDownCounter+0x1>
    1c68:	82 0f       	add	r24, r18
    1c6a:	91 1d       	adc	r25, r1
    1c6c:	27 fd       	sbrc	r18, 7
    1c6e:	9a 95       	dec	r25
    1c70:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <upDownCounter+0x1>
    1c74:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <upDownCounter>
   if ((upDownCounter == 0) || (upDownCounter == 0xFFFF)) step = 0;
    1c78:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <upDownCounter>
    1c7c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <upDownCounter+0x1>
    1c80:	89 2b       	or	r24, r25
    1c82:	31 f0       	breq	.+12     	; 0x1c90 <HandleClock+0x34>
    1c84:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <upDownCounter>
    1c88:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <upDownCounter+0x1>
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	11 f4       	brne	.+4      	; 0x1c94 <HandleClock+0x38>
    1c90:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <step>
   if (timeCounter > 0) timeCounter--;
    1c94:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <timeCounter>
    1c98:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <timeCounter+0x1>
    1c9c:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <timeCounter+0x2>
    1ca0:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <timeCounter+0x3>
    1ca4:	89 2b       	or	r24, r25
    1ca6:	8a 2b       	or	r24, r26
    1ca8:	8b 2b       	or	r24, r27
    1caa:	99 f0       	breq	.+38     	; 0x1cd2 <HandleClock+0x76>
    1cac:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <timeCounter>
    1cb0:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <timeCounter+0x1>
    1cb4:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <timeCounter+0x2>
    1cb8:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <timeCounter+0x3>
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	a1 09       	sbc	r26, r1
    1cc0:	b1 09       	sbc	r27, r1
    1cc2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <timeCounter>
    1cc6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <timeCounter+0x1>
    1cca:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <timeCounter+0x2>
    1cce:	b0 93 7e 00 	sts	0x007E, r27	; 0x80007e <timeCounter+0x3>
    1cd2:	08 95       	ret

00001cd4 <__mulsi3>:
    1cd4:	ee 27       	eor	r30, r30
    1cd6:	ff 27       	eor	r31, r31

00001cd8 <__mulsi3_helper>:
    1cd8:	aa 27       	eor	r26, r26
    1cda:	bb 27       	eor	r27, r27
    1cdc:	08 c0       	rjmp	.+16     	; 0x1cee <__mulsi3_helper+0x16>
    1cde:	a2 0f       	add	r26, r18
    1ce0:	b3 1f       	adc	r27, r19
    1ce2:	e4 1f       	adc	r30, r20
    1ce4:	f5 1f       	adc	r31, r21
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	44 1f       	adc	r20, r20
    1cec:	55 1f       	adc	r21, r21
    1cee:	96 95       	lsr	r25
    1cf0:	87 95       	ror	r24
    1cf2:	77 95       	ror	r23
    1cf4:	67 95       	ror	r22
    1cf6:	98 f3       	brcs	.-26     	; 0x1cde <__mulsi3_helper+0x6>
    1cf8:	70 40       	sbci	r23, 0x00	; 0
    1cfa:	a9 f7       	brne	.-22     	; 0x1ce6 <__mulsi3_helper+0xe>
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	99 f7       	brne	.-26     	; 0x1ce6 <__mulsi3_helper+0xe>
    1d00:	bd 01       	movw	r22, r26
    1d02:	cf 01       	movw	r24, r30
    1d04:	08 95       	ret

00001d06 <__udivmodqi4>:
    1d06:	99 1b       	sub	r25, r25
    1d08:	79 e0       	ldi	r23, 0x09	; 9
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <__udivmodqi4_ep>

00001d0c <__udivmodqi4_loop>:
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	96 17       	cp	r25, r22
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <__udivmodqi4_ep>
    1d12:	96 1b       	sub	r25, r22

00001d14 <__udivmodqi4_ep>:
    1d14:	88 1f       	adc	r24, r24
    1d16:	7a 95       	dec	r23
    1d18:	c9 f7       	brne	.-14     	; 0x1d0c <__udivmodqi4_loop>
    1d1a:	80 95       	com	r24
    1d1c:	08 95       	ret

00001d1e <__udivmodhi4>:
    1d1e:	aa 1b       	sub	r26, r26
    1d20:	bb 1b       	sub	r27, r27
    1d22:	51 e1       	ldi	r21, 0x11	; 17
    1d24:	07 c0       	rjmp	.+14     	; 0x1d34 <__udivmodhi4_ep>

00001d26 <__udivmodhi4_loop>:
    1d26:	aa 1f       	adc	r26, r26
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	a6 17       	cp	r26, r22
    1d2c:	b7 07       	cpc	r27, r23
    1d2e:	10 f0       	brcs	.+4      	; 0x1d34 <__udivmodhi4_ep>
    1d30:	a6 1b       	sub	r26, r22
    1d32:	b7 0b       	sbc	r27, r23

00001d34 <__udivmodhi4_ep>:
    1d34:	88 1f       	adc	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	5a 95       	dec	r21
    1d3a:	a9 f7       	brne	.-22     	; 0x1d26 <__udivmodhi4_loop>
    1d3c:	80 95       	com	r24
    1d3e:	90 95       	com	r25
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	08 95       	ret

00001d46 <__divmodhi4>:
    1d46:	97 fb       	bst	r25, 7
    1d48:	07 2e       	mov	r0, r23
    1d4a:	16 f4       	brtc	.+4      	; 0x1d50 <__divmodhi4+0xa>
    1d4c:	00 94       	com	r0
    1d4e:	06 d0       	rcall	.+12     	; 0x1d5c <__divmodhi4_neg1>
    1d50:	77 fd       	sbrc	r23, 7
    1d52:	08 d0       	rcall	.+16     	; 0x1d64 <__divmodhi4_neg2>
    1d54:	e4 df       	rcall	.-56     	; 0x1d1e <__udivmodhi4>
    1d56:	07 fc       	sbrc	r0, 7
    1d58:	05 d0       	rcall	.+10     	; 0x1d64 <__divmodhi4_neg2>
    1d5a:	3e f4       	brtc	.+14     	; 0x1d6a <__divmodhi4_exit>

00001d5c <__divmodhi4_neg1>:
    1d5c:	90 95       	com	r25
    1d5e:	81 95       	neg	r24
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	08 95       	ret

00001d64 <__divmodhi4_neg2>:
    1d64:	70 95       	com	r23
    1d66:	61 95       	neg	r22
    1d68:	7f 4f       	sbci	r23, 0xFF	; 255

00001d6a <__divmodhi4_exit>:
    1d6a:	08 95       	ret

00001d6c <__udivmodsi4>:
    1d6c:	a1 e2       	ldi	r26, 0x21	; 33
    1d6e:	1a 2e       	mov	r1, r26
    1d70:	aa 1b       	sub	r26, r26
    1d72:	bb 1b       	sub	r27, r27
    1d74:	fd 01       	movw	r30, r26
    1d76:	0d c0       	rjmp	.+26     	; 0x1d92 <__udivmodsi4_ep>

00001d78 <__udivmodsi4_loop>:
    1d78:	aa 1f       	adc	r26, r26
    1d7a:	bb 1f       	adc	r27, r27
    1d7c:	ee 1f       	adc	r30, r30
    1d7e:	ff 1f       	adc	r31, r31
    1d80:	a2 17       	cp	r26, r18
    1d82:	b3 07       	cpc	r27, r19
    1d84:	e4 07       	cpc	r30, r20
    1d86:	f5 07       	cpc	r31, r21
    1d88:	20 f0       	brcs	.+8      	; 0x1d92 <__udivmodsi4_ep>
    1d8a:	a2 1b       	sub	r26, r18
    1d8c:	b3 0b       	sbc	r27, r19
    1d8e:	e4 0b       	sbc	r30, r20
    1d90:	f5 0b       	sbc	r31, r21

00001d92 <__udivmodsi4_ep>:
    1d92:	66 1f       	adc	r22, r22
    1d94:	77 1f       	adc	r23, r23
    1d96:	88 1f       	adc	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	1a 94       	dec	r1
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <__udivmodsi4_loop>
    1d9e:	60 95       	com	r22
    1da0:	70 95       	com	r23
    1da2:	80 95       	com	r24
    1da4:	90 95       	com	r25
    1da6:	9b 01       	movw	r18, r22
    1da8:	ac 01       	movw	r20, r24
    1daa:	bd 01       	movw	r22, r26
    1dac:	cf 01       	movw	r24, r30
    1dae:	08 95       	ret

00001db0 <__divmodsi4>:
    1db0:	05 2e       	mov	r0, r21
    1db2:	97 fb       	bst	r25, 7
    1db4:	16 f4       	brtc	.+4      	; 0x1dba <__divmodsi4+0xa>
    1db6:	00 94       	com	r0
    1db8:	0f d0       	rcall	.+30     	; 0x1dd8 <__negsi2>
    1dba:	57 fd       	sbrc	r21, 7
    1dbc:	05 d0       	rcall	.+10     	; 0x1dc8 <__divmodsi4_neg2>
    1dbe:	d6 df       	rcall	.-84     	; 0x1d6c <__udivmodsi4>
    1dc0:	07 fc       	sbrc	r0, 7
    1dc2:	02 d0       	rcall	.+4      	; 0x1dc8 <__divmodsi4_neg2>
    1dc4:	46 f4       	brtc	.+16     	; 0x1dd6 <__divmodsi4_exit>
    1dc6:	08 c0       	rjmp	.+16     	; 0x1dd8 <__negsi2>

00001dc8 <__divmodsi4_neg2>:
    1dc8:	50 95       	com	r21
    1dca:	40 95       	com	r20
    1dcc:	30 95       	com	r19
    1dce:	21 95       	neg	r18
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	4f 4f       	sbci	r20, 0xFF	; 255
    1dd4:	5f 4f       	sbci	r21, 0xFF	; 255

00001dd6 <__divmodsi4_exit>:
    1dd6:	08 95       	ret

00001dd8 <__negsi2>:
    1dd8:	90 95       	com	r25
    1dda:	80 95       	com	r24
    1ddc:	70 95       	com	r23
    1dde:	61 95       	neg	r22
    1de0:	7f 4f       	sbci	r23, 0xFF	; 255
    1de2:	8f 4f       	sbci	r24, 0xFF	; 255
    1de4:	9f 4f       	sbci	r25, 0xFF	; 255
    1de6:	08 95       	ret

00001de8 <__utoa_ncheck>:
    1de8:	bb 27       	eor	r27, r27

00001dea <__utoa_common>:
    1dea:	fb 01       	movw	r30, r22
    1dec:	55 27       	eor	r21, r21
    1dee:	aa 27       	eor	r26, r26
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	aa 1f       	adc	r26, r26
    1df6:	a4 17       	cp	r26, r20
    1df8:	10 f0       	brcs	.+4      	; 0x1dfe <__utoa_common+0x14>
    1dfa:	a4 1b       	sub	r26, r20
    1dfc:	83 95       	inc	r24
    1dfe:	50 51       	subi	r21, 0x10	; 16
    1e00:	b9 f7       	brne	.-18     	; 0x1df0 <__utoa_common+0x6>
    1e02:	a0 5d       	subi	r26, 0xD0	; 208
    1e04:	aa 33       	cpi	r26, 0x3A	; 58
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <__utoa_common+0x20>
    1e08:	a9 5d       	subi	r26, 0xD9	; 217
    1e0a:	a1 93       	st	Z+, r26
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	79 f7       	brne	.-34     	; 0x1dee <__utoa_common+0x4>
    1e10:	b1 11       	cpse	r27, r1
    1e12:	b1 93       	st	Z+, r27
    1e14:	11 92       	st	Z+, r1
    1e16:	cb 01       	movw	r24, r22
    1e18:	00 c0       	rjmp	.+0      	; 0x1e1a <strrev>

00001e1a <strrev>:
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	67 2f       	mov	r22, r23
    1e20:	71 91       	ld	r23, Z+
    1e22:	77 23       	and	r23, r23
    1e24:	e1 f7       	brne	.-8      	; 0x1e1e <strrev+0x4>
    1e26:	32 97       	sbiw	r30, 0x02	; 2
    1e28:	04 c0       	rjmp	.+8      	; 0x1e32 <strrev+0x18>
    1e2a:	7c 91       	ld	r23, X
    1e2c:	6d 93       	st	X+, r22
    1e2e:	70 83       	st	Z, r23
    1e30:	62 91       	ld	r22, -Z
    1e32:	ae 17       	cp	r26, r30
    1e34:	bf 07       	cpc	r27, r31
    1e36:	c8 f3       	brcs	.-14     	; 0x1e2a <strrev+0x10>
    1e38:	08 95       	ret

00001e3a <eeprom_read_byte>:
    1e3a:	e1 99       	sbic	0x1c, 1	; 28
    1e3c:	fe cf       	rjmp	.-4      	; 0x1e3a <eeprom_read_byte>
    1e3e:	9f bb       	out	0x1f, r25	; 31
    1e40:	8e bb       	out	0x1e, r24	; 30
    1e42:	e0 9a       	sbi	0x1c, 0	; 28
    1e44:	99 27       	eor	r25, r25
    1e46:	8d b3       	in	r24, 0x1d	; 29
    1e48:	08 95       	ret

00001e4a <_exit>:
    1e4a:	f8 94       	cli

00001e4c <__stop_program>:
    1e4c:	ff cf       	rjmp	.-2      	; 0x1e4c <__stop_program>
