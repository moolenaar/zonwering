
build/zonwering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019e0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000019e0  00001a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000156  00800068  00800068  00001a9c  2**0
                  ALLOC
  3 .eeprom       0000010a  00810000  00810000  00001a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00006270  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000231b  00000000  00000000  00007e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000a133  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000a144  2**2
                  CONTENTS, READONLY
  8 .avr.prop     0000002c  00000000  00000000  0000a180  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000420  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003e8  00000000  00000000  0000a5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000001a  00000000  00000000  0000a9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000173  00000000  00000000  0000a9ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9d c1       	rjmp	.+826    	; 0x33c <__ctors_end>
       2:	b7 c1       	rjmp	.+878    	; 0x372 <__bad_interrupt>
       4:	b6 c1       	rjmp	.+876    	; 0x372 <__bad_interrupt>
       6:	b5 c1       	rjmp	.+874    	; 0x372 <__bad_interrupt>
       8:	b4 c1       	rjmp	.+872    	; 0x372 <__bad_interrupt>
       a:	b3 c1       	rjmp	.+870    	; 0x372 <__bad_interrupt>
       c:	b2 c1       	rjmp	.+868    	; 0x372 <__bad_interrupt>
       e:	b1 c1       	rjmp	.+866    	; 0x372 <__bad_interrupt>
      10:	b0 c1       	rjmp	.+864    	; 0x372 <__bad_interrupt>
      12:	63 c3       	rjmp	.+1734   	; 0x6da <__vector_9>
      14:	ae c1       	rjmp	.+860    	; 0x372 <__bad_interrupt>
      16:	ad c1       	rjmp	.+858    	; 0x372 <__bad_interrupt>
      18:	ac c1       	rjmp	.+856    	; 0x372 <__bad_interrupt>
      1a:	2b c4       	rjmp	.+2134   	; 0x872 <__vector_13>
      1c:	aa c1       	rjmp	.+852    	; 0x372 <__bad_interrupt>
      1e:	a9 c1       	rjmp	.+850    	; 0x372 <__bad_interrupt>
      20:	a8 c1       	rjmp	.+848    	; 0x372 <__bad_interrupt>
      22:	8f c7       	rjmp	.+3870   	; 0xf42 <HandleDisplay+0x16>
      24:	a9 c7       	rjmp	.+3922   	; 0xf78 <HandleDisplay+0x4c>
      26:	ae c7       	rjmp	.+3932   	; 0xf84 <HandleDisplay+0x58>
      28:	ae c7       	rjmp	.+3932   	; 0xf86 <HandleDisplay+0x5a>
      2a:	b3 c7       	rjmp	.+3942   	; 0xf92 <HandleDisplay+0x66>
      2c:	b3 c7       	rjmp	.+3942   	; 0xf94 <HandleDisplay+0x68>
      2e:	bb c7       	rjmp	.+3958   	; 0xfa6 <HandleDisplay+0x7a>
      30:	56 c9       	rjmp	.-3412   	; 0xfffff2de <__eeprom_end+0xff7ef1d4>
      32:	87 c9       	rjmp	.-3314   	; 0xfffff342 <__eeprom_end+0xff7ef238>
      34:	5d c9       	rjmp	.-3398   	; 0xfffff2f0 <__eeprom_end+0xff7ef1e6>
      36:	6a c9       	rjmp	.-3372   	; 0xfffff30c <__eeprom_end+0xff7ef202>
      38:	84 c9       	rjmp	.-3320   	; 0xfffff342 <__eeprom_end+0xff7ef238>
      3a:	6e c9       	rjmp	.-3364   	; 0xfffff318 <__eeprom_end+0xff7ef20e>
      3c:	82 c9       	rjmp	.-3324   	; 0xfffff342 <__eeprom_end+0xff7ef238>
      3e:	7c c9       	rjmp	.-3336   	; 0xfffff338 <__eeprom_end+0xff7ef22e>
      40:	79 c9       	rjmp	.-3342   	; 0xfffff334 <__eeprom_end+0xff7ef22a>
      42:	7c c9       	rjmp	.-3336   	; 0xfffff33c <__eeprom_end+0xff7ef232>

00000044 <__trampolines_end>:
      44:	0c 0a       	sbc	r0, r28
      46:	20 0c       	add	r2, r0
	...
      54:	2e 08       	sbc	r2, r14
      56:	80 01       	movw	r16, r0
      58:	80 01       	movw	r16, r0
      5a:	00 00       	nop
      5c:	00 00       	nop
      5e:	30 10       	cpse	r3, r0
      60:	fc 00       	.word	0x00fc	; ????
      62:	02 01       	movw	r0, r4
      64:	01 02       	muls	r16, r17
      66:	01 02       	muls	r16, r17
      68:	02 01       	movw	r0, r4
      6a:	fc 00       	.word	0x00fc	; ????
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	31 0e       	add	r3, r17
      72:	00 00       	nop
      74:	04 00       	.word	0x0004	; ????
      76:	02 00       	.word	0x0002	; ????
      78:	ff 03       	fmulsu	r23, r23
      7a:	00 00       	nop
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	32 10       	cpse	r3, r2
      82:	82 03       	fmuls	r16, r18
      84:	41 02       	muls	r20, r17
      86:	21 02       	muls	r18, r17
      88:	11 02       	muls	r17, r17
      8a:	09 02       	muls	r16, r25
      8c:	06 02       	muls	r16, r22
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	33 10       	cpse	r3, r3
      94:	02 01       	movw	r0, r4
      96:	01 02       	muls	r16, r17
      98:	11 02       	muls	r17, r17
      9a:	11 02       	muls	r17, r17
      9c:	2a 01       	movw	r4, r20
      9e:	c4 00       	.word	0x00c4	; ????
      a0:	00 00       	nop
      a2:	00 00       	nop
      a4:	34 10       	cpse	r3, r4
      a6:	60 00       	.word	0x0060	; ????
      a8:	58 00       	.word	0x0058	; ????
      aa:	46 00       	.word	0x0046	; ????
      ac:	41 00       	.word	0x0041	; ????
      ae:	ff 03       	fmulsu	r23, r23
      b0:	40 00       	.word	0x0040	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	35 10       	cpse	r3, r5
      b8:	1f 01       	movw	r2, r30
      ba:	11 02       	muls	r17, r17
      bc:	11 02       	muls	r17, r17
      be:	11 02       	muls	r17, r17
      c0:	21 01       	movw	r4, r2
      c2:	c0 00       	.word	0x00c0	; ????
      c4:	00 00       	nop
      c6:	00 00       	nop
      c8:	36 10       	cpse	r3, r6
      ca:	fc 00       	.word	0x00fc	; ????
      cc:	12 01       	movw	r2, r4
      ce:	11 02       	muls	r17, r17
      d0:	11 02       	muls	r17, r17
      d2:	21 01       	movw	r4, r2
      d4:	c2 00       	.word	0x00c2	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	37 10       	cpse	r3, r7
      dc:	02 00       	.word	0x0002	; ????
      de:	01 00       	.word	0x0001	; ????
      e0:	01 00       	.word	0x0001	; ????
      e2:	c1 03       	fmuls	r20, r17
      e4:	31 00       	.word	0x0031	; ????
      e6:	0f 00       	.word	0x000f	; ????
      e8:	00 00       	nop
      ea:	00 00       	nop
      ec:	38 12       	cpse	r3, r24
      ee:	c4 00       	.word	0x00c4	; ????
      f0:	2a 01       	movw	r4, r20
      f2:	11 02       	muls	r17, r17
      f4:	11 02       	muls	r17, r17
      f6:	11 02       	muls	r17, r17
      f8:	2a 01       	movw	r4, r20
      fa:	c4 00       	.word	0x00c4	; ????
      fc:	00 00       	nop
      fe:	00 00       	nop
     100:	39 10       	cpse	r3, r9
     102:	0c 01       	movw	r0, r24
     104:	12 02       	muls	r17, r18
     106:	21 02       	muls	r18, r17
     108:	21 02       	muls	r18, r17
     10a:	22 01       	movw	r4, r4
     10c:	dc 00       	.word	0x00dc	; ????
     10e:	00 00       	nop
	...

00000112 <lines5x12>:
     112:	05 0c 20 02 01 08 2f 02 fd 0b 3d 0a 01 08 01 08     .. .../...=.....
     122:	01 08 01 08 01 08 5b 0a ff 0f 01 08 01 08 01 08     ......[.........
     132:	01 08 5d 0a 01 08 01 08 01 08 01 08 ff 0f           ..]...........

00000140 <font5x8>:
     140:	43 08 20 04 00 00 00 00 2c 03 e0 60 00 2e 03 60     C. .....,..`...`
     150:	60 00 30 06 3e 51 49 45 3e 00 31 04 42 7f 40 00     `.0.>QIE>.1.B.@.
     160:	32 06 62 51 49 49 46 00 33 06 22 49 49 49 36 00     2.bQIIF.3."III6.
     170:	34 06 18 14 12 7f 10 00 35 06 2f 49 49 49 31 00     4.......5./III1.
     180:	36 06 3c 4a 49 49 30 00 37 06 01 71 09 05 03 00     6.<JII0.7..q....
     190:	38 06 36 49 49 49 36 00 39 06 06 49 49 29 1e 00     8.6III6.9..II)..
     1a0:	3f 06 02 01 59 09 06 00 41 06 7e 11 11 11 7e 00     ?...Y...A.~...~.
     1b0:	42 06 7f 49 49 49 36 00 43 06 3e 41 41 41 22 00     B..III6.C.>AAA".
     1c0:	44 06 7f 41 41 41 3e 00 45 06 7f 49 49 49 41 00     D..AAA>.E..IIIA.
     1d0:	46 06 7f 09 09 09 01 00 47 06 3e 41 49 49 7a 00     F.......G.>AIIz.
     1e0:	48 06 7f 08 08 08 7f 00 49 04 41 7f 41 00 4a 06     H.......I.A.A.J.
     1f0:	30 40 40 40 3f 00 4b 06 7f 08 14 22 41 00 4c 06     0@@@?.K...."A.L.
     200:	7f 40 40 40 40 00 4d 06 7f 02 04 02 7f 00 4e 06     .@@@@.M.......N.
     210:	7f 02 04 08 7f 00 4f 06 3e 41 41 41 3e 00 50 06     ......O.>AAA>.P.
     220:	7f 09 09 09 06 00 51 06 3e 41 51 21 5e 00 52 06     ......Q.>AQ!^.R.
     230:	7f 09 09 19 66 00 53 06 26 49 49 49 32 00 54 06     ....f.S.&III2.T.
     240:	01 01 7f 01 01 00 55 06 3f 40 40 40 3f 00 56 06     ......U.?@@@?.V.
     250:	1f 20 40 20 1f 00 57 06 3f 40 3c 40 3f 00 58 06     . @ ..W.?@<@?.X.
     260:	63 14 08 14 63 00 59 06 07 08 70 08 07 00 5a 05     c...c.Y...p...Z.
     270:	71 49 45 43 00 5f 05 01 01 01 01 01 61 06 20 54     qIEC._......a. T
     280:	54 54 78 00 62 06 7f 44 44 44 38 00 63 06 38 44     TTx.b..DDD8.c.8D
     290:	44 44 28 00 64 06 38 44 44 44 7f 00 65 06 38 54     DD(.d.8DDD..e.8T
     2a0:	54 54 08 00 66 05 08 7e 09 09 00 67 06 18 a4 a4     TT..f..~...g....
     2b0:	a4 7c 00 68 05 7f 04 04 78 00 69 03 7d 40 00 6a     .|.h....x.i.}@.j
     2c0:	05 40 80 84 7d 00 6b 05 7f 10 28 44 00 6c 04 7f     .@..}.k...(D.l..
     2d0:	40 40 00 6d 06 7c 04 18 04 78 00 6e 05 7c 04 04     @@.m.|...x.n.|..
     2e0:	78 00 6f 06 38 44 44 44 38 00 70 05 fc 44 44 38     x.o.8DDD8.p..DD8
     2f0:	00 71 05 38 44 44 fc 00 72 06 44 78 44 04 08 00     .q.8DD..r.DxD...
     300:	73 06 08 54 54 54 20 00 74 05 04 3e 44 24 00 75     s..TTT .t..>D$.u
     310:	05 3c 40 20 7c 00 76 06 1c 20 40 20 1c 00 77 06     .<@ |.v.. @ ..w.
     320:	3c 60 30 60 3c 00 78 05 6c 10 10 6c 00 79 05 9c     <`0`<.x.l..l.y..
     330:	a0 60 3c 00 7a 05 64 54 54 4c 00 00                 .`<.z.dTTL..

0000033c <__ctors_end>:
     33c:	11 24       	eor	r1, r1
     33e:	1f be       	out	0x3f, r1	; 63
     340:	cf e5       	ldi	r28, 0x5F	; 95
     342:	d2 e0       	ldi	r29, 0x02	; 2
     344:	de bf       	out	0x3e, r29	; 62
     346:	cd bf       	out	0x3d, r28	; 61

00000348 <__do_copy_data>:
     348:	10 e0       	ldi	r17, 0x00	; 0
     34a:	a0 e6       	ldi	r26, 0x60	; 96
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	e0 ee       	ldi	r30, 0xE0	; 224
     350:	f9 e1       	ldi	r31, 0x19	; 25
     352:	02 c0       	rjmp	.+4      	; 0x358 <__do_copy_data+0x10>
     354:	05 90       	lpm	r0, Z+
     356:	0d 92       	st	X+, r0
     358:	a8 36       	cpi	r26, 0x68	; 104
     35a:	b1 07       	cpc	r27, r17
     35c:	d9 f7       	brne	.-10     	; 0x354 <__do_copy_data+0xc>

0000035e <__do_clear_bss>:
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	a8 e6       	ldi	r26, 0x68	; 104
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	01 c0       	rjmp	.+2      	; 0x368 <.do_clear_bss_start>

00000366 <.do_clear_bss_loop>:
     366:	1d 92       	st	X+, r1

00000368 <.do_clear_bss_start>:
     368:	ae 3b       	cpi	r26, 0xBE	; 190
     36a:	b2 07       	cpc	r27, r18
     36c:	e1 f7       	brne	.-8      	; 0x366 <.do_clear_bss_loop>
     36e:	2b da       	rcall	.-2986   	; 0xfffff7c6 <__eeprom_end+0xff7ef6bc>
     370:	35 cb       	rjmp	.-2454   	; 0xfffff9dc <__eeprom_end+0xff7ef8d2>

00000372 <__bad_interrupt>:
     372:	46 ce       	rjmp	.-884    	; 0x0 <__vectors>

00000374 <__iCliRetVal>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     374:	f8 94       	cli
    return 1;
}
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	08 95       	ret

0000037a <__iSeiParam.isra.0>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     37a:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     37c:	08 95       	ret

0000037e <InitTask>:
   nrTasks = 0;
   InitTask(sizeof(IdleTaskStack), IdleTaskStack, IdleTask);
}

uint8_t InitTask(uint16_t stackSize, uint8_t* stackBuffer, TaskFunction function)
{
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	9c 01       	movw	r18, r24
     384:	db 01       	movw	r26, r22
   uint8_t* stackptr = stackBuffer + stackSize - 1;
     386:	fc 01       	movw	r30, r24
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	e6 0f       	add	r30, r22
     38c:	f7 1f       	adc	r31, r23
   
   *stackptr-- = (uint16_t)function & 0x00ff;
     38e:	40 83       	st	Z, r20
   *stackptr-- = (uint16_t)function >> 8;
     390:	ef 01       	movw	r28, r30
     392:	21 97       	sbiw	r28, 0x01	; 1
     394:	58 83       	st	Y, r21
   *stackptr-- = 0x00;                                         // register R0
     396:	21 97       	sbiw	r28, 0x01	; 1
     398:	18 82       	st	Y, r1
   *stackptr-- = 0x00; nrTasks == 0 ? 0x00 : 0x80;             // status register; interrupt will be enabled later
     39a:	21 97       	sbiw	r28, 0x01	; 1
     39c:	18 82       	st	Y, r1
     39e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>

   tasks[nrTasks].stackbuffer = stackBuffer;
     3a2:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	6a e0       	ldi	r22, 0x0A	; 10
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	2d da       	rcall	.-2982   	; 0xfffff808 <__eeprom_end+0xff7ef6fe>
     3ae:	83 5a       	subi	r24, 0xA3	; 163
     3b0:	9e 4f       	sbci	r25, 0xFE	; 254
     3b2:	ec 01       	movw	r28, r24
     3b4:	b9 83       	std	Y+1, r27	; 0x01
     3b6:	a8 83       	st	Y, r26
   tasks[nrTasks].StackPointer = (uint16_t)stackptr - 31;      // store stack pointer
     3b8:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     3bc:	b3 97       	sbiw	r30, 0x23	; 35
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	6a e0       	ldi	r22, 0x0A	; 10
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	21 da       	rcall	.-3006   	; 0xfffff808 <__eeprom_end+0xff7ef6fe>
     3c6:	83 5a       	subi	r24, 0xA3	; 163
     3c8:	9e 4f       	sbci	r25, 0xFE	; 254
     3ca:	dc 01       	movw	r26, r24
     3cc:	13 96       	adiw	r26, 0x03	; 3
     3ce:	fc 93       	st	X, r31
     3d0:	ee 93       	st	-X, r30
     3d2:	12 97       	sbiw	r26, 0x02	; 2
   tasks[nrTasks].StackSize = stackSize;
     3d4:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	6a e0       	ldi	r22, 0x0A	; 10
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	14 da       	rcall	.-3032   	; 0xfffff808 <__eeprom_end+0xff7ef6fe>
     3e0:	83 5a       	subi	r24, 0xA3	; 163
     3e2:	9e 4f       	sbci	r25, 0xFE	; 254
     3e4:	ec 01       	movw	r28, r24
     3e6:	3d 83       	std	Y+5, r19	; 0x05
     3e8:	2c 83       	std	Y+4, r18	; 0x04
   tasks[nrTasks].Handle = nrTasks;
     3ea:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     3ee:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <nrTasks>
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	6a e0       	ldi	r22, 0x0A	; 10
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	07 da       	rcall	.-3058   	; 0xfffff808 <__eeprom_end+0xff7ef6fe>
     3fa:	83 5a       	subi	r24, 0xA3	; 163
     3fc:	9e 4f       	sbci	r25, 0xFE	; 254
     3fe:	fc 01       	movw	r30, r24
     400:	26 83       	std	Z+6, r18	; 0x06
   tasks[nrTasks].TaskState = StateRunable;
     402:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	6a e0       	ldi	r22, 0x0A	; 10
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	fd d9       	rcall	.-3078   	; 0xfffff808 <__eeprom_end+0xff7ef6fe>
     40e:	83 5a       	subi	r24, 0xA3	; 163
     410:	9e 4f       	sbci	r25, 0xFE	; 254
     412:	20 e4       	ldi	r18, 0x40	; 64
     414:	dc 01       	movw	r26, r24
     416:	17 96       	adiw	r26, 0x07	; 7
     418:	2c 93       	st	X, r18
   tasks[nrTasks].NextRunTime = 0;
     41a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	6a e0       	ldi	r22, 0x0A	; 10
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	f1 d9       	rcall	.-3102   	; 0xfffff808 <__eeprom_end+0xff7ef6fe>
     426:	83 5a       	subi	r24, 0xA3	; 163
     428:	9e 4f       	sbci	r25, 0xFE	; 254
     42a:	ec 01       	movw	r28, r24
     42c:	19 86       	std	Y+9, r1	; 0x09
     42e:	18 86       	std	Y+8, r1	; 0x08

   return nrTasks++;
     430:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	98 0f       	add	r25, r24
     438:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <nrTasks>
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <KernelSetup>:
}

void KernelSetup()
{
   // timer / counter 0 is used to generate the 1 ms timing
   KernelTimerCounter = 0;
     442:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <KernelTimerCounter+0x1>
     446:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <KernelTimerCounter>
   TCCR0A = (1<<WGM01);            // CTC mode
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	80 bf       	out	0x30, r24	; 48
   TCCR0B = (1<<CS01);             // 8 MHz divide by 64 prescaler produces 125 KHz clock source
     44e:	83 bf       	out	0x33, r24	; 51
   OCR0A = 124;                    // 125 - 1 gives 1 ms compare match interrupts used for task switching
     450:	8c e7       	ldi	r24, 0x7C	; 124
     452:	86 bf       	out	0x36, r24	; 54

   nrTasks = 0;
     454:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <nrTasks>
   InitTask(sizeof(IdleTaskStack), IdleTaskStack, IdleTask);
     458:	45 e1       	ldi	r20, 0x15	; 21
     45a:	53 e0       	ldi	r21, 0x03	; 3
     45c:	61 e9       	ldi	r22, 0x91	; 145
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	87 e2       	ldi	r24, 0x27	; 39
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	8c cf       	rjmp	.-232    	; 0x37e <InitTask>

00000466 <TaskSleep>:
}

__attribute__((optimize("O"))) void TaskSleep(uint16_t time)
{
   // store context of current task
   __asm volatile(
     466:	f8 94       	cli
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	1f 92       	push	r1
     470:	2f 92       	push	r2
     472:	3f 92       	push	r3
     474:	4f 92       	push	r4
     476:	5f 92       	push	r5
     478:	6f 92       	push	r6
     47a:	7f 92       	push	r7
     47c:	8f 92       	push	r8
     47e:	9f 92       	push	r9
     480:	af 92       	push	r10
     482:	bf 92       	push	r11
     484:	cf 92       	push	r12
     486:	df 92       	push	r13
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ef 93       	push	r30
     4aa:	ff 93       	push	r31
     4ac:	11 24       	eor	r1, r1
      "              push r30          \n\t"
      "              push r31          \n\t"
      "              clr r1            \n\t" // reset the "zero" register
   ::);
   
   tasks[TaskIndex].StackPointer = SP;
     4ae:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <TaskIndex>
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	4d b7       	in	r20, 0x3d	; 61
     4b6:	5e b7       	in	r21, 0x3e	; 62
     4b8:	f9 01       	movw	r30, r18
     4ba:	ee 0f       	add	r30, r30
     4bc:	ff 1f       	adc	r31, r31
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	e2 0f       	add	r30, r18
     4c4:	f3 1f       	adc	r31, r19
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	e3 5a       	subi	r30, 0xA3	; 163
     4cc:	fe 4f       	sbci	r31, 0xFE	; 254
     4ce:	53 83       	std	Z+3, r21	; 0x03
     4d0:	42 83       	std	Z+2, r20	; 0x02

   if (time > 0)
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	31 f1       	breq	.+76     	; 0x522 <TaskSleep+0xbc>
   {
      tasks[TaskIndex].TaskState = StateWaiting;
     4d6:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <TaskIndex>
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	f9 01       	movw	r30, r18
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	e2 0f       	add	r30, r18
     4e8:	f3 1f       	adc	r31, r19
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	e3 5a       	subi	r30, 0xA3	; 163
     4f0:	fe 4f       	sbci	r31, 0xFE	; 254
     4f2:	20 e2       	ldi	r18, 0x20	; 32
     4f4:	27 83       	std	Z+7, r18	; 0x07
      tasks[TaskIndex].NextRunTime = KernelTimerCounter + time;
     4f6:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <TaskIndex>
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <KernelTimerCounter>
     500:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <KernelTimerCounter+0x1>
     504:	84 0f       	add	r24, r20
     506:	95 1f       	adc	r25, r21
     508:	f9 01       	movw	r30, r18
     50a:	ee 0f       	add	r30, r30
     50c:	ff 1f       	adc	r31, r31
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e2 0f       	add	r30, r18
     514:	f3 1f       	adc	r31, r19
     516:	ee 0f       	add	r30, r30
     518:	ff 1f       	adc	r31, r31
     51a:	e3 5a       	subi	r30, 0xA3	; 163
     51c:	fe 4f       	sbci	r31, 0xFE	; 254
     51e:	91 87       	std	Z+9, r25	; 0x09
     520:	80 87       	std	Z+8, r24	; 0x08
   }

   // find new task to run
   if (TaskIndex == 0) TaskIndex++;
     522:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <TaskIndex>
     526:	81 11       	cpse	r24, r1
     528:	05 c0       	rjmp	.+10     	; 0x534 <TaskSleep+0xce>
     52a:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <TaskIndex>
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <TaskIndex>
   TaskIterator = TaskIndex;
     534:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <TaskIndex>
     538:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <TaskIterator>
   do
   {
      TaskIterator = TaskIterator >= nrTasks - 1 ? 1 : TaskIterator + 1;
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <TaskIterator>
     542:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	01 97       	sbiw	r24, 0x01	; 1
     54c:	28 17       	cp	r18, r24
     54e:	39 07       	cpc	r19, r25
     550:	24 f4       	brge	.+8      	; 0x55a <TaskSleep+0xf4>
     552:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <TaskIterator>
     556:	8f 5f       	subi	r24, 0xFF	; 255
     558:	01 c0       	rjmp	.+2      	; 0x55c <TaskSleep+0xf6>
     55a:	84 2f       	mov	r24, r20
     55c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <TaskIterator>
   }
   while ((TaskIterator != TaskIndex) && (tasks[TaskIterator].TaskState != StateRunable));
     560:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <TaskIterator>
     564:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <TaskIndex>
     568:	98 17       	cp	r25, r24
     56a:	89 f0       	breq	.+34     	; 0x58e <TaskSleep+0x128>
     56c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <TaskIterator>
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	fc 01       	movw	r30, r24
     574:	ee 0f       	add	r30, r30
     576:	ff 1f       	adc	r31, r31
     578:	ee 0f       	add	r30, r30
     57a:	ff 1f       	adc	r31, r31
     57c:	e8 0f       	add	r30, r24
     57e:	f9 1f       	adc	r31, r25
     580:	ee 0f       	add	r30, r30
     582:	ff 1f       	adc	r31, r31
     584:	e3 5a       	subi	r30, 0xA3	; 163
     586:	fe 4f       	sbci	r31, 0xFE	; 254
     588:	87 81       	ldd	r24, Z+7	; 0x07
     58a:	80 34       	cpi	r24, 0x40	; 64
     58c:	c1 f6       	brne	.-80     	; 0x53e <TaskSleep+0xd8>

   TaskIndex = tasks[TaskIterator].TaskState == StateRunable ? TaskIterator : 0;
     58e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <TaskIterator>
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	ee 0f       	add	r30, r30
     59c:	ff 1f       	adc	r31, r31
     59e:	e8 0f       	add	r30, r24
     5a0:	f9 1f       	adc	r31, r25
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	e3 5a       	subi	r30, 0xA3	; 163
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	87 81       	ldd	r24, Z+7	; 0x07
     5ac:	80 34       	cpi	r24, 0x40	; 64
     5ae:	19 f4       	brne	.+6      	; 0x5b6 <TaskSleep+0x150>
     5b0:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <TaskIterator>
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <TaskSleep+0x152>
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <TaskIndex>

   // retrieve context of next task to run
   SP = tasks[TaskIndex].StackPointer;
     5bc:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <TaskIndex>
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	fc 01       	movw	r30, r24
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	ee 0f       	add	r30, r30
     5ca:	ff 1f       	adc	r31, r31
     5cc:	e8 0f       	add	r30, r24
     5ce:	f9 1f       	adc	r31, r25
     5d0:	ee 0f       	add	r30, r30
     5d2:	ff 1f       	adc	r31, r31
     5d4:	e3 5a       	subi	r30, 0xA3	; 163
     5d6:	fe 4f       	sbci	r31, 0xFE	; 254
     5d8:	82 81       	ldd	r24, Z+2	; 0x02
     5da:	93 81       	ldd	r25, Z+3	; 0x03
     5dc:	9e bf       	out	0x3e, r25	; 62
     5de:	8d bf       	out	0x3d, r24	; 61

000005e0 <start>:

   __asm volatile(
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	bf 91       	pop	r27
     5ea:	af 91       	pop	r26
     5ec:	9f 91       	pop	r25
     5ee:	8f 91       	pop	r24
     5f0:	7f 91       	pop	r23
     5f2:	6f 91       	pop	r22
     5f4:	5f 91       	pop	r21
     5f6:	4f 91       	pop	r20
     5f8:	3f 91       	pop	r19
     5fa:	2f 91       	pop	r18
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	bf 90       	pop	r11
     60a:	af 90       	pop	r10
     60c:	9f 90       	pop	r9
     60e:	8f 90       	pop	r8
     610:	7f 90       	pop	r7
     612:	6f 90       	pop	r6
     614:	5f 90       	pop	r5
     616:	4f 90       	pop	r4
     618:	3f 90       	pop	r3
     61a:	2f 90       	pop	r2
     61c:	1f 90       	pop	r1
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	78 94       	sei
     626:	08 95       	ret
     628:	08 95       	ret

0000062a <IdleTask>:

void IdleTask(void);

void IdleTask(void)
{
   if (initFunction != NULL)
     62a:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <initFunction>
     62e:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <initFunction+0x1>
     632:	30 97       	sbiw	r30, 0x00	; 0
     634:	09 f0       	breq	.+2      	; 0x638 <IdleTask+0xe>
   {
      initFunction();
     636:	09 95       	icall
   }

   while(true)
   {
      TaskSleep(0);
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	14 df       	rcall	.-472    	; 0x466 <TaskSleep>
     63e:	fc cf       	rjmp	.-8      	; 0x638 <IdleTask+0xe>

00000640 <TaskStart>:
      "              ret              \n\t"
   ::);
}

__attribute__((optimize("O"))) void TaskStart(uint8_t index)
{
     640:	cf 93       	push	r28
     642:	c8 2f       	mov	r28, r24
   ATOMIC_BLOCK(ATOMIC_FORCEON)
     644:	97 de       	rcall	.-722    	; 0x374 <__iCliRetVal>
     646:	88 23       	and	r24, r24
     648:	79 f0       	breq	.+30     	; 0x668 <TaskStart+0x28>
   {
      tasks[index].TaskState = StateRunable;
     64a:	8c 2f       	mov	r24, r28
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	fc 01       	movw	r30, r24
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	ee 0f       	add	r30, r30
     656:	ff 1f       	adc	r31, r31
     658:	e8 0f       	add	r30, r24
     65a:	f9 1f       	adc	r31, r25
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	e3 5a       	subi	r30, 0xA3	; 163
     662:	fe 4f       	sbci	r31, 0xFE	; 254
     664:	80 e4       	ldi	r24, 0x40	; 64
     666:	87 83       	std	Z+7, r24	; 0x07
   ::);
}

__attribute__((optimize("O"))) void TaskStart(uint8_t index)
{
   ATOMIC_BLOCK(ATOMIC_FORCEON)
     668:	88 de       	rcall	.-752    	; 0x37a <__iSeiParam.isra.0>
   {
      tasks[index].TaskState = StateRunable;
   }   
}
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <TaskStop>:

__attribute__((optimize("O"))) void TaskStop(uint8_t index)
{
     66e:	cf 93       	push	r28
     670:	c8 2f       	mov	r28, r24
   ATOMIC_BLOCK(ATOMIC_FORCEON)
     672:	80 de       	rcall	.-768    	; 0x374 <__iCliRetVal>
     674:	88 23       	and	r24, r24
     676:	79 f0       	breq	.+30     	; 0x696 <TaskStop+0x28>
   {
      tasks[index].TaskState = StateStopped;
     678:	8c 2f       	mov	r24, r28
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	fc 01       	movw	r30, r24
     67e:	ee 0f       	add	r30, r30
     680:	ff 1f       	adc	r31, r31
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	e8 0f       	add	r30, r24
     688:	f9 1f       	adc	r31, r25
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	e3 5a       	subi	r30, 0xA3	; 163
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	80 e1       	ldi	r24, 0x10	; 16
     694:	87 83       	std	Z+7, r24	; 0x07
   }   
}

__attribute__((optimize("O"))) void TaskStop(uint8_t index)
{
   ATOMIC_BLOCK(ATOMIC_FORCEON)
     696:	71 de       	rcall	.-798    	; 0x37a <__iSeiParam.isra.0>
   {
      tasks[index].TaskState = StateStopped;
   }
}
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <EnableTaskSwitching>:

__attribute__((optimize("O"))) void EnableTaskSwitching(void)
{
   TIMSK0 |= (1<<OCIE0A);           // enable timer 0 compare match interrupt
     69c:	89 b7       	in	r24, 0x39	; 57
     69e:	82 60       	ori	r24, 0x02	; 2
     6a0:	89 bf       	out	0x39, r24	; 57
     6a2:	08 95       	ret

000006a4 <StartKernel>:
   return nrTasks++;
}

__attribute__((optimize("O"))) void StartKernel(TaskFunction function)
{
   TaskIndex = 0;
     6a4:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <TaskIndex>
   initFunction = function;
     6a8:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <initFunction+0x1>
     6ac:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <initFunction>
   
   EnableTaskSwitching();
     6b0:	f5 df       	rcall	.-22     	; 0x69c <EnableTaskSwitching>
   SP = tasks[TaskIndex].StackPointer;
     6b2:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <TaskIndex>
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	fc 01       	movw	r30, r24
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	e8 0f       	add	r30, r24
     6c4:	f9 1f       	adc	r31, r25
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	e3 5a       	subi	r30, 0xA3	; 163
     6cc:	fe 4f       	sbci	r31, 0xFE	; 254
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	9e bf       	out	0x3e, r25	; 62
     6d4:	8d bf       	out	0x3d, r24	; 61

   __asm volatile(
     6d6:	84 cf       	rjmp	.-248    	; 0x5e0 <start>
     6d8:	08 95       	ret

000006da <__vector_9>:
{
   TIMSK0 |= (1<<OCIE0A);           // enable timer 0 compare match interrupt
}

__attribute__((optimize("O"))) ISR (TIM0_COMPA_vect)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	2f 93       	push	r18
     6e6:	3f 93       	push	r19
     6e8:	4f 93       	push	r20
     6ea:	5f 93       	push	r21
     6ec:	6f 93       	push	r22
     6ee:	7f 93       	push	r23
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
   static uint8_t delay = 0;
   static uint8_t i;
   
   sei(); // allow other interrupts (ADC)
     6f8:	78 94       	sei
   
   delay++;
     6fa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <delay.1571>
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
   if (delay == 10)
     700:	8a 30       	cpi	r24, 0x0A	; 10
     702:	19 f0       	breq	.+6      	; 0x70a <__vector_9+0x30>
   static uint8_t delay = 0;
   static uint8_t i;
   
   sei(); // allow other interrupts (ADC)
   
   delay++;
     704:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <delay.1571>
     708:	4a c0       	rjmp	.+148    	; 0x79e <__vector_9+0xc4>
   if (delay == 10)
   {
      delay = 0;
     70a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <delay.1571>
      KernelTimerCounter++;
     70e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <KernelTimerCounter>
     712:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <KernelTimerCounter+0x1>
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <KernelTimerCounter+0x1>
     71c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <KernelTimerCounter>

      // update status of each task
      for (i = 0; i < nrTasks; i++)
     720:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
     724:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     728:	88 23       	and	r24, r24
     72a:	c9 f1       	breq	.+114    	; 0x79e <__vector_9+0xc4>
     72c:	20 e0       	ldi	r18, 0x00	; 0
      {
         if ((tasks[i].NextRunTime == KernelTimerCounter) &&
            (tasks[i].TaskState != StateStopped))
         {
            tasks[i].TaskState = StateRunable;
     72e:	30 e4       	ldi	r19, 0x40	; 64
      KernelTimerCounter++;

      // update status of each task
      for (i = 0; i < nrTasks; i++)
      {
         if ((tasks[i].NextRunTime == KernelTimerCounter) &&
     730:	82 2f       	mov	r24, r18
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	ee 0f       	add	r30, r30
     738:	ff 1f       	adc	r31, r31
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	e8 0f       	add	r30, r24
     740:	f9 1f       	adc	r31, r25
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	e3 5a       	subi	r30, 0xA3	; 163
     748:	fe 4f       	sbci	r31, 0xFE	; 254
     74a:	60 85       	ldd	r22, Z+8	; 0x08
     74c:	71 85       	ldd	r23, Z+9	; 0x09
     74e:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <KernelTimerCounter>
     752:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <KernelTimerCounter+0x1>
     756:	64 17       	cp	r22, r20
     758:	75 07       	cpc	r23, r21
     75a:	d1 f4       	brne	.+52     	; 0x790 <__vector_9+0xb6>
            (tasks[i].TaskState != StateStopped))
     75c:	fc 01       	movw	r30, r24
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	e8 0f       	add	r30, r24
     768:	f9 1f       	adc	r31, r25
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	e3 5a       	subi	r30, 0xA3	; 163
     770:	fe 4f       	sbci	r31, 0xFE	; 254
     772:	47 81       	ldd	r20, Z+7	; 0x07
      KernelTimerCounter++;

      // update status of each task
      for (i = 0; i < nrTasks; i++)
      {
         if ((tasks[i].NextRunTime == KernelTimerCounter) &&
     774:	40 31       	cpi	r20, 0x10	; 16
     776:	61 f0       	breq	.+24     	; 0x790 <__vector_9+0xb6>
            (tasks[i].TaskState != StateStopped))
         {
            tasks[i].TaskState = StateRunable;
     778:	fc 01       	movw	r30, r24
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	e8 0f       	add	r30, r24
     784:	f9 1f       	adc	r31, r25
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	e3 5a       	subi	r30, 0xA3	; 163
     78c:	fe 4f       	sbci	r31, 0xFE	; 254
     78e:	37 83       	std	Z+7, r19	; 0x07
   {
      delay = 0;
      KernelTimerCounter++;

      // update status of each task
      for (i = 0; i < nrTasks; i++)
     790:	2f 5f       	subi	r18, 0xFF	; 255
     792:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nrTasks>
     796:	28 17       	cp	r18, r24
     798:	58 f2       	brcs	.-106    	; 0x730 <__vector_9+0x56>
     79a:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
         {
            tasks[i].TaskState = StateRunable;
         }
      }
   }
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	7f 91       	pop	r23
     7a8:	6f 91       	pop	r22
     7aa:	5f 91       	pop	r21
     7ac:	4f 91       	pop	r20
     7ae:	3f 91       	pop	r19
     7b0:	2f 91       	pop	r18
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f 90       	pop	r0
     7b8:	1f 90       	pop	r1
     7ba:	18 95       	reti

000007bc <GetVoltage>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7bc:	f8 94       	cli
int16_t GetVoltage(void)
{
   int16_t value;
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      value = button; //voltage;
     7be:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <button>
     7c2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <button+0x1>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     7c6:	78 94       	sei
   }
   return value * 4 / 3;
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	63 e0       	ldi	r22, 0x03	; 3
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	63 d8       	rcall	.-3898   	; 0xfffff89c <__eeprom_end+0xff7ef792>
     7d6:	cb 01       	movw	r24, r22
}
     7d8:	08 95       	ret

000007da <GetAdcButton>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7da:	f8 94       	cli
{
   enum ButtonAdc value;

   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      if ((button >= 480) && (button <= 520))        value = ButtonAdcMenu;  // 1.60V, cnt=500
     7dc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <button>
     7e0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <button+0x1>
     7e4:	80 3e       	cpi	r24, 0xE0	; 224
     7e6:	91 40       	sbci	r25, 0x01	; 1
     7e8:	3c f0       	brlt	.+14     	; 0x7f8 <GetAdcButton+0x1e>
     7ea:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <button>
     7ee:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <button+0x1>
     7f2:	89 30       	cpi	r24, 0x09	; 9
     7f4:	92 40       	sbci	r25, 0x02	; 2
     7f6:	f4 f0       	brlt	.+60     	; 0x834 <GetAdcButton+0x5a>
      else if ((button >= 658) && (button <= 698))   value = ButtonAdcDown;  // 1.05V, cnt=680
     7f8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <button>
     7fc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <button+0x1>
     800:	82 39       	cpi	r24, 0x92	; 146
     802:	92 40       	sbci	r25, 0x02	; 2
     804:	3c f0       	brlt	.+14     	; 0x814 <GetAdcButton+0x3a>
     806:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <button>
     80a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <button+0x1>
     80e:	8b 3b       	cpi	r24, 0xBB	; 187
     810:	92 40       	sbci	r25, 0x02	; 2
     812:	94 f0       	brlt	.+36     	; 0x838 <GetAdcButton+0x5e>
      else if ((button >= 1000) && (button <= 1040)) value = ButtonAdcUp;    // 3.30V, cnt=1023
     814:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <button>
     818:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <button+0x1>
     81c:	88 3e       	cpi	r24, 0xE8	; 232
     81e:	93 40       	sbci	r25, 0x03	; 3
     820:	6c f0       	brlt	.+26     	; 0x83c <GetAdcButton+0x62>
     822:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <button>
     826:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <button+0x1>
     82a:	81 31       	cpi	r24, 0x11	; 17
     82c:	94 40       	sbci	r25, 0x04	; 4
     82e:	34 f4       	brge	.+12     	; 0x83c <GetAdcButton+0x62>
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	05 c0       	rjmp	.+10     	; 0x83e <GetAdcButton+0x64>
{
   enum ButtonAdc value;

   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      if ((button >= 480) && (button <= 520))        value = ButtonAdcMenu;  // 1.60V, cnt=500
     834:	83 e0       	ldi	r24, 0x03	; 3
     836:	03 c0       	rjmp	.+6      	; 0x83e <GetAdcButton+0x64>
      else if ((button >= 658) && (button <= 698))   value = ButtonAdcDown;  // 1.05V, cnt=680
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	01 c0       	rjmp	.+2      	; 0x83e <GetAdcButton+0x64>
      else if ((button >= 1000) && (button <= 1040)) value = ButtonAdcUp;    // 3.30V, cnt=1023
      else value = ButtonAdcNone;
     83c:	80 e0       	ldi	r24, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     83e:	78 94       	sei
   }
   return value;
}
     840:	08 95       	ret

00000842 <GetNrSamples>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     842:	f8 94       	cli
uint16_t GetNrSamples(void)
{
   uint16_t value;
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      value = OCR1A;
     844:	8a b5       	in	r24, 0x2a	; 42
     846:	9b b5       	in	r25, 0x2b	; 43
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     848:	78 94       	sei
   }
   return value;
}
     84a:	08 95       	ret

0000084c <AdcSetup>:

void AdcSetup(void)
{
   /* ADC setup */
   DIDR0 = (1 << ADC0D) | (1 << ADC1D);                     // disable digital buffer for ADC0 and ADC1
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	81 b9       	out	0x01, r24	; 1
   ADMUX = 0;                                               // next digitize buttons and 5V reference
     850:	17 b8       	out	0x07, r1	; 7

   ADCSRB = (1 << ADTS2) | (1 << ADTS0);                    // start conversion on timer 1 compare B
     852:	85 e0       	ldi	r24, 0x05	; 5
     854:	83 b9       	out	0x03, r24	; 3
   ADCSRA = (1 << ADEN) |                                   // enable ADC
     856:	8e ef       	ldi	r24, 0xFE	; 254
     858:	86 b9       	out	0x06, r24	; 6
            (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0) |    // 125KHz ADC clock
            (1 << ADIE) |                                   // generate interrupt when ready
            (1 << ADATE);                                   // use interrupt source to start ADC

   /* timer 1 setup */
   TCCR1A = 0;                         // CTC mode
     85a:	1f bc       	out	0x2f, r1	; 47
   OCR1A = COUNTER_TIME_50HZ;          // 2500 - 1 gives 20 ms delay time
     85c:	83 ec       	ldi	r24, 0xC3	; 195
     85e:	99 e0       	ldi	r25, 0x09	; 9
     860:	9b bd       	out	0x2b, r25	; 43
     862:	8a bd       	out	0x2a, r24	; 42
   OCR1B = COUNTER_DELAY_BUTTON;       // OCR1B is used to trigger the ADC. The ADC is used for buttons and zero detection
     864:	87 ee       	ldi	r24, 0xE7	; 231
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	99 bd       	out	0x29, r25	; 41
     86a:	88 bd       	out	0x28, r24	; 40
   TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10); // CTC mode and 8 MHz divide by 64 prescaler produces 125 KHz clock source
     86c:	8b e0       	ldi	r24, 0x0B	; 11
     86e:	8e bd       	out	0x2e, r24	; 46
     870:	08 95       	ret

00000872 <__vector_13>:
}

ISR (ADC_vect)
{
     872:	1f 92       	push	r1
     874:	0f 92       	push	r0
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	0f 92       	push	r0
     87a:	11 24       	eor	r1, r1
     87c:	2f 93       	push	r18
     87e:	3f 93       	push	r19
     880:	4f 93       	push	r20
     882:	5f 93       	push	r21
     884:	6f 93       	push	r22
     886:	7f 93       	push	r23
     888:	8f 93       	push	r24
     88a:	9f 93       	push	r25
     88c:	af 93       	push	r26
     88e:	bf 93       	push	r27
     890:	ef 93       	push	r30
     892:	ff 93       	push	r31
   static uint16_t average = COUNTER_TIME_50HZ;

   if (OCR1B == COUNTER_DELAY_BUTTON)
     894:	88 b5       	in	r24, 0x28	; 40
     896:	99 b5       	in	r25, 0x29	; 41
     898:	87 3e       	cpi	r24, 0xE7	; 231
     89a:	93 40       	sbci	r25, 0x03	; 3
     89c:	69 f4       	brne	.+26     	; 0x8b8 <__vector_13+0x46>
   {
      // buttons
      button = ADC;
     89e:	84 b1       	in	r24, 0x04	; 4
     8a0:	95 b1       	in	r25, 0x05	; 5
     8a2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <button+0x1>
     8a6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <button>

      // next adc measurement will be zero crossing
      ADMUX = 1;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	87 b9       	out	0x07, r24	; 7
      OCR1B = 0;
     8ae:	19 bc       	out	0x29, r1	; 41
     8b0:	18 bc       	out	0x28, r1	; 40
      SetMotorOutput(GetMotorDirection());
     8b2:	7d d3       	rcall	.+1786   	; 0xfae <GetMotorDirection>
     8b4:	ee d3       	rcall	.+2012   	; 0x1092 <SetMotorOutput>
     8b6:	3b c0       	rjmp	.+118    	; 0x92e <__vector_13+0xbc>
   }
   else
   {
      // zero crossing
      OCR1A = average + (465 - ADC);
     8b8:	24 b1       	in	r18, 0x04	; 4
     8ba:	35 b1       	in	r19, 0x05	; 5
     8bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     8c0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     8c4:	8f 52       	subi	r24, 0x2F	; 47
     8c6:	9e 4f       	sbci	r25, 0xFE	; 254
     8c8:	82 1b       	sub	r24, r18
     8ca:	93 0b       	sbc	r25, r19
     8cc:	9b bd       	out	0x2b, r25	; 43
     8ce:	8a bd       	out	0x2a, r24	; 42
      average = (average * 9 + OCR1A) / 10;
     8d0:	2a b5       	in	r18, 0x2a	; 42
     8d2:	3b b5       	in	r19, 0x2b	; 43
     8d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     8d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     8dc:	69 e0       	ldi	r22, 0x09	; 9
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	93 d7       	rcall	.+3878   	; 0x1808 <__mulhi3>
     8e2:	82 0f       	add	r24, r18
     8e4:	93 1f       	adc	r25, r19
     8e6:	6a e0       	ldi	r22, 0x0A	; 10
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	c4 d7       	rcall	.+3976   	; 0x1874 <__udivmodhi4>
      if (average > COUNTER_TIME_50HZ + COUNTER_DELTA) average = COUNTER_TIME_50HZ + COUNTER_DELTA;
     8ec:	6c 38       	cpi	r22, 0x8C	; 140
     8ee:	8a e0       	ldi	r24, 0x0A	; 10
     8f0:	78 07       	cpc	r23, r24
     8f2:	28 f4       	brcc	.+10     	; 0x8fe <__vector_13+0x8c>
   }
   else
   {
      // zero crossing
      OCR1A = average + (465 - ADC);
      average = (average * 9 + OCR1A) / 10;
     8f4:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__data_start+0x1>
     8f8:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
     8fc:	06 c0       	rjmp	.+12     	; 0x90a <__vector_13+0x98>
      if (average > COUNTER_TIME_50HZ + COUNTER_DELTA) average = COUNTER_TIME_50HZ + COUNTER_DELTA;
     8fe:	8b e8       	ldi	r24, 0x8B	; 139
     900:	9a e0       	ldi	r25, 0x0A	; 10
     902:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     906:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      if (average < COUNTER_TIME_50HZ - COUNTER_DELTA) average = COUNTER_TIME_50HZ - COUNTER_DELTA;
     90a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     90e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     912:	8b 3f       	cpi	r24, 0xFB	; 251
     914:	98 40       	sbci	r25, 0x08	; 8
     916:	30 f4       	brcc	.+12     	; 0x924 <__vector_13+0xb2>
     918:	8b ef       	ldi	r24, 0xFB	; 251
     91a:	98 e0       	ldi	r25, 0x08	; 8
     91c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     920:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>

      // next adc measurement will be buttons
      ADMUX = 0;
     924:	17 b8       	out	0x07, r1	; 7
      OCR1B = COUNTER_DELAY_BUTTON;
     926:	87 ee       	ldi	r24, 0xE7	; 231
     928:	93 e0       	ldi	r25, 0x03	; 3
     92a:	99 bd       	out	0x29, r25	; 41
     92c:	88 bd       	out	0x28, r24	; 40
   }
   TIFR1 = (1 << TOV1) | (1 << OCF1B) | (1 << OCF1A) | (1 << ICF1);
     92e:	87 e2       	ldi	r24, 0x27	; 39
     930:	8b b9       	out	0x0b, r24	; 11

   HandleClock();
     932:	90 d6       	rcall	.+3360   	; 0x1654 <HandleClock>
}
     934:	ff 91       	pop	r31
     936:	ef 91       	pop	r30
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	0f 90       	pop	r0
     94e:	0f be       	out	0x3f, r0	; 63
     950:	0f 90       	pop	r0
     952:	1f 90       	pop	r1
     954:	18 95       	reti

00000956 <WriteLcdData>:
   }
}

static void WriteLcdData(uint8_t data)
{
   USIDR = data;
     956:	8f b9       	out	0x0f, r24	; 15
   USISR = (1 << USIOIF);                // clear counter and counter overflow interrupt flag
     958:	80 e4       	ldi	r24, 0x40	; 64
     95a:	8e b9       	out	0x0e, r24	; 14
   while (!(USISR & (1 << USIOIF)) )
   {
      USICR = (1 << USIWM0) | (1 << USICS1) | (1 << USICLK) | (1 << USITC);
     95c:	8b e1       	ldi	r24, 0x1B	; 27

static void WriteLcdData(uint8_t data)
{
   USIDR = data;
   USISR = (1 << USIOIF);                // clear counter and counter overflow interrupt flag
   while (!(USISR & (1 << USIOIF)) )
     95e:	76 99       	sbic	0x0e, 6	; 14
     960:	02 c0       	rjmp	.+4      	; 0x966 <WriteLcdData+0x10>
   {
      USICR = (1 << USIWM0) | (1 << USICS1) | (1 << USICLK) | (1 << USITC);
     962:	8d b9       	out	0x0d, r24	; 13
     964:	fc cf       	rjmp	.-8      	; 0x95e <WriteLcdData+0x8>
   }
}
     966:	08 95       	ret

00000968 <WriteLcdCommand>:

static void WriteLcdCommand(uint8_t data)
{
   PORTB &= ~(1 << DDB1);  // PB1: select command register (low)
     968:	c1 98       	cbi	0x18, 1	; 24
   WriteLcdData(data);
     96a:	f5 df       	rcall	.-22     	; 0x956 <WriteLcdData>
   PORTB |= (1 << DDB1);   // PB1: select data register (high)
     96c:	c1 9a       	sbi	0x18, 1	; 24
     96e:	08 95       	ret

00000970 <SetAddress>:
}

static void SetAddress(uint8_t x, uint8_t y)
{
     970:	cf 93       	push	r28
     972:	c8 2f       	mov	r28, r24
   WriteLcdCommand(0x40 + y); // 0 <= y <= 5; bytes
     974:	80 e4       	ldi	r24, 0x40	; 64
     976:	86 0f       	add	r24, r22
     978:	f7 df       	rcall	.-18     	; 0x968 <WriteLcdCommand>
   WriteLcdCommand(0x80 + x); // 0 <= x <= 83; pixels
     97a:	80 e8       	ldi	r24, 0x80	; 128
     97c:	8c 0f       	add	r24, r28
}
     97e:	cf 91       	pop	r28
}

static void SetAddress(uint8_t x, uint8_t y)
{
   WriteLcdCommand(0x40 + y); // 0 <= y <= 5; bytes
   WriteLcdCommand(0x80 + x); // 0 <= x <= 83; pixels
     980:	f3 cf       	rjmp	.-26     	; 0x968 <WriteLcdCommand>

00000982 <FindCharacter>:
{
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
     982:	ac 01       	movw	r20, r24
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     984:	fc 01       	movw	r30, r24
     986:	84 91       	lpm	r24, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     988:	90 e0       	ldi	r25, 0x00	; 0
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     98a:	22 e0       	ldi	r18, 0x02	; 2
     98c:	30 e0       	ldi	r19, 0x00	; 0

   for (uint8_t i = 0; i < nrCharacters; ++i)
     98e:	98 17       	cp	r25, r24
     990:	31 f0       	breq	.+12     	; 0x99e <FindCharacter+0x1c>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     992:	fa 01       	movw	r30, r20
     994:	e2 0f       	add	r30, r18
     996:	f3 1f       	adc	r31, r19
     998:	e4 91       	lpm	r30, Z
     99a:	e6 13       	cpse	r30, r22
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <FindCharacter+0x22>
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     99e:	c9 01       	movw	r24, r18
     9a0:	02 96       	adiw	r24, 0x02	; 2
     9a2:	08 95       	ret
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     9a4:	f9 01       	movw	r30, r18
     9a6:	31 96       	adiw	r30, 0x01	; 1
     9a8:	e4 0f       	add	r30, r20
     9aa:	f5 1f       	adc	r31, r21
     9ac:	e4 91       	lpm	r30, Z
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	32 96       	adiw	r30, 0x02	; 2
     9b2:	2e 0f       	add	r18, r30
     9b4:	3f 1f       	adc	r19, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     9b6:	9f 5f       	subi	r25, 0xFF	; 255
     9b8:	ea cf       	rjmp	.-44     	; 0x98e <FindCharacter+0xc>

000009ba <ReadStringFromRam>:
}

static char ReadStringFromRam(const char* address)
{
   return *address;
}
     9ba:	fc 01       	movw	r30, r24
     9bc:	80 81       	ld	r24, Z
     9be:	08 95       	ret

000009c0 <ReadStringFromEeprom>:
   return pgm_read_byte_near(&(font[characterIndex + position]));
}

static char ReadStringFromEeprom(const char* address)
{
   return eeprom_read_byte((uint8_t *)address);
     9c0:	e7 c7       	rjmp	.+4046   	; 0x1990 <eeprom_read_byte>

000009c2 <EnableLcd.part.0>:

void EnableLcd(bool enable)
{
   if (enable)
   {
      PORTB &= ~(1 << PORTB0);
     9c2:	c0 98       	cbi	0x18, 0	; 24
      active = 10;
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <active>
     9ca:	08 95       	ret

000009cc <Write16PixelString>:
   }
   SetAddress(x, y / 8);
}

void static inline Write16PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
     9cc:	3f 92       	push	r3
     9ce:	4f 92       	push	r4
     9d0:	5f 92       	push	r5
     9d2:	6f 92       	push	r6
     9d4:	7f 92       	push	r7
     9d6:	8f 92       	push	r8
     9d8:	9f 92       	push	r9
     9da:	af 92       	push	r10
     9dc:	bf 92       	push	r11
     9de:	cf 92       	push	r12
     9e0:	df 92       	push	r13
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	7c 01       	movw	r14, r24
     9f0:	76 2e       	mov	r7, r22
     9f2:	b4 2e       	mov	r11, r20
     9f4:	69 01       	movw	r12, r18
     9f6:	e5 df       	rcall	.-54     	; 0x9c2 <EnableLcd.part.0>
   uint8_t data, value, ch, index = 0;

   EnableLcd(true);
   SetAddress(x, y / 8);
     9f8:	6b 2c       	mov	r6, r11
     9fa:	66 94       	lsr	r6
     9fc:	66 94       	lsr	r6
     9fe:	66 94       	lsr	r6
     a00:	66 2d       	mov	r22, r6
     a02:	87 2d       	mov	r24, r7
     a04:	b5 df       	rcall	.-150    	; 0x970 <SetAddress>

   ch = source(&text[index++]);
     a06:	c8 01       	movw	r24, r16
     a08:	f6 01       	movw	r30, r12
     a0a:	09 95       	icall
     a0c:	58 2e       	mov	r5, r24
     a0e:	88 24       	eor	r8, r8
     a10:	83 94       	inc	r8
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     a12:	fb 2d       	mov	r31, r11
     a14:	f7 70       	andi	r31, 0x07	; 7
     a16:	af 2e       	mov	r10, r31

   EnableLcd(true);
   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while (ch != 0)
     a18:	55 20       	and	r5, r5
     a1a:	41 f1       	breq	.+80     	; 0xa6c <Write16PixelString+0xa0>
   {
      uint16_t characterIndex = FindCharacter(font, ch);
     a1c:	65 2d       	mov	r22, r5
     a1e:	c7 01       	movw	r24, r14
     a20:	b0 df       	rcall	.-160    	; 0x982 <FindCharacter>
     a22:	ec 01       	movw	r28, r24
   return index + 2;
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     a24:	fc 01       	movw	r30, r24
     a26:	31 97       	sbiw	r30, 0x01	; 1
     a28:	ee 0d       	add	r30, r14
     a2a:	ff 1d       	adc	r31, r15
     a2c:	94 90       	lpm	r9, Z

   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     a2e:	96 94       	lsr	r9
      ch = source(&text[index++]);
     a30:	44 24       	eor	r4, r4
     a32:	43 94       	inc	r4
     a34:	48 0c       	add	r4, r8
     a36:	c8 01       	movw	r24, r16
     a38:	88 0d       	add	r24, r8
     a3a:	91 1d       	adc	r25, r1
     a3c:	f6 01       	movw	r30, r12
     a3e:	09 95       	icall
     a40:	58 2e       	mov	r5, r24
     a42:	ce 0d       	add	r28, r14
     a44:	df 1d       	adc	r29, r15
      for (uint8_t n = 0; n < nrColumns; ++n)
     a46:	81 2c       	mov	r8, r1
     a48:	89 14       	cp	r8, r9
     a4a:	59 f0       	breq	.+22     	; 0xa62 <Write16PixelString+0x96>
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     a4c:	fe 01       	movw	r30, r28
     a4e:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     a50:	0a 2c       	mov	r0, r10
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <Write16PixelString+0x8a>
     a54:	88 0f       	add	r24, r24
     a56:	0a 94       	dec	r0
     a58:	ea f7       	brpl	.-6      	; 0xa54 <Write16PixelString+0x88>
     a5a:	7d df       	rcall	.-262    	; 0x956 <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     a5c:	83 94       	inc	r8
     a5e:	22 96       	adiw	r28, 0x02	; 2
     a60:	f3 cf       	rjmp	.-26     	; 0xa48 <Write16PixelString+0x7c>
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	ff dc       	rcall	.-1538   	; 0x466 <TaskSleep>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     a68:	84 2c       	mov	r8, r4
     a6a:	d6 cf       	rjmp	.-84     	; 0xa18 <Write16PixelString+0x4c>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   SetAddress(x, y / 8 + 1);
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	66 0d       	add	r22, r6
     a70:	87 2d       	mov	r24, r7
     a72:	7e df       	rcall	.-260    	; 0x970 <SetAddress>
   index = 0;
   ch = source(&text[index++]);
     a74:	c8 01       	movw	r24, r16
     a76:	f6 01       	movw	r30, r12
     a78:	09 95       	icall
     a7a:	58 2e       	mov	r5, r24
     a7c:	33 24       	eor	r3, r3
     a7e:	33 94       	inc	r3
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
     a80:	db 2d       	mov	r29, r11
     a82:	d7 70       	andi	r29, 0x07	; 7
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	5c 01       	movw	r10, r24
     a8a:	ad 1a       	sub	r10, r29
     a8c:	b1 08       	sbc	r11, r1
   }

   SetAddress(x, y / 8 + 1);
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
     a8e:	55 20       	and	r5, r5
     a90:	a1 f1       	breq	.+104    	; 0xafa <Write16PixelString+0x12e>
   {
      uint16_t characterIndex = FindCharacter(font, ch);
     a92:	65 2d       	mov	r22, r5
     a94:	c7 01       	movw	r24, r14
     a96:	75 df       	rcall	.-278    	; 0x982 <FindCharacter>
     a98:	4c 01       	movw	r8, r24
   return index + 2;
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     a9a:	fc 01       	movw	r30, r24
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	ee 0d       	add	r30, r14
     aa0:	ff 1d       	adc	r31, r15
     aa2:	c4 91       	lpm	r28, Z
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     aa4:	c6 95       	lsr	r28
      ch = source(&text[index++]);
     aa6:	44 24       	eor	r4, r4
     aa8:	43 94       	inc	r4
     aaa:	43 0c       	add	r4, r3
     aac:	c8 01       	movw	r24, r16
     aae:	83 0d       	add	r24, r3
     ab0:	91 1d       	adc	r25, r1
     ab2:	f6 01       	movw	r30, r12
     ab4:	09 95       	icall
     ab6:	58 2e       	mov	r5, r24
     ab8:	8e 0c       	add	r8, r14
     aba:	9f 1c       	adc	r9, r15
      for (uint8_t n = 0; n < nrColumns; ++n)
     abc:	31 2c       	mov	r3, r1
     abe:	3c 16       	cp	r3, r28
     ac0:	b9 f0       	breq	.+46     	; 0xaf0 <Write16PixelString+0x124>
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     ac2:	f4 01       	movw	r30, r8
     ac4:	24 91       	lpm	r18, Z
     ac6:	31 96       	adiw	r30, 0x01	; 1
     ac8:	84 91       	lpm	r24, Z
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	0a 2c       	mov	r0, r10
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <Write16PixelString+0x108>
     ad0:	35 95       	asr	r19
     ad2:	27 95       	ror	r18
     ad4:	0a 94       	dec	r0
     ad6:	e2 f7       	brpl	.-8      	; 0xad0 <Write16PixelString+0x104>
     ad8:	0d 2e       	mov	r0, r29
     ada:	01 c0       	rjmp	.+2      	; 0xade <Write16PixelString+0x112>
     adc:	88 0f       	add	r24, r24
     ade:	0a 94       	dec	r0
     ae0:	ea f7       	brpl	.-6      	; 0xadc <Write16PixelString+0x110>
     ae2:	82 2b       	or	r24, r18
     ae4:	38 df       	rcall	.-400    	; 0x956 <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     ae6:	33 94       	inc	r3
     ae8:	f2 e0       	ldi	r31, 0x02	; 2
     aea:	8f 0e       	add	r8, r31
     aec:	91 1c       	adc	r9, r1
     aee:	e7 cf       	rjmp	.-50     	; 0xabe <Write16PixelString+0xf2>
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	b8 dc       	rcall	.-1680   	; 0x466 <TaskSleep>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     af6:	34 2c       	mov	r3, r4
     af8:	ca cf       	rjmp	.-108    	; 0xa8e <Write16PixelString+0xc2>
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
   }
   SetAddress(x, y / 8);
     afa:	66 2d       	mov	r22, r6
     afc:	87 2d       	mov	r24, r7
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	9f 90       	pop	r9
     b14:	8f 90       	pop	r8
     b16:	7f 90       	pop	r7
     b18:	6f 90       	pop	r6
     b1a:	5f 90       	pop	r5
     b1c:	4f 90       	pop	r4
     b1e:	3f 90       	pop	r3
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
   }
   SetAddress(x, y / 8);
     b20:	27 cf       	rjmp	.-434    	; 0x970 <SetAddress>

00000b22 <Write8PixelString>:
{
   return *address;
}

static inline void Write8PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
     b22:	3f 92       	push	r3
     b24:	4f 92       	push	r4
     b26:	5f 92       	push	r5
     b28:	6f 92       	push	r6
     b2a:	7f 92       	push	r7
     b2c:	8f 92       	push	r8
     b2e:	9f 92       	push	r9
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	ec 01       	movw	r28, r24
     b46:	56 2e       	mov	r5, r22
     b48:	94 2e       	mov	r9, r20
     b4a:	79 01       	movw	r14, r18
     b4c:	3a df       	rcall	.-396    	; 0x9c2 <EnableLcd.part.0>
   uint8_t data, value, ch, index = 0;

   EnableLcd(true);
   SetAddress(x, y / 8);
     b4e:	69 2c       	mov	r6, r9
     b50:	66 94       	lsr	r6
     b52:	66 94       	lsr	r6
     b54:	66 94       	lsr	r6
     b56:	66 2d       	mov	r22, r6
     b58:	85 2d       	mov	r24, r5
     b5a:	0a df       	rcall	.-492    	; 0x970 <SetAddress>

   ch = source(&text[index++]);
     b5c:	c8 01       	movw	r24, r16
     b5e:	f7 01       	movw	r30, r14
     b60:	09 95       	icall
     b62:	78 2e       	mov	r7, r24
     b64:	bb 24       	eor	r11, r11
     b66:	b3 94       	inc	r11
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
     b68:	f9 2d       	mov	r31, r9
     b6a:	f7 70       	andi	r31, 0x07	; 7
     b6c:	4f 2e       	mov	r4, r31

   EnableLcd(true);
   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	87 0d       	add	r24, r7
     b72:	8e 3f       	cpi	r24, 0xFE	; 254
     b74:	58 f5       	brcc	.+86     	; 0xbcc <Write8PixelString+0xaa>
   {
      uint16_t characterIndex = FindCharacter(font, ch);
     b76:	67 2d       	mov	r22, r7
     b78:	ce 01       	movw	r24, r28
     b7a:	03 df       	rcall	.-506    	; 0x982 <FindCharacter>
     b7c:	6c 01       	movw	r12, r24
   return index + 2;
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     b7e:	fc 01       	movw	r30, r24
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	ec 0f       	add	r30, r28
     b84:	fd 1f       	adc	r31, r29
     b86:	84 90       	lpm	r8, Z
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
     b88:	33 24       	eor	r3, r3
     b8a:	33 94       	inc	r3
     b8c:	3b 0c       	add	r3, r11
     b8e:	c8 01       	movw	r24, r16
     b90:	8b 0d       	add	r24, r11
     b92:	91 1d       	adc	r25, r1
     b94:	f7 01       	movw	r30, r14
     b96:	09 95       	icall
     b98:	78 2e       	mov	r7, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     b9a:	a1 2c       	mov	r10, r1
     b9c:	b1 2c       	mov	r11, r1
     b9e:	a8 14       	cp	r10, r8
     ba0:	80 f4       	brcc	.+32     	; 0xbc2 <Write8PixelString+0xa0>
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     ba2:	f5 01       	movw	r30, r10
     ba4:	ec 0d       	add	r30, r12
     ba6:	fd 1d       	adc	r31, r13
     ba8:	ec 0f       	add	r30, r28
     baa:	fd 1f       	adc	r31, r29
     bac:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
     bae:	04 2c       	mov	r0, r4
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <Write8PixelString+0x92>
     bb2:	88 0f       	add	r24, r24
     bb4:	0a 94       	dec	r0
     bb6:	ea f7       	brpl	.-6      	; 0xbb2 <Write8PixelString+0x90>
     bb8:	ce de       	rcall	.-612    	; 0x956 <WriteLcdData>
     bba:	ff ef       	ldi	r31, 0xFF	; 255
     bbc:	af 1a       	sub	r10, r31
     bbe:	bf 0a       	sbc	r11, r31
     bc0:	ee cf       	rjmp	.-36     	; 0xb9e <Write8PixelString+0x7c>
      }
      TaskSleep(0);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	4f dc       	rcall	.-1890   	; 0x466 <TaskSleep>
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
     bc8:	b3 2c       	mov	r11, r3
     bca:	d1 cf       	rjmp	.-94     	; 0xb6e <Write8PixelString+0x4c>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   if (y % 8 > 0)
     bcc:	89 2d       	mov	r24, r9
     bce:	87 70       	andi	r24, 0x07	; 7
     bd0:	98 2e       	mov	r9, r24
     bd2:	a1 f4       	brne	.+40     	; 0xbfc <Write8PixelString+0xda>
            WriteLcdData(data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
     bd4:	66 2d       	mov	r22, r6
     bd6:	85 2d       	mov	r24, r5
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	8f 90       	pop	r8
     bf0:	7f 90       	pop	r7
     bf2:	6f 90       	pop	r6
     bf4:	5f 90       	pop	r5
     bf6:	4f 90       	pop	r4
     bf8:	3f 90       	pop	r3
            WriteLcdData(data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
     bfa:	ba ce       	rjmp	.-652    	; 0x970 <SetAddress>
   }

   if (y % 8 > 0)
   {
      index = 0;
      ch = source(&text[index++]);
     bfc:	c8 01       	movw	r24, r16
     bfe:	f7 01       	movw	r30, r14
     c00:	09 95       	icall
     c02:	48 2e       	mov	r4, r24
      SetAddress(x, y / 8 + 1);
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	66 0d       	add	r22, r6
     c08:	85 2d       	mov	r24, r5
     c0a:	b2 de       	rcall	.-668    	; 0x970 <SetAddress>
   }

   if (y % 8 > 0)
   {
      index = 0;
      ch = source(&text[index++]);
     c0c:	dd 24       	eor	r13, r13
     c0e:	d3 94       	inc	r13
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
     c10:	88 e0       	ldi	r24, 0x08	; 8
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	5c 01       	movw	r10, r24
     c16:	a9 18       	sub	r10, r9
     c18:	b1 08       	sbc	r11, r1
   if (y % 8 > 0)
   {
      index = 0;
      ch = source(&text[index++]);
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
     c1a:	44 20       	and	r4, r4
     c1c:	d9 f2       	breq	.-74     	; 0xbd4 <Write8PixelString+0xb2>
      {
         uint16_t characterIndex = FindCharacter(font, ch);
     c1e:	64 2d       	mov	r22, r4
     c20:	ce 01       	movw	r24, r28
     c22:	af de       	rcall	.-674    	; 0x982 <FindCharacter>
     c24:	4c 01       	movw	r8, r24
   return index + 2;
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     c26:	fc 01       	movw	r30, r24
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	ec 0f       	add	r30, r28
     c2c:	fd 1f       	adc	r31, r29
     c2e:	74 90       	lpm	r7, Z
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
     c30:	33 24       	eor	r3, r3
     c32:	33 94       	inc	r3
     c34:	3d 0c       	add	r3, r13
     c36:	c8 01       	movw	r24, r16
     c38:	8d 0d       	add	r24, r13
     c3a:	91 1d       	adc	r25, r1
     c3c:	f7 01       	movw	r30, r14
     c3e:	09 95       	icall
     c40:	48 2e       	mov	r4, r24
         for (uint8_t n = 0; n < nrColumns; ++n)
     c42:	c1 2c       	mov	r12, r1
     c44:	d1 2c       	mov	r13, r1
     c46:	c7 14       	cp	r12, r7
     c48:	90 f4       	brcc	.+36     	; 0xc6e <Write8PixelString+0x14c>
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     c4a:	f6 01       	movw	r30, r12
     c4c:	e8 0d       	add	r30, r8
     c4e:	f9 1d       	adc	r31, r9
     c50:	ec 0f       	add	r30, r28
     c52:	fd 1f       	adc	r31, r29
     c54:	84 91       	lpm	r24, Z
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0a 2c       	mov	r0, r10
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <Write8PixelString+0x13e>
     c5c:	95 95       	asr	r25
     c5e:	87 95       	ror	r24
     c60:	0a 94       	dec	r0
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <Write8PixelString+0x13a>
            WriteLcdData(data);
     c64:	78 de       	rcall	.-784    	; 0x956 <WriteLcdData>
     c66:	ff ef       	ldi	r31, 0xFF	; 255
     c68:	cf 1a       	sub	r12, r31
     c6a:	df 0a       	sbc	r13, r31
     c6c:	ec cf       	rjmp	.-40     	; 0xc46 <Write8PixelString+0x124>
         }
         TaskSleep(0);
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	f9 db       	rcall	.-2062   	; 0x466 <TaskSleep>
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
     c74:	d3 2c       	mov	r13, r3
     c76:	d1 cf       	rjmp	.-94     	; 0xc1a <Write8PixelString+0xf8>

00000c78 <LcdSetup>:

uint8_t active;

void LcdSetup(void)
{
   PORTB &= ~((1 << PORTB1) | (1 << PORTB2));
     c78:	88 b3       	in	r24, 0x18	; 24
     c7a:	89 7f       	andi	r24, 0xF9	; 249
     c7c:	88 bb       	out	0x18, r24	; 24
   PORTB |= (1 << PORTB0);
     c7e:	c0 9a       	sbi	0x18, 0	; 24
   DDRB |= (1 << DDB0)      // PB0; chip enable active low
     c80:	87 b3       	in	r24, 0x17	; 23
     c82:	87 60       	ori	r24, 0x07	; 7
     c84:	87 bb       	out	0x17, r24	; 23
        |  (1 << DDB1)      // PB1: data register (high) / command register (low)
        |  (1 << DDB2);     // PB2: reset active low

   USICR = (1 << USICS1) | (1 << USICLK);
     c86:	8a e0       	ldi	r24, 0x0A	; 10
     c88:	8d b9       	out	0x0d, r24	; 13
   DDRA |= (1 << PORTA4)    // uclk as output
     c8a:	8a b3       	in	r24, 0x1a	; 26
     c8c:	80 63       	ori	r24, 0x30	; 48
     c8e:	8a bb       	out	0x1a, r24	; 26
        |  (1 << PORTA5);   // LCD Din as output

   PORTB |= (1 << PORTB2);  // nRESET high
     c90:	c2 9a       	sbi	0x18, 2	; 24
     c92:	08 95       	ret

00000c94 <EnableLcd>:
}

void EnableLcd(bool enable)
{
   if (enable)
     c94:	81 11       	cpse	r24, r1
     c96:	95 ce       	rjmp	.-726    	; 0x9c2 <EnableLcd.part.0>
      active = 10;
   }
   else
   {
      // enableing the LCD also turns on the backlight
      PORTB |= (1 << PORTB0);
     c98:	c0 9a       	sbi	0x18, 0	; 24
     c9a:	08 95       	ret

00000c9c <Clear>:
   WriteLcdCommand(0x40 + y); // 0 <= y <= 5; bytes
   WriteLcdCommand(0x80 + x); // 0 <= x <= 83; pixels
}

void Clear(void)
{
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	90 de       	rcall	.-736    	; 0x9c2 <EnableLcd.part.0>
   EnableLcd(true);
   WriteLcdCommand(8);    // display control; switch display off
     ca2:	88 e0       	ldi	r24, 0x08	; 8
     ca4:	61 de       	rcall	.-830    	; 0x968 <WriteLcdCommand>

   SetAddress(0, 0);
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	62 de       	rcall	.-828    	; 0x970 <SetAddress>
     cac:	c8 ef       	ldi	r28, 0xF8	; 248
     cae:	d1 e0       	ldi	r29, 0x01	; 1
   for (uint16_t i = 0; i < 84 * 48 / 8; ++i)
   {
      WriteLcdData(0);
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	51 de       	rcall	.-862    	; 0x956 <WriteLcdData>
     cb4:	21 97       	sbiw	r28, 0x01	; 1
{
   EnableLcd(true);
   WriteLcdCommand(8);    // display control; switch display off

   SetAddress(0, 0);
   for (uint16_t i = 0; i < 84 * 48 / 8; ++i)
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <Clear+0x14>
   {
      WriteLcdData(0);
   }
   WriteLcdCommand(0x0C); // display control; switch display on
     cb8:	8c e0       	ldi	r24, 0x0C	; 12
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
   SetAddress(0, 0);
   for (uint16_t i = 0; i < 84 * 48 / 8; ++i)
   {
      WriteLcdData(0);
   }
   WriteLcdCommand(0x0C); // display control; switch display on
     cbe:	54 ce       	rjmp	.-856    	; 0x968 <WriteLcdCommand>

00000cc0 <LcdInitialize>:
}

void LcdInitialize(void)
{
     cc0:	80 de       	rcall	.-768    	; 0x9c2 <EnableLcd.part.0>
   EnableLcd(true);
   WriteLcdCommand(0x21); // function set; H = 1
     cc2:	81 e2       	ldi	r24, 0x21	; 33
     cc4:	51 de       	rcall	.-862    	; 0x968 <WriteLcdCommand>
   WriteLcdCommand(0x14); // bias value 4 (1 : 48)
     cc6:	84 e1       	ldi	r24, 0x14	; 20
     cc8:	4f de       	rcall	.-866    	; 0x968 <WriteLcdCommand>
   WriteLcdCommand(0xb2); // set Vop to 3 + 50 * 0.06 = 6V
     cca:	82 eb       	ldi	r24, 0xB2	; 178
     ccc:	4d de       	rcall	.-870    	; 0x968 <WriteLcdCommand>
   WriteLcdCommand(0x06); // temperature control
     cce:	86 e0       	ldi	r24, 0x06	; 6
     cd0:	4b de       	rcall	.-874    	; 0x968 <WriteLcdCommand>
   WriteLcdCommand(0x20); // function set; H = 0, horizontal addressing mode
     cd2:	80 e2       	ldi	r24, 0x20	; 32
     cd4:	49 de       	rcall	.-878    	; 0x968 <WriteLcdCommand>
   Clear();               // clear ram
     cd6:	e2 cf       	rjmp	.-60     	; 0xc9c <Clear>

00000cd8 <WriteString>:
   }
   SetAddress(x, y / 8);
}

void WriteString(const uint8_t *font, const uint8_t x, const uint8_t y, char* text)
{
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	89 01       	movw	r16, r18
   Clear();               // clear ram
}

static inline uint8_t GetNrRows(const uint8_t *font)
{
   return pgm_read_byte_near(&(font[1]));
     cde:	fc 01       	movw	r30, r24
     ce0:	31 96       	adiw	r30, 0x01	; 1
     ce2:	e4 91       	lpm	r30, Z

void WriteString(const uint8_t *font, const uint8_t x, const uint8_t y, char* text)
{
   if (GetNrRows(font) > 8)
   {
      Write16PixelString(font, x, y, ReadStringFromRam, text);
     ce4:	2d ed       	ldi	r18, 0xDD	; 221
     ce6:	34 e0       	ldi	r19, 0x04	; 4
   SetAddress(x, y / 8);
}

void WriteString(const uint8_t *font, const uint8_t x, const uint8_t y, char* text)
{
   if (GetNrRows(font) > 8)
     ce8:	e9 30       	cpi	r30, 0x09	; 9
     cea:	10 f0       	brcs	.+4      	; 0xcf0 <WriteString+0x18>
   {
      Write16PixelString(font, x, y, ReadStringFromRam, text);
     cec:	6f de       	rcall	.-802    	; 0x9cc <Write16PixelString>
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <WriteString+0x1a>
   }
   else
   {
      Write8PixelString(font, x, y, ReadStringFromRam, text);
     cf0:	18 df       	rcall	.-464    	; 0xb22 <Write8PixelString>
   }
}
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	08 95       	ret

00000cf8 <WriteStaticString>:

void WriteStaticString(const uint8_t *font, uint8_t x, uint8_t y, const char* text)
{
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	89 01       	movw	r16, r18
   Clear();               // clear ram
}

static inline uint8_t GetNrRows(const uint8_t *font)
{
   return pgm_read_byte_near(&(font[1]));
     cfe:	fc 01       	movw	r30, r24
     d00:	31 96       	adiw	r30, 0x01	; 1
     d02:	e4 91       	lpm	r30, Z

void WriteStaticString(const uint8_t *font, uint8_t x, uint8_t y, const char* text)
{
   if (GetNrRows(font) > 8)
   {
      Write16PixelString(font, x, y, ReadStringFromEeprom, text);
     d04:	20 ee       	ldi	r18, 0xE0	; 224
     d06:	34 e0       	ldi	r19, 0x04	; 4
   }
}

void WriteStaticString(const uint8_t *font, uint8_t x, uint8_t y, const char* text)
{
   if (GetNrRows(font) > 8)
     d08:	e9 30       	cpi	r30, 0x09	; 9
     d0a:	10 f0       	brcs	.+4      	; 0xd10 <WriteStaticString+0x18>
   {
      Write16PixelString(font, x, y, ReadStringFromEeprom, text);
     d0c:	5f de       	rcall	.-834    	; 0x9cc <Write16PixelString>
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <WriteStaticString+0x1a>
   }
   else
   {
      Write8PixelString(font, x, y, ReadStringFromEeprom, text);
     d10:	08 df       	rcall	.-496    	; 0xb22 <Write8PixelString>
   }
}
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	08 95       	ret

00000d18 <WriteInverted8PixelString>:

void WriteInverted8PixelString(const uint8_t *font, const uint8_t x, uint8_t y, const char* text)
{
     d18:	5f 92       	push	r5
     d1a:	6f 92       	push	r6
     d1c:	7f 92       	push	r7
     d1e:	8f 92       	push	r8
     d20:	9f 92       	push	r9
     d22:	af 92       	push	r10
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	ec 01       	movw	r28, r24
     d38:	76 2e       	mov	r7, r22
     d3a:	b4 2e       	mov	r11, r20
     d3c:	89 01       	movw	r16, r18
     d3e:	41 de       	rcall	.-894    	; 0x9c2 <EnableLcd.part.0>
   uint8_t data, value, ch, index = 0;

   EnableLcd(true);
   SetAddress(x, y / 8);
     d40:	8b 2c       	mov	r8, r11
     d42:	86 94       	lsr	r8
     d44:	86 94       	lsr	r8
     d46:	86 94       	lsr	r8
     d48:	68 2d       	mov	r22, r8
     d4a:	87 2d       	mov	r24, r7
     d4c:	11 de       	rcall	.-990    	; 0x970 <SetAddress>

   ch = eeprom_read_byte(&text[index++]);
     d4e:	c8 01       	movw	r24, r16
     d50:	1f d6       	rcall	.+3134   	; 0x1990 <eeprom_read_byte>
     d52:	98 2e       	mov	r9, r24
     d54:	dd 24       	eor	r13, r13
     d56:	d3 94       	inc	r13
      ch = eeprom_read_byte(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(~data);
     d58:	8b 2d       	mov	r24, r11
     d5a:	87 70       	andi	r24, 0x07	; 7
     d5c:	68 2e       	mov	r6, r24

   EnableLcd(true);
   SetAddress(x, y / 8);

   ch = eeprom_read_byte(&text[index++]);
   while (ch != 0)
     d5e:	99 20       	and	r9, r9
     d60:	59 f1       	breq	.+86     	; 0xdb8 <WriteInverted8PixelString+0xa0>
   {
      uint16_t characterIndex = FindCharacter(font, ch);
     d62:	69 2d       	mov	r22, r9
     d64:	ce 01       	movw	r24, r28
     d66:	0d de       	rcall	.-998    	; 0x982 <FindCharacter>
     d68:	7c 01       	movw	r14, r24
   return index + 2;
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     d6a:	fc 01       	movw	r30, r24
     d6c:	31 97       	sbiw	r30, 0x01	; 1
     d6e:	ec 0f       	add	r30, r28
     d70:	fd 1f       	adc	r31, r29
     d72:	a4 90       	lpm	r10, Z
   ch = eeprom_read_byte(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = eeprom_read_byte(&text[index++]);
     d74:	55 24       	eor	r5, r5
     d76:	53 94       	inc	r5
     d78:	5d 0c       	add	r5, r13
     d7a:	c8 01       	movw	r24, r16
     d7c:	8d 0d       	add	r24, r13
     d7e:	91 1d       	adc	r25, r1
     d80:	07 d6       	rcall	.+3086   	; 0x1990 <eeprom_read_byte>
     d82:	98 2e       	mov	r9, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     d84:	c1 2c       	mov	r12, r1
     d86:	d1 2c       	mov	r13, r1
     d88:	ca 14       	cp	r12, r10
     d8a:	88 f4       	brcc	.+34     	; 0xdae <WriteInverted8PixelString+0x96>
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     d8c:	f6 01       	movw	r30, r12
     d8e:	ee 0d       	add	r30, r14
     d90:	ff 1d       	adc	r31, r15
     d92:	ec 0f       	add	r30, r28
     d94:	fd 1f       	adc	r31, r29
     d96:	84 91       	lpm	r24, Z
      ch = eeprom_read_byte(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(~data);
     d98:	06 2c       	mov	r0, r6
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <WriteInverted8PixelString+0x86>
     d9c:	88 0f       	add	r24, r24
     d9e:	0a 94       	dec	r0
     da0:	ea f7       	brpl	.-6      	; 0xd9c <WriteInverted8PixelString+0x84>
     da2:	80 95       	com	r24
     da4:	d8 dd       	rcall	.-1104   	; 0x956 <WriteLcdData>
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	c8 1a       	sub	r12, r24
     daa:	d8 0a       	sbc	r13, r24
     dac:	ed cf       	rjmp	.-38     	; 0xd88 <WriteInverted8PixelString+0x70>
      }
      TaskSleep(0);
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	59 db       	rcall	.-2382   	; 0x466 <TaskSleep>
   ch = eeprom_read_byte(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = eeprom_read_byte(&text[index++]);
     db4:	d5 2c       	mov	r13, r5
     db6:	d3 cf       	rjmp	.-90     	; 0xd5e <WriteInverted8PixelString+0x46>
         WriteLcdData(~data);
      }
      TaskSleep(0);
   }

   if (y % 8 > 0)
     db8:	8b 2d       	mov	r24, r11
     dba:	87 70       	andi	r24, 0x07	; 7
     dbc:	b8 2e       	mov	r11, r24
     dbe:	91 f4       	brne	.+36     	; 0xde4 <WriteInverted8PixelString+0xcc>
            WriteLcdData(~data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
     dc0:	68 2d       	mov	r22, r8
     dc2:	87 2d       	mov	r24, r7
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	af 90       	pop	r10
     dd8:	9f 90       	pop	r9
     dda:	8f 90       	pop	r8
     ddc:	7f 90       	pop	r7
     dde:	6f 90       	pop	r6
     de0:	5f 90       	pop	r5
            WriteLcdData(~data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
     de2:	c6 cd       	rjmp	.-1140   	; 0x970 <SetAddress>
   }

   if (y % 8 > 0)
   {
      index = 0;
      ch = eeprom_read_byte(&text[index++]);
     de4:	c8 01       	movw	r24, r16
     de6:	d4 d5       	rcall	.+2984   	; 0x1990 <eeprom_read_byte>
     de8:	68 2e       	mov	r6, r24
      SetAddress(x, y / 8 + 1);
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	68 0d       	add	r22, r8
     dee:	87 2d       	mov	r24, r7
     df0:	bf dd       	rcall	.-1154   	; 0x970 <SetAddress>
   }

   if (y % 8 > 0)
   {
      index = 0;
      ch = eeprom_read_byte(&text[index++]);
     df2:	ff 24       	eor	r15, r15
     df4:	f3 94       	inc	r15
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
     df6:	88 e0       	ldi	r24, 0x08	; 8
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	6c 01       	movw	r12, r24
     dfc:	cb 18       	sub	r12, r11
     dfe:	d1 08       	sbc	r13, r1
   if (y % 8 > 0)
   {
      index = 0;
      ch = eeprom_read_byte(&text[index++]);
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
     e00:	66 20       	and	r6, r6
     e02:	f1 f2       	breq	.-68     	; 0xdc0 <WriteInverted8PixelString+0xa8>
      {
         uint16_t characterIndex = FindCharacter(font, ch);
     e04:	66 2d       	mov	r22, r6
     e06:	ce 01       	movw	r24, r28
     e08:	bc dd       	rcall	.-1160   	; 0x982 <FindCharacter>
     e0a:	5c 01       	movw	r10, r24
   return index + 2;
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     e0c:	fc 01       	movw	r30, r24
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	ec 0f       	add	r30, r28
     e12:	fd 1f       	adc	r31, r29
     e14:	94 90       	lpm	r9, Z
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
     e16:	55 24       	eor	r5, r5
     e18:	53 94       	inc	r5
     e1a:	5f 0c       	add	r5, r15
     e1c:	c8 01       	movw	r24, r16
     e1e:	8f 0d       	add	r24, r15
     e20:	91 1d       	adc	r25, r1
     e22:	b6 d5       	rcall	.+2924   	; 0x1990 <eeprom_read_byte>
     e24:	68 2e       	mov	r6, r24
         for (uint8_t n = 0; n < nrColumns; ++n)
     e26:	e1 2c       	mov	r14, r1
     e28:	f1 2c       	mov	r15, r1
     e2a:	e9 14       	cp	r14, r9
     e2c:	98 f4       	brcc	.+38     	; 0xe54 <WriteInverted8PixelString+0x13c>
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     e2e:	f7 01       	movw	r30, r14
     e30:	ea 0d       	add	r30, r10
     e32:	fb 1d       	adc	r31, r11
     e34:	ec 0f       	add	r30, r28
     e36:	fd 1f       	adc	r31, r29
     e38:	84 91       	lpm	r24, Z
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0c 2c       	mov	r0, r12
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <WriteInverted8PixelString+0x12c>
     e40:	95 95       	asr	r25
     e42:	87 95       	ror	r24
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <WriteInverted8PixelString+0x128>
            WriteLcdData(~data);
     e48:	80 95       	com	r24
     e4a:	85 dd       	rcall	.-1270   	; 0x956 <WriteLcdData>
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	e8 1a       	sub	r14, r24
     e50:	f8 0a       	sbc	r15, r24
     e52:	eb cf       	rjmp	.-42     	; 0xe2a <WriteInverted8PixelString+0x112>
         }
         TaskSleep(0);
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	06 db       	rcall	.-2548   	; 0x466 <TaskSleep>
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
     e5a:	f5 2c       	mov	r15, r5
     e5c:	d1 cf       	rjmp	.-94     	; 0xe00 <WriteInverted8PixelString+0xe8>

00000e5e <HandleBacklight>:
   SetAddress(x, y / 8);
}

void HandleBacklight(void)
{
   if (active > 0)
     e5e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <active>
     e62:	88 23       	and	r24, r24
     e64:	21 f0       	breq	.+8      	; 0xe6e <HandleBacklight+0x10>
   {
      active--;
     e66:	81 50       	subi	r24, 0x01	; 1
     e68:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <active>
     e6c:	08 95       	ret
   }
   else
   {
      EnableLcd(false);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	11 cf       	rjmp	.-478    	; 0xc94 <EnableLcd>

00000e72 <SetKeyHandler>:
   }
}

void SetKeyHandler(void (*handler)(enum PressedButtonState))
{
   keyHandler = handler;
     e72:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <keyHandler+0x1>
     e76:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <keyHandler>
     e7a:	08 95       	ret

00000e7c <ButtonSetup>:
}

void ButtonSetup(void)
{
   LcdSetup();
     e7c:	fd de       	rcall	.-518    	; 0xc78 <LcdSetup>
   LcdInitialize();
     e7e:	20 cf       	rjmp	.-448    	; 0xcc0 <LcdInitialize>

00000e80 <ButtonTask>:
         else
         {
            keyHandler(pressedButton + 2);
         }
      }
      pressedButton = PressedButtonNone;
     e80:	d9 e0       	ldi	r29, 0x09	; 9
   if (oldAdcButton != newAdcButton)
   {
      count = 0;
      if (keyHandler)
      {
         if (pressedButton % 3 == 1)
     e82:	13 e0       	ldi	r17, 0x03	; 3
         pressedButton++;
         if (keyHandler) keyHandler(pressedButton);
      }
      else if (count > LONGPRESS)
      {
        count = LONGPRESS + 1;
     e84:	05 e6       	ldi	r16, 0x65	; 101

static inline void CheckButtonPress(void)
{
   static enum ButtonAdc oldAdcButton = ButtonAdcNone;
   static uint8_t count = 0;
   enum ButtonAdc newAdcButton = GetAdcButton();
     e86:	a9 dc       	rcall	.-1710   	; 0x7da <GetAdcButton>
     e88:	c8 2f       	mov	r28, r24

   if (oldAdcButton != newAdcButton)
     e8a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <oldAdcButton.1580>
     e8e:	c8 17       	cp	r28, r24
     e90:	c1 f0       	breq	.+48     	; 0xec2 <ButtonTask+0x42>
   {
      count = 0;
     e92:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <count.1581>
      if (keyHandler)
     e96:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <keyHandler>
     e9a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <keyHandler+0x1>
     e9e:	30 97       	sbiw	r30, 0x00	; 0
     ea0:	61 f0       	breq	.+24     	; 0xeba <ButtonTask+0x3a>
      {
         if (pressedButton % 3 == 1)
     ea2:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <pressedButton>
     ea6:	82 2f       	mov	r24, r18
     ea8:	61 2f       	mov	r22, r17
     eaa:	d8 d4       	rcall	.+2480   	; 0x185c <__udivmodqi4>
     eac:	91 30       	cpi	r25, 0x01	; 1
     eae:	11 f4       	brne	.+4      	; 0xeb4 <ButtonTask+0x34>
         {
            keyHandler(PressedButtonNone);
     eb0:	89 e0       	ldi	r24, 0x09	; 9
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <ButtonTask+0x38>
         }
         else
         {
            keyHandler(pressedButton + 2);
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	82 0f       	add	r24, r18
     eb8:	09 95       	icall
         }
      }
      pressedButton = PressedButtonNone;
     eba:	d0 93 62 00 	sts	0x0062, r29	; 0x800062 <pressedButton>
      oldAdcButton = newAdcButton;
     ebe:	c0 93 6d 00 	sts	0x006D, r28	; 0x80006d <oldAdcButton.1580>
   }

   if (newAdcButton != ButtonAdcNone)
     ec2:	cc 23       	and	r28, r28
     ec4:	29 f1       	breq	.+74     	; 0xf10 <ButtonTask+0x90>
   {
      count++;
     ec6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <count.1581>
     eca:	8f 5f       	subi	r24, 0xFF	; 255
     ecc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <count.1581>

      if (count == 5)
     ed0:	85 30       	cpi	r24, 0x05	; 5
     ed2:	59 f4       	brne	.+22     	; 0xeea <ButtonTask+0x6a>
     ed4:	c1 50       	subi	r28, 0x01	; 1
     ed6:	c3 30       	cpi	r28, 0x03	; 3
     ed8:	30 f4       	brcc	.+12     	; 0xee6 <ButtonTask+0x66>
     eda:	ec 2f       	mov	r30, r28
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	eb 59       	subi	r30, 0x9B	; 155
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	80 81       	ld	r24, Z
     ee4:	07 c0       	rjmp	.+14     	; 0xef4 <ButtonTask+0x74>
     ee6:	89 e0       	ldi	r24, 0x09	; 9
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <ButtonTask+0x74>
      {
         pressedButton = AdcButtonToPressedButton(newAdcButton);
         if (keyHandler) keyHandler(pressedButton);
      }
      else if (count == LONGPRESS)
     eea:	84 36       	cpi	r24, 0x64	; 100
     eec:	69 f4       	brne	.+26     	; 0xf08 <ButtonTask+0x88>
      {
         pressedButton++;
     eee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pressedButton>
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pressedButton>
         if (keyHandler) keyHandler(pressedButton);
     ef8:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <keyHandler>
     efc:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <keyHandler+0x1>
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	31 f0       	breq	.+12     	; 0xf10 <ButtonTask+0x90>
     f04:	09 95       	icall
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <ButtonTask+0x90>
      }
      else if (count > LONGPRESS)
     f08:	85 36       	cpi	r24, 0x65	; 101
     f0a:	10 f0       	brcs	.+4      	; 0xf10 <ButtonTask+0x90>
      {
        count = LONGPRESS + 1;
     f0c:	00 93 6c 00 	sts	0x006C, r16	; 0x80006c <count.1581>
void ButtonTask(void)
{
   while (true)
   {
      CheckButtonPress();
      TaskSleep(5);
     f10:	85 e0       	ldi	r24, 0x05	; 5
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a8 da       	rcall	.-2736   	; 0x466 <TaskSleep>
      HandleDisplay();
     f16:	0a d0       	rcall	.+20     	; 0xf2c <HandleDisplay>
      TaskSleep(5);
     f18:	85 e0       	ldi	r24, 0x05	; 5
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a4 da       	rcall	.-2744   	; 0x466 <TaskSleep>
     f1e:	b3 cf       	rjmp	.-154    	; 0xe86 <ButtonTask+0x6>

00000f20 <GetScreenMode>:
}

enum ScreenModeType GetScreenMode(void)
{
   return screen;
}
     f20:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <screen>
     f24:	08 95       	ret

00000f26 <SetScreenMode>:

void SetScreenMode(enum ScreenModeType screenMode)
{
   screen = screenMode;
     f26:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <screen>
     f2a:	08 95       	ret

00000f2c <HandleDisplay>:
}

void HandleDisplay(void)
{
   switch(screen)
     f2c:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <screen>
     f30:	8e 2f       	mov	r24, r30
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	87 30       	cpi	r24, 0x07	; 7
     f36:	91 05       	cpc	r25, r1
     f38:	b8 f5       	brcc	.+110    	; 0xfa8 <HandleDisplay+0x7c>
     f3a:	fc 01       	movw	r30, r24
     f3c:	ef 5e       	subi	r30, 0xEF	; 239
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	09 94       	ijmp
static char EEMEM ProductTitle2[20] = "Control";
static char EEMEM ProductVersion[20] = "version 1.0";

static void displayProductTitle(void)
{
   Clear();
     f42:	ac de       	rcall	.-680    	; 0xc9c <Clear>
   WriteStaticString(font5x8, 0, 8, ProductTitle1);
     f44:	28 e2       	ldi	r18, 0x28	; 40
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	48 e0       	ldi	r20, 0x08	; 8
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	80 e4       	ldi	r24, 0x40	; 64
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	d3 de       	rcall	.-602    	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 0, 16, ProductTitle2);
     f52:	24 e1       	ldi	r18, 0x14	; 20
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e1       	ldi	r20, 0x10	; 16
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	80 e4       	ldi	r24, 0x40	; 64
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	cc de       	rcall	.-616    	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 0, 24, ProductVersion);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	48 e1       	ldi	r20, 0x18	; 24
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	80 e4       	ldi	r24, 0x40	; 64
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	c5 de       	rcall	.-630    	; 0xcf8 <WriteStaticString>
   TaskSleep(2000);
     f6e:	80 ed       	ldi	r24, 0xD0	; 208
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	79 da       	rcall	.-2830   	; 0x466 <TaskSleep>
   switch(screen)
   {
      case ModeProductTitle:
         // write product title and software version
         displayProductTitle();
         screen = ModeMainScreenInit;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <HandleDisplay+0x74>
         break;

      case ModeMainScreenInit:
         // display main screen with progress bar and percent blinds lowered
         mainScreenInit();
     f78:	81 d1       	rcall	.+770    	; 0x127c <mainScreenInit>
         SetKeyHandler(mainScreenKey);
     f7a:	87 e6       	ldi	r24, 0x67	; 103
     f7c:	99 e0       	ldi	r25, 0x09	; 9
     f7e:	79 df       	rcall	.-270    	; 0xe72 <SetKeyHandler>
         screen = ModeMainScreenUpdate;
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	0e c0       	rjmp	.+28     	; 0xfa0 <HandleDisplay+0x74>
         break;

      case ModeMainScreenUpdate:
         // update main screen
         mainScreenUpdate();
     f84:	df c1       	rjmp	.+958    	; 0x1344 <mainScreenUpdate>
         break;

      case ModeAskClosingTimeInit:
         // ask user to input time before closing the sun blinds
         closingTimeInit();
     f86:	99 d2       	rcall	.+1330   	; 0x14ba <closingTimeInit>
         SetKeyHandler(ClosingTimeKey);
     f88:	8a e7       	ldi	r24, 0x7A	; 122
     f8a:	9a e0       	ldi	r25, 0x0A	; 10
     f8c:	72 df       	rcall	.-284    	; 0xe72 <SetKeyHandler>
         screen = ModeAskClosingTimeUpdate;
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	07 c0       	rjmp	.+14     	; 0xfa0 <HandleDisplay+0x74>
         break;

      case ModeAskClosingTimeUpdate:
         // update the input time screen
         closingTimeUpdate();
     f92:	d1 c2       	rjmp	.+1442   	; 0x1536 <closingTimeUpdate>
         break;

      case ModeAskFullOpenInit:
         // display screen to input time to open sun blinds 100%
         Clear();
     f94:	83 de       	rcall	.-762    	; 0xc9c <Clear>
         FullOpenInit();
     f96:	4c d2       	rcall	.+1176   	; 0x1430 <FullOpenInit>
         SetKeyHandler(FullOpenKey);
     f98:	87 e4       	ldi	r24, 0x47	; 71
     f9a:	9a e0       	ldi	r25, 0x0A	; 10
     f9c:	6a df       	rcall	.-300    	; 0xe72 <SetKeyHandler>
         screen = ModeAskFullOpenUpdate;
     f9e:	86 e0       	ldi	r24, 0x06	; 6
     fa0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <screen>
         break;
     fa4:	08 95       	ret

      case ModeAskFullOpenUpdate:
         // screen to input 100% open time is displayed
         FullOpenUpdate();
     fa6:	72 c2       	rjmp	.+1252   	; 0x148c <FullOpenUpdate>
         break;

      default:
         screen = ModeProductTitle;
     fa8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <screen>
     fac:	08 95       	ret

00000fae <GetMotorDirection>:
/* true when the timer to delay closing is active */
static bool timerActive = false;

direction_type GetMotorDirection(void)
{
   return motorDirection;
     fae:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <motorDirection>
}
     fb2:	08 95       	ret

00000fb4 <MotorOpenPercent>:

void MotorOpenPercent(uint8_t value)
{
     fb4:	28 2f       	mov	r18, r24
   requestedOpenTime = ((int32_t)value * (int32_t)fullyOpen) / 100;
     fb6:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <fullyOpen>
     fba:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <fullyOpen+0x1>
     fbe:	07 2e       	mov	r0, r23
     fc0:	00 0c       	add	r0, r0
     fc2:	88 0b       	sbc	r24, r24
     fc4:	99 0b       	sbc	r25, r25
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	2e d4       	rcall	.+2140   	; 0x182a <__mulsi3>
     fce:	24 e6       	ldi	r18, 0x64	; 100
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	97 d4       	rcall	.+2350   	; 0x1906 <__divmodsi4>
     fd8:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <requestedOpenTime+0x1>
     fdc:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <requestedOpenTime>
     fe0:	08 95       	ret

00000fe2 <MotorOpen>:
}
 
void MotorOpen(void)
{
   StartDown();
     fe2:	1d d3       	rcall	.+1594   	; 0x161e <StartDown>
   requestedOpenTime = -1;
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	9f ef       	ldi	r25, 0xFF	; 255
     fe8:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <requestedOpenTime+0x1>
     fec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <requestedOpenTime>
   motorDirection = DIRECTION_DOWN;
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <motorDirection>
     ff6:	08 95       	ret

00000ff8 <MotorClose>:
}

void MotorClose(void)
{
   if (GetUpDownTime() > 0)
     ff8:	24 d3       	rcall	.+1608   	; 0x1642 <GetUpDownTime>
     ffa:	89 2b       	or	r24, r25
     ffc:	21 f0       	breq	.+8      	; 0x1006 <MotorClose+0xe>
   {
      StartUp();
     ffe:	13 d3       	rcall	.+1574   	; 0x1626 <StartUp>
      motorDirection = DIRECTION_UP;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <motorDirection>
   }
   requestedOpenTime = -1;
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	9f ef       	ldi	r25, 0xFF	; 255
    100a:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <requestedOpenTime+0x1>
    100e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <requestedOpenTime>
    1012:	08 95       	ret

00001014 <MotorStop>:
}

void MotorStop(void)
{
   StopUpDown();
    1014:	0c d3       	rcall	.+1560   	; 0x162e <StopUpDown>
   requestedOpenTime = -1;
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <requestedOpenTime+0x1>
    101e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <requestedOpenTime>
   motorDirection = DIRECTION_STOP;
    1022:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <motorDirection>
    1026:	08 95       	ret

00001028 <MotorProgress>:
}

uint8_t MotorProgress(void)
{
   uint8_t value = 0;
   if (fullyOpen)
    1028:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <fullyOpen>
    102c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <fullyOpen+0x1>
    1030:	89 2b       	or	r24, r25
    1032:	b1 f0       	breq	.+44     	; 0x1060 <MotorProgress+0x38>
   {
      value = ((int32_t)100 * GetUpDownTime()) / fullyOpen;
    1034:	06 d3       	rcall	.+1548   	; 0x1642 <GetUpDownTime>
    1036:	bc 01       	movw	r22, r24
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	24 e6       	ldi	r18, 0x64	; 100
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	f2 d3       	rcall	.+2020   	; 0x182a <__mulsi3>
    1046:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <fullyOpen>
    104a:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <fullyOpen+0x1>
    104e:	03 2e       	mov	r0, r19
    1050:	00 0c       	add	r0, r0
    1052:	44 0b       	sbc	r20, r20
    1054:	55 0b       	sbc	r21, r21
    1056:	57 d4       	rcall	.+2222   	; 0x1906 <__divmodsi4>
    1058:	82 2f       	mov	r24, r18
   }
   if (value > 100) value = 100;
    105a:	25 36       	cpi	r18, 0x65	; 101
    105c:	18 f4       	brcc	.+6      	; 0x1064 <MotorProgress+0x3c>
    105e:	08 95       	ret
   motorDirection = DIRECTION_STOP;
}

uint8_t MotorProgress(void)
{
   uint8_t value = 0;
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	08 95       	ret
   if (fullyOpen)
   {
      value = ((int32_t)100 * GetUpDownTime()) / fullyOpen;
   }
   if (value > 100) value = 100;
    1064:	84 e6       	ldi	r24, 0x64	; 100
   return value;
}
    1066:	08 95       	ret

00001068 <SetFullyOpen>:

void SetFullyOpen(void)
{
   fullyOpen = GetUpDownTime();
    1068:	ec d2       	rcall	.+1496   	; 0x1642 <GetUpDownTime>
    106a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <fullyOpen+0x1>
    106e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <fullyOpen>
    1072:	08 95       	ret

00001074 <MotorSetup>:
}

void MotorSetup(void)
{
   // PA2; drive motor down, PA3: drive motor up
   PORTA &= ~((1 << PORTA2) | (1 << PORTA3)); // make sure outputs are low at startup
    1074:	8b b3       	in	r24, 0x1b	; 27
    1076:	83 7f       	andi	r24, 0xF3	; 243
    1078:	8b bb       	out	0x1b, r24	; 27
   DDRA |= (1 << DDA2) | (1 << DDA3);
    107a:	8a b3       	in	r24, 0x1a	; 26
    107c:	8c 60       	ori	r24, 0x0C	; 12
    107e:	8a bb       	out	0x1a, r24	; 26

   fullyOpen = nvGetFullyOpen();
    1080:	63 d3       	rcall	.+1734   	; 0x1748 <nvGetFullyOpen>
    1082:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <fullyOpen+0x1>
    1086:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <fullyOpen>
   timerActive = nvGetTimerActive();
    108a:	68 d3       	rcall	.+1744   	; 0x175c <nvGetTimerActive>
    108c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timerActive>
    1090:	08 95       	ret

00001092 <SetMotorOutput>:
}

void SetMotorOutput(direction_type direction)
{
   switch (direction)
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	21 f0       	breq	.+8      	; 0x109e <SetMotorOutput+0xc>
    1096:	48 f0       	brcs	.+18     	; 0x10aa <SetMotorOutput+0x18>
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	21 f0       	breq	.+8      	; 0x10a4 <SetMotorOutput+0x12>
    109c:	08 95       	ret
   {
      case DIRECTION_UP:
         PORTA &= ~(1 << PORTA2);
    109e:	da 98       	cbi	0x1b, 2	; 27
         PORTA |= (1 << PORTA3);
    10a0:	db 9a       	sbi	0x1b, 3	; 27
         break;
    10a2:	08 95       	ret

      case DIRECTION_DOWN:
         PORTA &= ~(1 << PORTA3);
    10a4:	db 98       	cbi	0x1b, 3	; 27
         PORTA |= (1 << PORTA2);
    10a6:	da 9a       	sbi	0x1b, 2	; 27
         break;
    10a8:	08 95       	ret

      case DIRECTION_STOP:
         PORTA &= ~((1 << PORTA2) | (1 << PORTA3));
    10aa:	8b b3       	in	r24, 0x1b	; 27
    10ac:	83 7f       	andi	r24, 0xF3	; 243
    10ae:	8b bb       	out	0x1b, r24	; 27
    10b0:	08 95       	ret

000010b2 <MotorDelayClose>:
         break;
   }
}

void MotorDelayClose(uint16_t delayTime)
{
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
   StartTime(delayTime);
    10b8:	92 d2       	rcall	.+1316   	; 0x15de <StartTime>
   timerActive = delayTime > 0;   
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	cd 2b       	or	r28, r29
    10be:	09 f4       	brne	.+2      	; 0x10c2 <MotorDelayClose+0x10>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timerActive>
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <MotorTask>:

      /* start automatic moving down */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime > 0) && (requestedOpenTime > GetUpDownTime()))
      {
         StartDown();
         motorDirection = DIRECTION_DOWN;
    10cc:	12 e0       	ldi	r17, 0x02	; 2

      /* start automatic moving up */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime >= 0) && (requestedOpenTime < GetUpDownTime()))
      {
         StartUp();
         motorDirection = DIRECTION_UP;
    10ce:	01 e0       	ldi	r16, 0x01	; 1

      /* stop automatic moving down */
      if ((motorDirection == DIRECTION_DOWN) && (requestedOpenTime > 0) && (requestedOpenTime < GetUpDownTime()))
      {
         StopUpDown();
         requestedOpenTime = -1;
    10d0:	cf ef       	ldi	r28, 0xFF	; 255
    10d2:	df ef       	ldi	r29, 0xFF	; 255
void MotorTask(void)
{
   while (true)
   {
      /* manual moving up but already fully closed */
      if ((motorDirection == DIRECTION_UP) && (GetUpDownTime() == 0))
    10d4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <motorDirection>
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	49 f4       	brne	.+18     	; 0x10ee <MotorTask+0x22>
    10dc:	b2 d2       	rcall	.+1380   	; 0x1642 <GetUpDownTime>
    10de:	89 2b       	or	r24, r25
    10e0:	31 f4       	brne	.+12     	; 0x10ee <MotorTask+0x22>
      {
         /* extra time to make sure fully closed */
         TaskSleep(500);
    10e2:	84 ef       	ldi	r24, 0xF4	; 244
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	bf d9       	rcall	.-3202   	; 0x466 <TaskSleep>
         StopUpDown();
    10e8:	a2 d2       	rcall	.+1348   	; 0x162e <StopUpDown>
         motorDirection = DIRECTION_STOP;
    10ea:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <motorDirection>
      }

      /* start automatic moving down */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime > 0) && (requestedOpenTime > GetUpDownTime()))
    10ee:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <motorDirection>
    10f2:	81 11       	cpse	r24, r1
    10f4:	12 c0       	rjmp	.+36     	; 0x111a <MotorTask+0x4e>
    10f6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <requestedOpenTime>
    10fa:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <requestedOpenTime+0x1>
    10fe:	18 16       	cp	r1, r24
    1100:	19 06       	cpc	r1, r25
    1102:	5c f4       	brge	.+22     	; 0x111a <MotorTask+0x4e>
    1104:	9e d2       	rcall	.+1340   	; 0x1642 <GetUpDownTime>
    1106:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <requestedOpenTime>
    110a:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <requestedOpenTime+0x1>
    110e:	82 17       	cp	r24, r18
    1110:	93 07       	cpc	r25, r19
    1112:	18 f4       	brcc	.+6      	; 0x111a <MotorTask+0x4e>
      {
         StartDown();
    1114:	84 d2       	rcall	.+1288   	; 0x161e <StartDown>
         motorDirection = DIRECTION_DOWN;
    1116:	10 93 74 00 	sts	0x0074, r17	; 0x800074 <motorDirection>
      }

      /* start automatic moving up */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime >= 0) && (requestedOpenTime < GetUpDownTime()))
    111a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <motorDirection>
    111e:	81 11       	cpse	r24, r1
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <MotorTask+0x78>
    1122:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <requestedOpenTime>
    1126:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <requestedOpenTime+0x1>
    112a:	97 fd       	sbrc	r25, 7
    112c:	0b c0       	rjmp	.+22     	; 0x1144 <MotorTask+0x78>
    112e:	89 d2       	rcall	.+1298   	; 0x1642 <GetUpDownTime>
    1130:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <requestedOpenTime>
    1134:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <requestedOpenTime+0x1>
    1138:	28 17       	cp	r18, r24
    113a:	39 07       	cpc	r19, r25
    113c:	18 f4       	brcc	.+6      	; 0x1144 <MotorTask+0x78>
      {
         StartUp();
    113e:	73 d2       	rcall	.+1254   	; 0x1626 <StartUp>
         motorDirection = DIRECTION_UP;
    1140:	00 93 74 00 	sts	0x0074, r16	; 0x800074 <motorDirection>
      }

      /* stop automatic moving down */
      if ((motorDirection == DIRECTION_DOWN) && (requestedOpenTime > 0) && (requestedOpenTime < GetUpDownTime()))
    1144:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <motorDirection>
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	b1 f4       	brne	.+44     	; 0x1178 <MotorTask+0xac>
    114c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <requestedOpenTime>
    1150:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <requestedOpenTime+0x1>
    1154:	18 16       	cp	r1, r24
    1156:	19 06       	cpc	r1, r25
    1158:	7c f4       	brge	.+30     	; 0x1178 <MotorTask+0xac>
    115a:	73 d2       	rcall	.+1254   	; 0x1642 <GetUpDownTime>
    115c:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <requestedOpenTime>
    1160:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <requestedOpenTime+0x1>
    1164:	28 17       	cp	r18, r24
    1166:	39 07       	cpc	r19, r25
    1168:	38 f4       	brcc	.+14     	; 0x1178 <MotorTask+0xac>
      {
         StopUpDown();
    116a:	61 d2       	rcall	.+1218   	; 0x162e <StopUpDown>
         requestedOpenTime = -1;
    116c:	d0 93 73 00 	sts	0x0073, r29	; 0x800073 <requestedOpenTime+0x1>
    1170:	c0 93 72 00 	sts	0x0072, r28	; 0x800072 <requestedOpenTime>
         motorDirection = DIRECTION_STOP;
    1174:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <motorDirection>
      }

      /* stop automatic moving up */
      if ((motorDirection == DIRECTION_UP) && (requestedOpenTime >= 0) && (requestedOpenTime > GetUpDownTime()))
    1178:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <motorDirection>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	a9 f4       	brne	.+42     	; 0x11aa <MotorTask+0xde>
    1180:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <requestedOpenTime>
    1184:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <requestedOpenTime+0x1>
    1188:	97 fd       	sbrc	r25, 7
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <MotorTask+0xde>
    118c:	5a d2       	rcall	.+1204   	; 0x1642 <GetUpDownTime>
    118e:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <requestedOpenTime>
    1192:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <requestedOpenTime+0x1>
    1196:	82 17       	cp	r24, r18
    1198:	93 07       	cpc	r25, r19
    119a:	38 f4       	brcc	.+14     	; 0x11aa <MotorTask+0xde>
      {
         StopUpDown();
    119c:	48 d2       	rcall	.+1168   	; 0x162e <StopUpDown>
         requestedOpenTime = -1;
    119e:	d0 93 73 00 	sts	0x0073, r29	; 0x800073 <requestedOpenTime+0x1>
    11a2:	c0 93 72 00 	sts	0x0072, r28	; 0x800072 <requestedOpenTime>
         motorDirection = DIRECTION_STOP;
    11a6:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <motorDirection>
      }

      /* time delay has passed; close */
      if (timerActive && (GetTime() == 0))
    11aa:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timerActive>
    11ae:	88 23       	and	r24, r24
    11b0:	31 f0       	breq	.+12     	; 0x11be <MotorTask+0xf2>
    11b2:	26 d2       	rcall	.+1100   	; 0x1600 <GetTime>
    11b4:	89 2b       	or	r24, r25
    11b6:	19 f4       	brne	.+6      	; 0x11be <MotorTask+0xf2>
      {
         MotorClose();
    11b8:	1f df       	rcall	.-450    	; 0xff8 <MotorClose>
         timerActive = false;
    11ba:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timerActive>
      }

      nvSetFullyOpen(fullyOpen);
    11be:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <fullyOpen>
    11c2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <fullyOpen+0x1>
    11c6:	c5 d2       	rcall	.+1418   	; 0x1752 <nvSetFullyOpen>
      nvSetTimerActive(timerActive);
    11c8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timerActive>
    11cc:	ca d2       	rcall	.+1428   	; 0x1762 <nvSetTimerActive>
      
      TaskSleep(10);
    11ce:	8a e0       	ldi	r24, 0x0A	; 10
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	49 d9       	rcall	.-3438   	; 0x466 <TaskSleep>
   }
    11d4:	7f cf       	rjmp	.-258    	; 0x10d4 <MotorTask+0x8>

000011d6 <ProgressPercent>:
   }
   return buffer;
}

static void ProgressPercent(void)
{
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	00 d0       	rcall	.+0      	; 0x11dc <ProgressPercent+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <ProgressPercent+0x8>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <ProgressPercent+0xa>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    11e4:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <openPercent>
    11e8:	4a e0       	ldi	r20, 0x0A	; 10
    11ea:	be 01       	movw	r22, r28
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	a5 d3       	rcall	.+1866   	; 0x193e <__utoa_ncheck>
}

static char *utoaRightAligned(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	81 11       	cpse	r24, r1
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <ProgressPercent+0x2e>
   {
      buffer[2] = 0;
    11fa:	1b 82       	std	Y+3, r1	; 0x03
      buffer[1] = buffer[0];
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    1200:	80 e2       	ldi	r24, 0x20	; 32
    1202:	89 83       	std	Y+1, r24	; 0x01

   }
   if (buffer[2] == 0)
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	81 11       	cpse	r24, r1
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <ProgressPercent+0x42>
   {
      buffer[3] = 0;
    120a:	1c 82       	std	Y+4, r1	; 0x04
      buffer[2] = buffer[1];
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	8b 83       	std	Y+3, r24	; 0x03
      buffer[1] = buffer[0];
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    1214:	80 e2       	ldi	r24, 0x20	; 32
    1216:	89 83       	std	Y+1, r24	; 0x01

static void ProgressPercent(void)
{
   char buffer[6];

   WriteString(font6x10, 8, 26, utoaRightAligned(openPercent, buffer));
    1218:	9e 01       	movw	r18, r28
    121a:	2f 5f       	subi	r18, 0xFF	; 255
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
    121e:	4a e1       	ldi	r20, 0x1A	; 26
    1220:	68 e0       	ldi	r22, 0x08	; 8
    1222:	84 e4       	ldi	r24, 0x44	; 68
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	58 dd       	rcall	.-1360   	; 0xcd8 <WriteString>
   WriteString(font6x10, 50, 26, utoaRightAligned(MotorProgress(), buffer));
    1228:	ff de       	rcall	.-514    	; 0x1028 <MotorProgress>
    122a:	4a e0       	ldi	r20, 0x0A	; 10
    122c:	be 01       	movw	r22, r28
    122e:	6f 5f       	subi	r22, 0xFF	; 255
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	84 d3       	rcall	.+1800   	; 0x193e <__utoa_ncheck>
}

static char *utoaRightAligned(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	81 11       	cpse	r24, r1
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <ProgressPercent+0x70>
   {
      buffer[2] = 0;
    123c:	1b 82       	std	Y+3, r1	; 0x03
      buffer[1] = buffer[0];
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    1242:	80 e2       	ldi	r24, 0x20	; 32
    1244:	89 83       	std	Y+1, r24	; 0x01

   }
   if (buffer[2] == 0)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 11       	cpse	r24, r1
    124a:	07 c0       	rjmp	.+14     	; 0x125a <ProgressPercent+0x84>
   {
      buffer[3] = 0;
    124c:	1c 82       	std	Y+4, r1	; 0x04
      buffer[2] = buffer[1];
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	8b 83       	std	Y+3, r24	; 0x03
      buffer[1] = buffer[0];
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	89 83       	std	Y+1, r24	; 0x01
static void ProgressPercent(void)
{
   char buffer[6];

   WriteString(font6x10, 8, 26, utoaRightAligned(openPercent, buffer));
   WriteString(font6x10, 50, 26, utoaRightAligned(MotorProgress(), buffer));
    125a:	9e 01       	movw	r18, r28
    125c:	2f 5f       	subi	r18, 0xFF	; 255
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	4a e1       	ldi	r20, 0x1A	; 26
    1262:	62 e3       	ldi	r22, 0x32	; 50
    1264:	84 e4       	ldi	r24, 0x44	; 68
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	37 dd       	rcall	.-1426   	; 0xcd8 <WriteString>
}
    126a:	26 96       	adiw	r28, 0x06	; 6
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <mainScreenInit>:

   }
}
void mainScreenInit(void)
{
   block = false;
    127c:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <block>
   Clear();
    1280:	0d dd       	rcall	.-1510   	; 0xc9c <Clear>
uint8_t current;
bool block;

static void ProgressBarSetup(void)
{
   WriteStaticString(lines5x12, 2, 2, ProgressOutline);
    1282:	28 e6       	ldi	r18, 0x68	; 104
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	42 e0       	ldi	r20, 0x02	; 2
    1288:	62 e0       	ldi	r22, 0x02	; 2
    128a:	82 e1       	ldi	r24, 0x12	; 18
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	34 dd       	rcall	.-1432   	; 0xcf8 <WriteStaticString>
   current = 0;
    1290:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <current>
void mainScreenInit(void)
{
   block = false;
   Clear();
   ProgressBarSetup();
   ProgressPercent();
    1294:	a0 df       	rcall	.-192    	; 0x11d6 <ProgressPercent>
   WriteStaticString(font5x8, 13, 40, Up);
    1296:	2a e5       	ldi	r18, 0x5A	; 90
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	48 e2       	ldi	r20, 0x28	; 40
    129c:	6d e0       	ldi	r22, 0x0D	; 13
    129e:	80 e4       	ldi	r24, 0x40	; 64
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	2a dd       	rcall	.-1452   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 50, 40, Down);
    12a4:	20 e5       	ldi	r18, 0x50	; 80
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	48 e2       	ldi	r20, 0x28	; 40
    12aa:	62 e3       	ldi	r22, 0x32	; 50
    12ac:	80 e4       	ldi	r24, 0x40	; 64
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	23 dd       	rcall	.-1466   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 10, 16, Set);
    12b2:	2c e3       	ldi	r18, 0x3C	; 60
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e1       	ldi	r20, 0x10	; 16
    12b8:	6a e0       	ldi	r22, 0x0A	; 10
    12ba:	80 e4       	ldi	r24, 0x40	; 64
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	1c dd       	rcall	.-1480   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 40, 16, Actual);
    12c0:	26 e4       	ldi	r18, 0x46	; 70
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e1       	ldi	r20, 0x10	; 16
    12c6:	68 e2       	ldi	r22, 0x28	; 40
    12c8:	80 e4       	ldi	r24, 0x40	; 64
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	15 cd       	rjmp	.-1494   	; 0xcf8 <WriteStaticString>

000012ce <mainScreenKey>:
}

void mainScreenKey(enum PressedButtonState key)
{
   switch (key)
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	8a 30       	cpi	r24, 0x0A	; 10
    12d2:	91 05       	cpc	r25, r1
    12d4:	b0 f5       	brcc	.+108    	; 0x1342 <mainScreenKey+0x74>
    12d6:	fc 01       	movw	r30, r24
    12d8:	e8 5e       	subi	r30, 0xE8	; 232
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	09 94       	ijmp
   {
      case PressedButtonDown:
         if (GetMotorDirection() == DIRECTION_UP)
    12de:	67 de       	rcall	.-818    	; 0xfae <GetMotorDirection>
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	29 f4       	brne	.+10     	; 0x12ee <mainScreenKey+0x20>
         {
            MotorStop();
    12e4:	97 de       	rcall	.-722    	; 0x1014 <MotorStop>
            block = true;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <block>
    12ec:	08 95       	ret
         }
         else
         {
            MotorOpen();
    12ee:	79 ce       	rjmp	.-782    	; 0xfe2 <MotorOpen>
         }
         break;

      case PressedButtonDownKey:
         if (block)
    12f0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <block>
    12f4:	88 23       	and	r24, r24
    12f6:	21 f0       	breq	.+8      	; 0x1300 <mainScreenKey+0x32>
         {
            MotorStop();
    12f8:	8d de       	rcall	.-742    	; 0x1014 <MotorStop>
            block = false;
    12fa:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <block>
    12fe:	08 95       	ret
         }
         else
         {
            if (openPercent < 100) openPercent += 25;
    1300:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <openPercent>
    1304:	84 36       	cpi	r24, 0x64	; 100
    1306:	98 f4       	brcc	.+38     	; 0x132e <mainScreenKey+0x60>
    1308:	87 5e       	subi	r24, 0xE7	; 231
    130a:	0f c0       	rjmp	.+30     	; 0x132a <mainScreenKey+0x5c>
            MotorOpenPercent(openPercent);
         }
         break;

      case PressedButtonUp:
         if (GetMotorDirection() == DIRECTION_DOWN)
    130c:	50 de       	rcall	.-864    	; 0xfae <GetMotorDirection>
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	49 f3       	breq	.-46     	; 0x12e4 <mainScreenKey+0x16>
            MotorStop();
            block = true;
         }
         else
         {
            openPercent = 0;
    1312:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <openPercent>
            MotorClose();
    1316:	70 ce       	rjmp	.-800    	; 0xff8 <MotorClose>
         }
         break;

      case PressedButtonUpKey:
         if (block)
    1318:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <block>
    131c:	81 11       	cpse	r24, r1
    131e:	ec cf       	rjmp	.-40     	; 0x12f8 <mainScreenKey+0x2a>
            MotorStop();
            block = false;
         }
         else
         {
            if (openPercent >= 25) openPercent -= 25;
    1320:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <openPercent>
    1324:	89 31       	cpi	r24, 0x19	; 25
    1326:	18 f0       	brcs	.+6      	; 0x132e <mainScreenKey+0x60>
    1328:	89 51       	subi	r24, 0x19	; 25
    132a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <openPercent>
            MotorOpenPercent(openPercent);
    132e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <openPercent>
    1332:	40 ce       	rjmp	.-896    	; 0xfb4 <MotorOpenPercent>
         }
         break;

      case PressedButtonMenuKey:
         SetScreenMode(ModeAskClosingTimeInit);
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	01 c0       	rjmp	.+2      	; 0x133a <mainScreenKey+0x6c>
         break;

      case PressedButtonMenuRepeat:
         SetScreenMode(ModeAskFullOpenInit);
    1338:	85 e0       	ldi	r24, 0x05	; 5
    133a:	f5 cd       	rjmp	.-1046   	; 0xf26 <SetScreenMode>
         break;

      case PressedButtonNone:
         openPercent = 0;
    133c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <openPercent>
         MotorStop();
    1340:	69 ce       	rjmp	.-814    	; 0x1014 <MotorStop>
    1342:	08 95       	ret

00001344 <mainScreenUpdate>:
         break;
   }
}

void mainScreenUpdate(void)
{
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
   static uint8_t selection = 0;

   selection++;
    134a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <selection.1854>
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <selection.1854>

   switch(selection % 4)
    1354:	83 70       	andi	r24, 0x03	; 3
    1356:	82 30       	cpi	r24, 0x02	; 2
    1358:	41 f0       	breq	.+16     	; 0x136a <mainScreenUpdate+0x26>
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	a9 f1       	breq	.+106    	; 0x13c8 <mainScreenUpdate+0x84>
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	e1 f5       	brne	.+120    	; 0x13da <mainScreenUpdate+0x96>
         
      default:
         ProgressBar(MotorProgress());
         break;
   };
}
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
   selection++;

   switch(selection % 4)
   {
      case 1:
         ProgressPercent();
    1368:	36 cf       	rjmp	.-404    	; 0x11d6 <ProgressPercent>
   WriteString(font6x10, 50, 26, utoaRightAligned(MotorProgress(), buffer));
}

static void InvertedWhenMoving(void)
{
   switch(GetMotorDirection())
    136a:	21 de       	rcall	.-958    	; 0xfae <GetMotorDirection>
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	99 f0       	breq	.+38     	; 0x1396 <mainScreenUpdate+0x52>
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	c9 f4       	brne	.+50     	; 0x13a6 <mainScreenUpdate+0x62>
         WriteInverted8PixelString(font5x8, 13, 40, Up);
         WriteStaticString(font5x8, 50, 40, Down);
         break;

      case DIRECTION_DOWN:
         WriteStaticString(font5x8, 13, 40, Up);
    1374:	2a e5       	ldi	r18, 0x5A	; 90
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	48 e2       	ldi	r20, 0x28	; 40
    137a:	6d e0       	ldi	r22, 0x0D	; 13
    137c:	80 e4       	ldi	r24, 0x40	; 64
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	bb dc       	rcall	.-1674   	; 0xcf8 <WriteStaticString>
         WriteInverted8PixelString(font5x8, 50, 40, Down);
    1382:	20 e5       	ldi	r18, 0x50	; 80
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	48 e2       	ldi	r20, 0x28	; 40
    1388:	62 e3       	ldi	r22, 0x32	; 50
    138a:	80 e4       	ldi	r24, 0x40	; 64
    138c:	91 e0       	ldi	r25, 0x01	; 1
         
      default:
         ProgressBar(MotorProgress());
         break;
   };
}
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
         WriteStaticString(font5x8, 50, 40, Down);
         break;

      case DIRECTION_DOWN:
         WriteStaticString(font5x8, 13, 40, Up);
         WriteInverted8PixelString(font5x8, 50, 40, Down);
    1394:	c1 cc       	rjmp	.-1662   	; 0xd18 <WriteInverted8PixelString>
static void InvertedWhenMoving(void)
{
   switch(GetMotorDirection())
   {
      case DIRECTION_UP:
         WriteInverted8PixelString(font5x8, 13, 40, Up);
    1396:	2a e5       	ldi	r18, 0x5A	; 90
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	48 e2       	ldi	r20, 0x28	; 40
    139c:	6d e0       	ldi	r22, 0x0D	; 13
    139e:	80 e4       	ldi	r24, 0x40	; 64
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	ba dc       	rcall	.-1676   	; 0xd18 <WriteInverted8PixelString>
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <mainScreenUpdate+0x70>
         WriteInverted8PixelString(font5x8, 50, 40, Down);
         break;

      case DIRECTION_STOP:
      default:
         WriteStaticString(font5x8, 13, 40, Up);
    13a6:	2a e5       	ldi	r18, 0x5A	; 90
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	48 e2       	ldi	r20, 0x28	; 40
    13ac:	6d e0       	ldi	r22, 0x0D	; 13
    13ae:	80 e4       	ldi	r24, 0x40	; 64
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	a2 dc       	rcall	.-1724   	; 0xcf8 <WriteStaticString>
         WriteStaticString(font5x8, 50, 40, Down);
    13b4:	20 e5       	ldi	r18, 0x50	; 80
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	48 e2       	ldi	r20, 0x28	; 40
    13ba:	62 e3       	ldi	r22, 0x32	; 50
    13bc:	80 e4       	ldi	r24, 0x40	; 64
    13be:	91 e0       	ldi	r25, 0x01	; 1
         
      default:
         ProgressBar(MotorProgress());
         break;
   };
}
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
         break;

      case DIRECTION_STOP:
      default:
         WriteStaticString(font5x8, 13, 40, Up);
         WriteStaticString(font5x8, 50, 40, Down);
    13c6:	98 cc       	rjmp	.-1744   	; 0xcf8 <WriteStaticString>
      case 2:
         InvertedWhenMoving();
         break;

      case 3:
         if ((GetUpDownTime() == 0) && (GetMotorDirection() == DIRECTION_STOP))
    13c8:	3c d1       	rcall	.+632    	; 0x1642 <GetUpDownTime>
    13ca:	89 2b       	or	r24, r25
    13cc:	69 f5       	brne	.+90     	; 0x1428 <mainScreenUpdate+0xe4>
    13ce:	ef dd       	rcall	.-1058   	; 0xfae <GetMotorDirection>
    13d0:	81 11       	cpse	r24, r1
    13d2:	2a c0       	rjmp	.+84     	; 0x1428 <mainScreenUpdate+0xe4>
         {
            openPercent = 0;
    13d4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <openPercent>
    13d8:	27 c0       	rjmp	.+78     	; 0x1428 <mainScreenUpdate+0xe4>
         }
         break;
         
      default:
         ProgressBar(MotorProgress());
    13da:	26 de       	rcall	.-948    	; 0x1028 <MotorProgress>
   current = 0;
}

static void ProgressBar(uint8_t targetValue)
{
   targetValue = (uint16_t)targetValue * 77 / 100;
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	6d e4       	ldi	r22, 0x4D	; 77
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	12 d2       	rcall	.+1060   	; 0x1808 <__mulhi3>
    13e4:	64 e6       	ldi	r22, 0x64	; 100
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	45 d2       	rcall	.+1162   	; 0x1874 <__udivmodhi4>
    13ea:	16 2f       	mov	r17, r22
    13ec:	d6 2f       	mov	r29, r22
   if (targetValue >= current)
    13ee:	c0 91 bd 01 	lds	r28, 0x01BD	; 0x8001bd <current>
    13f2:	6c 17       	cp	r22, r28
    13f4:	60 f0       	brcs	.+24     	; 0x140e <mainScreenUpdate+0xca>
   {
      for (uint8_t i = current; i < targetValue; ++i)
    13f6:	cd 17       	cp	r28, r29
    13f8:	a8 f4       	brcc	.+42     	; 0x1424 <mainScreenUpdate+0xe0>
      {
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineSolid);
    13fa:	63 e0       	ldi	r22, 0x03	; 3
    13fc:	6c 0f       	add	r22, r28
    13fe:	26 e6       	ldi	r18, 0x66	; 102
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	42 e0       	ldi	r20, 0x02	; 2
    1404:	82 e1       	ldi	r24, 0x12	; 18
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	77 dc       	rcall	.-1810   	; 0xcf8 <WriteStaticString>
static void ProgressBar(uint8_t targetValue)
{
   targetValue = (uint16_t)targetValue * 77 / 100;
   if (targetValue >= current)
   {
      for (uint8_t i = current; i < targetValue; ++i)
    140a:	cf 5f       	subi	r28, 0xFF	; 255
    140c:	f4 cf       	rjmp	.-24     	; 0x13f6 <mainScreenUpdate+0xb2>
   }
   else if (targetValue < current)
   {
      for (uint8_t i = current; i > targetValue; --i)
      {
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineBlank);
    140e:	63 e0       	ldi	r22, 0x03	; 3
    1410:	6c 0f       	add	r22, r28
    1412:	24 e6       	ldi	r18, 0x64	; 100
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	42 e0       	ldi	r20, 0x02	; 2
    1418:	82 e1       	ldi	r24, 0x12	; 18
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	6d dc       	rcall	.-1830   	; 0xcf8 <WriteStaticString>
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineSolid);
      }
   }
   else if (targetValue < current)
   {
      for (uint8_t i = current; i > targetValue; --i)
    141e:	c1 50       	subi	r28, 0x01	; 1
    1420:	dc 17       	cp	r29, r28
    1422:	a8 f3       	brcs	.-22     	; 0x140e <mainScreenUpdate+0xca>
      {
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineBlank);
      }
   }

   current = targetValue;
    1424:	10 93 bd 01 	sts	0x01BD, r17	; 0x8001bd <current>
         
      default:
         ProgressBar(MotorProgress());
         break;
   };
}
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	08 95       	ret

00001430 <FullOpenInit>:
static char EEMEM Title3[20]       = "open?";
static char EEMEM PositionSet[20]  = "Position is set";

void FullOpenInit(void)
{
   Clear();
    1430:	35 dc       	rcall	.-1942   	; 0xc9c <Clear>
   WriteStaticString(font5x8, 0, 0, Title1);
    1432:	28 eb       	ldi	r18, 0xB8	; 184
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	80 e4       	ldi	r24, 0x40	; 64
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	5a dc       	rcall	.-1868   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 0, 8, Title2);
    1444:	24 ea       	ldi	r18, 0xA4	; 164
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	48 e0       	ldi	r20, 0x08	; 8
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	80 e4       	ldi	r24, 0x40	; 64
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	51 dc       	rcall	.-1886   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 0, 16, Title3);
    1456:	20 e9       	ldi	r18, 0x90	; 144
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e1       	ldi	r20, 0x10	; 16
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	80 e4       	ldi	r24, 0x40	; 64
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	48 dc       	rcall	.-1904   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 8, 40, Back);
    1468:	2c ec       	ldi	r18, 0xCC	; 204
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	48 e2       	ldi	r20, 0x28	; 40
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	68 e0       	ldi	r22, 0x08	; 8
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	80 e4       	ldi	r24, 0x40	; 64
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	3f dc       	rcall	.-1922   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 40, 40, Accept);
    147a:	25 ed       	ldi	r18, 0xD5	; 213
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	48 e2       	ldi	r20, 0x28	; 40
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	68 e2       	ldi	r22, 0x28	; 40
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	80 e4       	ldi	r24, 0x40	; 64
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	36 cc       	rjmp	.-1940   	; 0xcf8 <WriteStaticString>

0000148c <FullOpenUpdate>:
}

void FullOpenUpdate(void)
{
    148c:	08 95       	ret

0000148e <FullOpenKey>:
}

void FullOpenKey(enum PressedButtonState key)
{
   switch (key)
    148e:	85 30       	cpi	r24, 0x05	; 5
    1490:	89 f0       	breq	.+34     	; 0x14b4 <FullOpenKey+0x26>
    1492:	88 30       	cpi	r24, 0x08	; 8
    1494:	79 f0       	breq	.+30     	; 0x14b4 <FullOpenKey+0x26>
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	79 f4       	brne	.+30     	; 0x14b8 <FullOpenKey+0x2a>
   {
      case PressedButtonDownKey:
         WriteStaticString(font5x8, 0, 30, PositionSet);
    149a:	2c e7       	ldi	r18, 0x7C	; 124
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4e e1       	ldi	r20, 0x1E	; 30
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	80 e4       	ldi	r24, 0x40	; 64
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	26 dc       	rcall	.-1972   	; 0xcf8 <WriteStaticString>
         SetFullyOpen();
    14ac:	dd dd       	rcall	.-1094   	; 0x1068 <SetFullyOpen>
         TaskSleep(1000);
    14ae:	88 ee       	ldi	r24, 0xE8	; 232
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	d9 d7       	rcall	.+4018   	; 0x2466 <__TEXT_REGION_LENGTH__+0x466>
         SetScreenMode(ModeMainScreenInit);
         break;

      case PressedButtonUpKey:
      case PressedButtonMenuKey:
         SetScreenMode(ModeMainScreenInit);
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	37 cd       	rjmp	.-1426   	; 0xf26 <SetScreenMode>
    14b8:	08 95       	ret

000014ba <closingTimeInit>:
   WriteString(font6x10, 28, 20, utoa2Digits(GetTime() % 60, buffer));
}

void closingTimeInit(void)
{
   Clear();
    14ba:	f0 db       	rcall	.-2080   	; 0xc9c <Clear>
   WriteStaticString(font5x8, 0, 0, WaitTitle1);
    14bc:	26 ef       	ldi	r18, 0xF6	; 246
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	80 e4       	ldi	r24, 0x40	; 64
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	17 dc       	rcall	.-2002   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 0, 8, WaitTitle2);
    14ca:	22 ee       	ldi	r18, 0xE2	; 226
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	48 e0       	ldi	r20, 0x08	; 8
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	80 e4       	ldi	r24, 0x40	; 64
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	10 dc       	rcall	.-2016   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font6x10, 23, 20, Semicolon);
    14d8:	20 ee       	ldi	r18, 0xE0	; 224
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	44 e1       	ldi	r20, 0x14	; 20
    14de:	67 e1       	ldi	r22, 0x17	; 23
    14e0:	84 e4       	ldi	r24, 0x44	; 68
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	09 dc       	rcall	.-2030   	; 0xcf8 <WriteStaticString>
   WriteStaticString(font5x8, 46, 23, Hour);
    14e6:	2e ed       	ldi	r18, 0xDE	; 222
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	47 e1       	ldi	r20, 0x17	; 23
    14ec:	6e e2       	ldi	r22, 0x2E	; 46
    14ee:	80 e4       	ldi	r24, 0x40	; 64
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	02 cc       	rjmp	.-2044   	; 0xcf8 <WriteStaticString>

000014f4 <ClosingTimeKey>:
}

void ClosingTimeKey(enum PressedButtonState key)
{
    14f4:	cf 93       	push	r28
    14f6:	c8 2f       	mov	r28, r24
   uint16_t delayTime = GetTime();
    14f8:	83 d0       	rcall	.+262    	; 0x1600 <GetTime>

   delayTime = (delayTime / STEPDELAYTIME) * STEPDELAYTIME + (delayTime % STEPDELAYTIME > 0) ? STEPDELAYTIME : 0;
    14fa:	89 2b       	or	r24, r25
    14fc:	19 f4       	brne	.+6      	; 0x1504 <ClosingTimeKey+0x10>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <ClosingTimeKey+0x14>
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	90 e0       	ldi	r25, 0x00	; 0

   switch (key)
    1508:	c5 30       	cpi	r28, 0x05	; 5
    150a:	21 f4       	brne	.+8      	; 0x1514 <ClosingTimeKey+0x20>
         }
         else
         {
            delayTime = 0;
         }
         MotorDelayClose(delayTime);
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
         break;

      default:
         break;
   }
}
    1510:	cf 91       	pop	r28
         }
         else
         {
            delayTime = 0;
         }
         MotorDelayClose(delayTime);
    1512:	cf cd       	rjmp	.-1122   	; 0x10b2 <MotorDelayClose>
{
   uint16_t delayTime = GetTime();

   delayTime = (delayTime / STEPDELAYTIME) * STEPDELAYTIME + (delayTime % STEPDELAYTIME > 0) ? STEPDELAYTIME : 0;

   switch (key)
    1514:	c6 30       	cpi	r28, 0x06	; 6
    1516:	20 f4       	brcc	.+8      	; 0x1520 <ClosingTimeKey+0x2c>
    1518:	c2 30       	cpi	r28, 0x02	; 2
    151a:	59 f4       	brne	.+22     	; 0x1532 <ClosingTimeKey+0x3e>
         }
         else
         {
            delayTime = MAXDELAYTIME;
         }
         MotorDelayClose(delayTime);
    151c:	02 96       	adiw	r24, 0x02	; 2
    151e:	f8 cf       	rjmp	.-16     	; 0x1510 <ClosingTimeKey+0x1c>
{
   uint16_t delayTime = GetTime();

   delayTime = (delayTime / STEPDELAYTIME) * STEPDELAYTIME + (delayTime % STEPDELAYTIME > 0) ? STEPDELAYTIME : 0;

   switch (key)
    1520:	c8 30       	cpi	r28, 0x08	; 8
    1522:	19 f4       	brne	.+6      	; 0x152a <ClosingTimeKey+0x36>
         }
         MotorDelayClose(delayTime);
         break;

      case PressedButtonMenuKey:
         SetScreenMode(ModeMainScreenInit);
    1524:	81 e0       	ldi	r24, 0x01	; 1
         break;

      default:
         break;
   }
}
    1526:	cf 91       	pop	r28
         }
         MotorDelayClose(delayTime);
         break;

      case PressedButtonMenuKey:
         SetScreenMode(ModeMainScreenInit);
    1528:	fe cc       	rjmp	.-1540   	; 0xf26 <SetScreenMode>
{
   uint16_t delayTime = GetTime();

   delayTime = (delayTime / STEPDELAYTIME) * STEPDELAYTIME + (delayTime % STEPDELAYTIME > 0) ? STEPDELAYTIME : 0;

   switch (key)
    152a:	c9 30       	cpi	r28, 0x09	; 9
    152c:	11 f4       	brne	.+4      	; 0x1532 <ClosingTimeKey+0x3e>
      case PressedButtonMenuKey:
         SetScreenMode(ModeMainScreenInit);
         break;

      case PressedButtonNone:
         step = 0;
    152e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <step>
         break;

      default:
         break;
   }
}
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <closingTimeUpdate>:

void closingTimeUpdate(void)
{
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	00 d0       	rcall	.+0      	; 0x153c <closingTimeUpdate+0x6>
    153c:	00 d0       	rcall	.+0      	; 0x153e <closingTimeUpdate+0x8>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <closingTimeUpdate+0xa>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62

static void updateTime(void)
{
   char buffer[6];

   WriteString(font6x10, 5, 20, utoa2Digits(GetTime() / 60, buffer));
    1544:	5d d0       	rcall	.+186    	; 0x1600 <GetTime>
    1546:	6c e3       	ldi	r22, 0x3C	; 60
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	a8 d1       	rcall	.+848    	; 0x189c <__divmodhi4>
    154c:	86 2f       	mov	r24, r22
    154e:	4a e0       	ldi	r20, 0x0A	; 10
    1550:	be 01       	movw	r22, r28
    1552:	6f 5f       	subi	r22, 0xFF	; 255
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	f2 d1       	rcall	.+996    	; 0x193e <__utoa_ncheck>
static char EEMEM Hour[2]   = "h";

static char *utoa2Digits(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	81 11       	cpse	r24, r1
    155e:	05 c0       	rjmp	.+10     	; 0x156a <closingTimeUpdate+0x34>
   {
      buffer[1] = buffer[0];
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = '0';
    1564:	80 e3       	ldi	r24, 0x30	; 48
    1566:	89 83       	std	Y+1, r24	; 0x01
      buffer[2] = 0;
    1568:	1b 82       	std	Y+3, r1	; 0x03

static void updateTime(void)
{
   char buffer[6];

   WriteString(font6x10, 5, 20, utoa2Digits(GetTime() / 60, buffer));
    156a:	9e 01       	movw	r18, r28
    156c:	2f 5f       	subi	r18, 0xFF	; 255
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	44 e1       	ldi	r20, 0x14	; 20
    1572:	65 e0       	ldi	r22, 0x05	; 5
    1574:	84 e4       	ldi	r24, 0x44	; 68
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	af db       	rcall	.-2210   	; 0xcd8 <WriteString>
   WriteString(font6x10, 28, 20, utoa2Digits(GetTime() % 60, buffer));
    157a:	42 d0       	rcall	.+132    	; 0x1600 <GetTime>
    157c:	6c e3       	ldi	r22, 0x3C	; 60
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	8d d1       	rcall	.+794    	; 0x189c <__divmodhi4>
    1582:	4a e0       	ldi	r20, 0x0A	; 10
    1584:	be 01       	movw	r22, r28
    1586:	6f 5f       	subi	r22, 0xFF	; 255
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	d8 d1       	rcall	.+944    	; 0x193e <__utoa_ncheck>
static char EEMEM Hour[2]   = "h";

static char *utoa2Digits(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	81 11       	cpse	r24, r1
    1592:	05 c0       	rjmp	.+10     	; 0x159e <closingTimeUpdate+0x68>
   {
      buffer[1] = buffer[0];
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = '0';
    1598:	80 e3       	ldi	r24, 0x30	; 48
    159a:	89 83       	std	Y+1, r24	; 0x01
      buffer[2] = 0;
    159c:	1b 82       	std	Y+3, r1	; 0x03
static void updateTime(void)
{
   char buffer[6];

   WriteString(font6x10, 5, 20, utoa2Digits(GetTime() / 60, buffer));
   WriteString(font6x10, 28, 20, utoa2Digits(GetTime() % 60, buffer));
    159e:	9e 01       	movw	r18, r28
    15a0:	2f 5f       	subi	r18, 0xFF	; 255
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	44 e1       	ldi	r20, 0x14	; 20
    15a6:	6c e1       	ldi	r22, 0x1C	; 28
    15a8:	84 e4       	ldi	r24, 0x44	; 68
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	95 db       	rcall	.-2262   	; 0xcd8 <WriteString>
}

void closingTimeUpdate(void)
{
   updateTime();
}
    15ae:	26 96       	adiw	r28, 0x06	; 6
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret

000015c0 <ClockInit>:
static volatile uint16_t upDownCounter;
static volatile int8_t step = 0;

void ClockInit(void)
{
   timeCounter = nvGetTimeCounter();
    15c0:	a7 d0       	rcall	.+334    	; 0x1710 <nvGetTimeCounter>
    15c2:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <timeCounter>
    15c6:	70 93 7c 00 	sts	0x007C, r23	; 0x80007c <timeCounter+0x1>
    15ca:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <timeCounter+0x2>
    15ce:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <timeCounter+0x3>
   upDownCounter = nvGetUpDownCounter();
    15d2:	b0 d0       	rcall	.+352    	; 0x1734 <nvGetUpDownCounter>
    15d4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <upDownCounter+0x1>
    15d8:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <upDownCounter>
    15dc:	08 95       	ret

000015de <StartTime>:
}

void StartTime(uint16_t waitTime)
{
   timeCounter = (uint32_t)waitTime * 50 * 60;
    15de:	bc 01       	movw	r22, r24
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	28 eb       	ldi	r18, 0xB8	; 184
    15e6:	3b e0       	ldi	r19, 0x0B	; 11
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	1e d1       	rcall	.+572    	; 0x182a <__mulsi3>
    15ee:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <timeCounter>
    15f2:	70 93 7c 00 	sts	0x007C, r23	; 0x80007c <timeCounter+0x1>
    15f6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <timeCounter+0x2>
    15fa:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <timeCounter+0x3>
    15fe:	08 95       	ret

00001600 <GetTime>:
}

uint16_t GetTime(void)
{
   /* minutes resolution */
   return timeCounter / 50 / 60;
    1600:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <timeCounter>
    1604:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <timeCounter+0x1>
    1608:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <timeCounter+0x2>
    160c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <timeCounter+0x3>
    1610:	28 eb       	ldi	r18, 0xB8	; 184
    1612:	3b e0       	ldi	r19, 0x0B	; 11
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	54 d1       	rcall	.+680    	; 0x18c2 <__udivmodsi4>
}
    161a:	c9 01       	movw	r24, r18
    161c:	08 95       	ret

0000161e <StartDown>:

void StartDown(void)
{
   step = 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <step>
    1624:	08 95       	ret

00001626 <StartUp>:
}

void StartUp(void)
{
   step = -1;
    1626:	8f ef       	ldi	r24, 0xFF	; 255
    1628:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <step>
    162c:	08 95       	ret

0000162e <StopUpDown>:
}

void StopUpDown(void)
{
   step = 0;
    162e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <step>
    1632:	08 95       	ret

00001634 <ResetUpDown>:
}

void ResetUpDown(void)
{
   step = 0;
    1634:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <step>
   upDownCounter = 0;
    1638:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <upDownCounter+0x1>
    163c:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <upDownCounter>
    1640:	08 95       	ret

00001642 <GetUpDownTime>:
}

uint16_t GetUpDownTime(void)
{
   /* 100ms resolution */
   return upDownCounter / 5;
    1642:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <upDownCounter>
    1646:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <upDownCounter+0x1>
    164a:	65 e0       	ldi	r22, 0x05	; 5
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	12 d1       	rcall	.+548    	; 0x1874 <__udivmodhi4>
    1650:	cb 01       	movw	r24, r22
}
    1652:	08 95       	ret

00001654 <HandleClock>:

void HandleClock(void)
{
   upDownCounter += step;
    1654:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <step>
    1658:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <upDownCounter>
    165c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <upDownCounter+0x1>
    1660:	82 0f       	add	r24, r18
    1662:	91 1d       	adc	r25, r1
    1664:	27 fd       	sbrc	r18, 7
    1666:	9a 95       	dec	r25
    1668:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <upDownCounter+0x1>
    166c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <upDownCounter>
   if ((upDownCounter == 0) || (upDownCounter == 0xFFFF)) step = 0;
    1670:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <upDownCounter>
    1674:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <upDownCounter+0x1>
    1678:	89 2b       	or	r24, r25
    167a:	31 f0       	breq	.+12     	; 0x1688 <HandleClock+0x34>
    167c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <upDownCounter>
    1680:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <upDownCounter+0x1>
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	11 f4       	brne	.+4      	; 0x168c <HandleClock+0x38>
    1688:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <step>
   if (timeCounter > 0) timeCounter--;
    168c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <timeCounter>
    1690:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <timeCounter+0x1>
    1694:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <timeCounter+0x2>
    1698:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <timeCounter+0x3>
    169c:	89 2b       	or	r24, r25
    169e:	8a 2b       	or	r24, r26
    16a0:	8b 2b       	or	r24, r27
    16a2:	99 f0       	breq	.+38     	; 0x16ca <HandleClock+0x76>
    16a4:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <timeCounter>
    16a8:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <timeCounter+0x1>
    16ac:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <timeCounter+0x2>
    16b0:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <timeCounter+0x3>
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	a1 09       	sbc	r26, r1
    16b8:	b1 09       	sbc	r27, r1
    16ba:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <timeCounter>
    16be:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <timeCounter+0x1>
    16c2:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <timeCounter+0x2>
    16c6:	b0 93 7e 00 	sts	0x007E, r27	; 0x80007e <timeCounter+0x3>

   nvSetUpDownCounter(upDownCounter);
    16ca:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <upDownCounter>
    16ce:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <upDownCounter+0x1>
    16d2:	35 d0       	rcall	.+106    	; 0x173e <nvSetUpDownCounter>
   nvSetTimeCounter(timeCounter);
    16d4:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <timeCounter>
    16d8:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <timeCounter+0x1>
    16dc:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <timeCounter+0x2>
    16e0:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <timeCounter+0x3>
    16e4:	1e c0       	rjmp	.+60     	; 0x1722 <nvSetTimeCounter>

000016e6 <NonVolataileSetup>:
static int16_t fullyOpen;
static bool timerActive; 

void NonVolataileSetup(void)
{
   timeCounter = 0;//eeprom_read_dword((uint32_t*)500);
    16e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <timeCounter>
    16ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <timeCounter+0x1>
    16ee:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <timeCounter+0x2>
    16f2:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <timeCounter+0x3>
   upDownCounter = 0;//eeprom_read_word((uint16_t*)504);
    16f6:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <upDownCounter+0x1>
    16fa:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <upDownCounter>
   fullyOpen = 1000;//(int16_t)eeprom_read_word((uint16_t*)506);
    16fe:	88 ee       	ldi	r24, 0xE8	; 232
    1700:	93 e0       	ldi	r25, 0x03	; 3
    1702:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <fullyOpen+0x1>
    1706:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <fullyOpen>
   timerActive = false;//eeprom_read_byte((uint8_t*)508);
    170a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <timerActive>
    170e:	08 95       	ret

00001710 <nvGetTimeCounter>:
}

uint32_t nvGetTimeCounter(void)
{
   return timeCounter;
    1710:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <timeCounter>
    1714:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <timeCounter+0x1>
    1718:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <timeCounter+0x2>
    171c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <timeCounter+0x3>
}
    1720:	08 95       	ret

00001722 <nvSetTimeCounter>:

void nvSetTimeCounter(uint32_t value)
{
   timeCounter = value;
    1722:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <timeCounter>
    1726:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <timeCounter+0x1>
    172a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <timeCounter+0x2>
    172e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <timeCounter+0x3>
    1732:	08 95       	ret

00001734 <nvGetUpDownCounter>:
}

uint16_t nvGetUpDownCounter(void)
{
   return upDownCounter;
    1734:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <upDownCounter>
    1738:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <upDownCounter+0x1>
}
    173c:	08 95       	ret

0000173e <nvSetUpDownCounter>:

void nvSetUpDownCounter(uint16_t  value)
{
   upDownCounter = value;
    173e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <upDownCounter+0x1>
    1742:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <upDownCounter>
    1746:	08 95       	ret

00001748 <nvGetFullyOpen>:
}

int16_t nvGetFullyOpen(void)
{
   return fullyOpen;
}
    1748:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <fullyOpen>
    174c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <fullyOpen+0x1>
    1750:	08 95       	ret

00001752 <nvSetFullyOpen>:

void nvSetFullyOpen(int16_t value)
{
   fullyOpen = value;
    1752:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <fullyOpen+0x1>
    1756:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <fullyOpen>
    175a:	08 95       	ret

0000175c <nvGetTimerActive>:
}

bool nvGetTimerActive(void)
{
   return timerActive;
}
    175c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <timerActive>
    1760:	08 95       	ret

00001762 <nvSetTimerActive>:

void nvSetTimerActive(bool value)
{
   timerActive = value;
    1762:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <timerActive>
    1766:	08 95       	ret

00001768 <NonVolataileTask>:
    1768:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <timeCounter>
    176c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <timeCounter+0x1>
    1770:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <timeCounter+0x2>
    1774:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <timeCounter+0x3>
    1778:	84 ef       	ldi	r24, 0xF4	; 244
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	23 d1       	rcall	.+582    	; 0x19c4 <eeprom_update_dword>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	71 d6       	rcall	.+3298   	; 0x2466 <__TEXT_REGION_LENGTH__+0x466>
    1784:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <upDownCounter>
    1788:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <upDownCounter+0x1>
    178c:	88 ef       	ldi	r24, 0xF8	; 248
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	21 d1       	rcall	.+578    	; 0x19d4 <eeprom_update_word>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	67 d6       	rcall	.+3278   	; 0x2466 <__TEXT_REGION_LENGTH__+0x466>
    1798:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <fullyOpen>
    179c:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <fullyOpen+0x1>
    17a0:	8a ef       	ldi	r24, 0xFA	; 250
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	17 d1       	rcall	.+558    	; 0x19d4 <eeprom_update_word>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	5d d6       	rcall	.+3258   	; 0x2466 <__TEXT_REGION_LENGTH__+0x466>
    17ac:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <timerActive>
    17b0:	8c ef       	ldi	r24, 0xFC	; 252
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	f5 d0       	rcall	.+490    	; 0x19a0 <eeprom_update_byte>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	55 d6       	rcall	.+3242   	; 0x2466 <__TEXT_REGION_LENGTH__+0x466>
    17bc:	50 db       	rcall	.-2400   	; 0xe5e <HandleBacklight>
    17be:	84 ef       	ldi	r24, 0xF4	; 244
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	51 d6       	rcall	.+3234   	; 0x2466 <__TEXT_REGION_LENGTH__+0x466>
    17c4:	d1 cf       	rjmp	.-94     	; 0x1768 <NonVolataileTask>

000017c6 <main>:
}
#endif

int main (void)
{
   NonVolataileSetup();
    17c6:	8f df       	rcall	.-226    	; 0x16e6 <NonVolataileSetup>
   KernelSetup();
    17c8:	3c d6       	rcall	.+3192   	; 0x2442 <__TEXT_REGION_LENGTH__+0x442>
   AdcSetup();
    17ca:	40 d8       	rcall	.-3968   	; 0x84c <AdcSetup>
   MotorSetup();
    17cc:	53 dc       	rcall	.-1882   	; 0x1074 <MotorSetup>
   ButtonSetup();
    17ce:	56 db       	rcall	.-2388   	; 0xe7c <ButtonSetup>
   ClockInit();
    17d0:	f7 de       	rcall	.-530    	; 0x15c0 <ClockInit>

#ifdef test
   InitTask(TESTSTACKSIZE, testStack, TestTask);
#else
   InitTask(EEPROMTASKSTACKSIZE, eepromTaskStack, NonVolataileTask);
    17d2:	44 eb       	ldi	r20, 0xB4	; 180
    17d4:	5b e0       	ldi	r21, 0x0B	; 11
    17d6:	68 e2       	ldi	r22, 0x28	; 40
    17d8:	71 e0       	ldi	r23, 0x01	; 1
    17da:	83 e3       	ldi	r24, 0x33	; 51
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	cf d5       	rcall	.+2974   	; 0x237e <__TEXT_REGION_LENGTH__+0x37e>
   InitTask(MOTORSTACKSIZE, motorStack, MotorTask);
    17e0:	46 e6       	ldi	r20, 0x66	; 102
    17e2:	58 e0       	ldi	r21, 0x08	; 8
    17e4:	68 e8       	ldi	r22, 0x88	; 136
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	8d e3       	ldi	r24, 0x3D	; 61
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	c8 d5       	rcall	.+2960   	; 0x237e <__TEXT_REGION_LENGTH__+0x37e>
   InitTask(BUTTONSTACKSIZE, buttonStack, ButtonTask);
    17ee:	40 e4       	ldi	r20, 0x40	; 64
    17f0:	57 e0       	ldi	r21, 0x07	; 7
    17f2:	65 ec       	ldi	r22, 0xC5	; 197
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	83 e6       	ldi	r24, 0x63	; 99
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	c1 d5       	rcall	.+2946   	; 0x237e <__TEXT_REGION_LENGTH__+0x37e>
#endif

   StartKernel(NULL);
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	51 d7       	rcall	.+3746   	; 0x26a4 <__TEXT_REGION_LENGTH__+0x6a4>
}
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	08 95       	ret

00001808 <__mulhi3>:
    1808:	00 24       	eor	r0, r0
    180a:	55 27       	eor	r21, r21
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <__mulhi3+0xe>
    180e:	08 0e       	add	r0, r24
    1810:	59 1f       	adc	r21, r25
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	29 f0       	breq	.+10     	; 0x1824 <__mulhi3+0x1c>
    181a:	76 95       	lsr	r23
    181c:	67 95       	ror	r22
    181e:	b8 f3       	brcs	.-18     	; 0x180e <__mulhi3+0x6>
    1820:	71 05       	cpc	r23, r1
    1822:	b9 f7       	brne	.-18     	; 0x1812 <__mulhi3+0xa>
    1824:	80 2d       	mov	r24, r0
    1826:	95 2f       	mov	r25, r21
    1828:	08 95       	ret

0000182a <__mulsi3>:
    182a:	ee 27       	eor	r30, r30
    182c:	ff 27       	eor	r31, r31

0000182e <__mulsi3_helper>:
    182e:	aa 27       	eor	r26, r26
    1830:	bb 27       	eor	r27, r27
    1832:	08 c0       	rjmp	.+16     	; 0x1844 <__mulsi3_helper+0x16>
    1834:	a2 0f       	add	r26, r18
    1836:	b3 1f       	adc	r27, r19
    1838:	e4 1f       	adc	r30, r20
    183a:	f5 1f       	adc	r31, r21
    183c:	22 0f       	add	r18, r18
    183e:	33 1f       	adc	r19, r19
    1840:	44 1f       	adc	r20, r20
    1842:	55 1f       	adc	r21, r21
    1844:	96 95       	lsr	r25
    1846:	87 95       	ror	r24
    1848:	77 95       	ror	r23
    184a:	67 95       	ror	r22
    184c:	98 f3       	brcs	.-26     	; 0x1834 <__mulsi3_helper+0x6>
    184e:	70 40       	sbci	r23, 0x00	; 0
    1850:	a9 f7       	brne	.-22     	; 0x183c <__mulsi3_helper+0xe>
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	99 f7       	brne	.-26     	; 0x183c <__mulsi3_helper+0xe>
    1856:	bd 01       	movw	r22, r26
    1858:	cf 01       	movw	r24, r30
    185a:	08 95       	ret

0000185c <__udivmodqi4>:
    185c:	99 1b       	sub	r25, r25
    185e:	79 e0       	ldi	r23, 0x09	; 9
    1860:	04 c0       	rjmp	.+8      	; 0x186a <__udivmodqi4_ep>

00001862 <__udivmodqi4_loop>:
    1862:	99 1f       	adc	r25, r25
    1864:	96 17       	cp	r25, r22
    1866:	08 f0       	brcs	.+2      	; 0x186a <__udivmodqi4_ep>
    1868:	96 1b       	sub	r25, r22

0000186a <__udivmodqi4_ep>:
    186a:	88 1f       	adc	r24, r24
    186c:	7a 95       	dec	r23
    186e:	c9 f7       	brne	.-14     	; 0x1862 <__udivmodqi4_loop>
    1870:	80 95       	com	r24
    1872:	08 95       	ret

00001874 <__udivmodhi4>:
    1874:	aa 1b       	sub	r26, r26
    1876:	bb 1b       	sub	r27, r27
    1878:	51 e1       	ldi	r21, 0x11	; 17
    187a:	07 c0       	rjmp	.+14     	; 0x188a <__udivmodhi4_ep>

0000187c <__udivmodhi4_loop>:
    187c:	aa 1f       	adc	r26, r26
    187e:	bb 1f       	adc	r27, r27
    1880:	a6 17       	cp	r26, r22
    1882:	b7 07       	cpc	r27, r23
    1884:	10 f0       	brcs	.+4      	; 0x188a <__udivmodhi4_ep>
    1886:	a6 1b       	sub	r26, r22
    1888:	b7 0b       	sbc	r27, r23

0000188a <__udivmodhi4_ep>:
    188a:	88 1f       	adc	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	5a 95       	dec	r21
    1890:	a9 f7       	brne	.-22     	; 0x187c <__udivmodhi4_loop>
    1892:	80 95       	com	r24
    1894:	90 95       	com	r25
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	08 95       	ret

0000189c <__divmodhi4>:
    189c:	97 fb       	bst	r25, 7
    189e:	07 2e       	mov	r0, r23
    18a0:	16 f4       	brtc	.+4      	; 0x18a6 <__divmodhi4+0xa>
    18a2:	00 94       	com	r0
    18a4:	06 d0       	rcall	.+12     	; 0x18b2 <__divmodhi4_neg1>
    18a6:	77 fd       	sbrc	r23, 7
    18a8:	08 d0       	rcall	.+16     	; 0x18ba <__divmodhi4_neg2>
    18aa:	e4 df       	rcall	.-56     	; 0x1874 <__udivmodhi4>
    18ac:	07 fc       	sbrc	r0, 7
    18ae:	05 d0       	rcall	.+10     	; 0x18ba <__divmodhi4_neg2>
    18b0:	3e f4       	brtc	.+14     	; 0x18c0 <__divmodhi4_exit>

000018b2 <__divmodhi4_neg1>:
    18b2:	90 95       	com	r25
    18b4:	81 95       	neg	r24
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	08 95       	ret

000018ba <__divmodhi4_neg2>:
    18ba:	70 95       	com	r23
    18bc:	61 95       	neg	r22
    18be:	7f 4f       	sbci	r23, 0xFF	; 255

000018c0 <__divmodhi4_exit>:
    18c0:	08 95       	ret

000018c2 <__udivmodsi4>:
    18c2:	a1 e2       	ldi	r26, 0x21	; 33
    18c4:	1a 2e       	mov	r1, r26
    18c6:	aa 1b       	sub	r26, r26
    18c8:	bb 1b       	sub	r27, r27
    18ca:	fd 01       	movw	r30, r26
    18cc:	0d c0       	rjmp	.+26     	; 0x18e8 <__udivmodsi4_ep>

000018ce <__udivmodsi4_loop>:
    18ce:	aa 1f       	adc	r26, r26
    18d0:	bb 1f       	adc	r27, r27
    18d2:	ee 1f       	adc	r30, r30
    18d4:	ff 1f       	adc	r31, r31
    18d6:	a2 17       	cp	r26, r18
    18d8:	b3 07       	cpc	r27, r19
    18da:	e4 07       	cpc	r30, r20
    18dc:	f5 07       	cpc	r31, r21
    18de:	20 f0       	brcs	.+8      	; 0x18e8 <__udivmodsi4_ep>
    18e0:	a2 1b       	sub	r26, r18
    18e2:	b3 0b       	sbc	r27, r19
    18e4:	e4 0b       	sbc	r30, r20
    18e6:	f5 0b       	sbc	r31, r21

000018e8 <__udivmodsi4_ep>:
    18e8:	66 1f       	adc	r22, r22
    18ea:	77 1f       	adc	r23, r23
    18ec:	88 1f       	adc	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	1a 94       	dec	r1
    18f2:	69 f7       	brne	.-38     	; 0x18ce <__udivmodsi4_loop>
    18f4:	60 95       	com	r22
    18f6:	70 95       	com	r23
    18f8:	80 95       	com	r24
    18fa:	90 95       	com	r25
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	bd 01       	movw	r22, r26
    1902:	cf 01       	movw	r24, r30
    1904:	08 95       	ret

00001906 <__divmodsi4>:
    1906:	05 2e       	mov	r0, r21
    1908:	97 fb       	bst	r25, 7
    190a:	16 f4       	brtc	.+4      	; 0x1910 <__divmodsi4+0xa>
    190c:	00 94       	com	r0
    190e:	0f d0       	rcall	.+30     	; 0x192e <__negsi2>
    1910:	57 fd       	sbrc	r21, 7
    1912:	05 d0       	rcall	.+10     	; 0x191e <__divmodsi4_neg2>
    1914:	d6 df       	rcall	.-84     	; 0x18c2 <__udivmodsi4>
    1916:	07 fc       	sbrc	r0, 7
    1918:	02 d0       	rcall	.+4      	; 0x191e <__divmodsi4_neg2>
    191a:	46 f4       	brtc	.+16     	; 0x192c <__divmodsi4_exit>
    191c:	08 c0       	rjmp	.+16     	; 0x192e <__negsi2>

0000191e <__divmodsi4_neg2>:
    191e:	50 95       	com	r21
    1920:	40 95       	com	r20
    1922:	30 95       	com	r19
    1924:	21 95       	neg	r18
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
    1928:	4f 4f       	sbci	r20, 0xFF	; 255
    192a:	5f 4f       	sbci	r21, 0xFF	; 255

0000192c <__divmodsi4_exit>:
    192c:	08 95       	ret

0000192e <__negsi2>:
    192e:	90 95       	com	r25
    1930:	80 95       	com	r24
    1932:	70 95       	com	r23
    1934:	61 95       	neg	r22
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	8f 4f       	sbci	r24, 0xFF	; 255
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	08 95       	ret

0000193e <__utoa_ncheck>:
    193e:	bb 27       	eor	r27, r27

00001940 <__utoa_common>:
    1940:	fb 01       	movw	r30, r22
    1942:	55 27       	eor	r21, r21
    1944:	aa 27       	eor	r26, r26
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	aa 1f       	adc	r26, r26
    194c:	a4 17       	cp	r26, r20
    194e:	10 f0       	brcs	.+4      	; 0x1954 <__utoa_common+0x14>
    1950:	a4 1b       	sub	r26, r20
    1952:	83 95       	inc	r24
    1954:	50 51       	subi	r21, 0x10	; 16
    1956:	b9 f7       	brne	.-18     	; 0x1946 <__utoa_common+0x6>
    1958:	a0 5d       	subi	r26, 0xD0	; 208
    195a:	aa 33       	cpi	r26, 0x3A	; 58
    195c:	08 f0       	brcs	.+2      	; 0x1960 <__utoa_common+0x20>
    195e:	a9 5d       	subi	r26, 0xD9	; 217
    1960:	a1 93       	st	Z+, r26
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	79 f7       	brne	.-34     	; 0x1944 <__utoa_common+0x4>
    1966:	b1 11       	cpse	r27, r1
    1968:	b1 93       	st	Z+, r27
    196a:	11 92       	st	Z+, r1
    196c:	cb 01       	movw	r24, r22
    196e:	00 c0       	rjmp	.+0      	; 0x1970 <strrev>

00001970 <strrev>:
    1970:	dc 01       	movw	r26, r24
    1972:	fc 01       	movw	r30, r24
    1974:	67 2f       	mov	r22, r23
    1976:	71 91       	ld	r23, Z+
    1978:	77 23       	and	r23, r23
    197a:	e1 f7       	brne	.-8      	; 0x1974 <strrev+0x4>
    197c:	32 97       	sbiw	r30, 0x02	; 2
    197e:	04 c0       	rjmp	.+8      	; 0x1988 <strrev+0x18>
    1980:	7c 91       	ld	r23, X
    1982:	6d 93       	st	X+, r22
    1984:	70 83       	st	Z, r23
    1986:	62 91       	ld	r22, -Z
    1988:	ae 17       	cp	r26, r30
    198a:	bf 07       	cpc	r27, r31
    198c:	c8 f3       	brcs	.-14     	; 0x1980 <strrev+0x10>
    198e:	08 95       	ret

00001990 <eeprom_read_byte>:
    1990:	e1 99       	sbic	0x1c, 1	; 28
    1992:	fe cf       	rjmp	.-4      	; 0x1990 <eeprom_read_byte>
    1994:	9f bb       	out	0x1f, r25	; 31
    1996:	8e bb       	out	0x1e, r24	; 30
    1998:	e0 9a       	sbi	0x1c, 0	; 28
    199a:	99 27       	eor	r25, r25
    199c:	8d b3       	in	r24, 0x1d	; 29
    199e:	08 95       	ret

000019a0 <eeprom_update_byte>:
    19a0:	26 2f       	mov	r18, r22

000019a2 <eeprom_update_r18>:
    19a2:	e1 99       	sbic	0x1c, 1	; 28
    19a4:	fe cf       	rjmp	.-4      	; 0x19a2 <eeprom_update_r18>
    19a6:	9f bb       	out	0x1f, r25	; 31
    19a8:	8e bb       	out	0x1e, r24	; 30
    19aa:	e0 9a       	sbi	0x1c, 0	; 28
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	0d b2       	in	r0, 0x1d	; 29
    19b0:	02 16       	cp	r0, r18
    19b2:	39 f0       	breq	.+14     	; 0x19c2 <eeprom_update_r18+0x20>
    19b4:	1c ba       	out	0x1c, r1	; 28
    19b6:	2d bb       	out	0x1d, r18	; 29
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	e2 9a       	sbi	0x1c, 2	; 28
    19be:	e1 9a       	sbi	0x1c, 1	; 28
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	08 95       	ret

000019c4 <eeprom_update_dword>:
    19c4:	03 96       	adiw	r24, 0x03	; 3
    19c6:	27 2f       	mov	r18, r23
    19c8:	ec df       	rcall	.-40     	; 0x19a2 <eeprom_update_r18>
    19ca:	ea df       	rcall	.-44     	; 0x19a0 <eeprom_update_byte>
    19cc:	25 2f       	mov	r18, r21
    19ce:	e9 df       	rcall	.-46     	; 0x19a2 <eeprom_update_r18>
    19d0:	24 2f       	mov	r18, r20
    19d2:	e7 cf       	rjmp	.-50     	; 0x19a2 <eeprom_update_r18>

000019d4 <eeprom_update_word>:
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	27 2f       	mov	r18, r23
    19d8:	e4 df       	rcall	.-56     	; 0x19a2 <eeprom_update_r18>
    19da:	e2 cf       	rjmp	.-60     	; 0x19a0 <eeprom_update_byte>

000019dc <_exit>:
    19dc:	f8 94       	cli

000019de <__stop_program>:
    19de:	ff cf       	rjmp	.-2      	; 0x19de <__stop_program>
