
build/zonwering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f44  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001f44  00001ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000014f  00800066  00800066  00001ffe  2**0
                  ALLOC
  3 .eeprom       000000f6  00810000  00810000  00001ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00006a5c  00000000  00000000  000020f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000020e9  00000000  00000000  00008b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000ac39  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000ac4c  2**2
                  CONTENTS, READONLY
  8 .avr.prop     0000002c  00000000  00000000  0000ac88  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000420  00000000  00000000  0000acb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003e8  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000001a  00000000  00000000  0000b4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000173  00000000  00000000  0000b4d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9d c1       	rjmp	.+826    	; 0x33c <__ctors_end>
       2:	b7 c1       	rjmp	.+878    	; 0x372 <__bad_interrupt>
       4:	b6 c1       	rjmp	.+876    	; 0x372 <__bad_interrupt>
       6:	b5 c1       	rjmp	.+874    	; 0x372 <__bad_interrupt>
       8:	b4 c1       	rjmp	.+872    	; 0x372 <__bad_interrupt>
       a:	b3 c1       	rjmp	.+870    	; 0x372 <__bad_interrupt>
       c:	b2 c1       	rjmp	.+868    	; 0x372 <__bad_interrupt>
       e:	b1 c1       	rjmp	.+866    	; 0x372 <__bad_interrupt>
      10:	b0 c1       	rjmp	.+864    	; 0x372 <__bad_interrupt>
      12:	88 c3       	rjmp	.+1808   	; 0x724 <__vector_9>
      14:	ae c1       	rjmp	.+860    	; 0x372 <__bad_interrupt>
      16:	ad c1       	rjmp	.+858    	; 0x372 <__bad_interrupt>
      18:	ac c1       	rjmp	.+856    	; 0x372 <__bad_interrupt>
      1a:	52 c4       	rjmp	.+2212   	; 0x8c0 <__vector_13>
      1c:	aa c1       	rjmp	.+852    	; 0x372 <__bad_interrupt>
      1e:	a9 c1       	rjmp	.+850    	; 0x372 <__bad_interrupt>
      20:	a8 c1       	rjmp	.+848    	; 0x372 <__bad_interrupt>
      22:	4b ca       	rjmp	.-2922   	; 0xfffff4ba <__eeprom_end+0xff7ef3c4>
      24:	60 ca       	rjmp	.-2880   	; 0xfffff4e6 <__eeprom_end+0xff7ef3f0>
      26:	67 ca       	rjmp	.-2866   	; 0xfffff4f6 <__eeprom_end+0xff7ef400>
      28:	68 ca       	rjmp	.-2864   	; 0xfffff4fa <__eeprom_end+0xff7ef404>
      2a:	6f ca       	rjmp	.-2850   	; 0xfffff50a <__eeprom_end+0xff7ef414>
      2c:	70 ca       	rjmp	.-2848   	; 0xfffff50e <__eeprom_end+0xff7ef418>
      2e:	78 ca       	rjmp	.-2832   	; 0xfffff520 <__eeprom_end+0xff7ef42a>
      30:	2e cc       	rjmp	.-1956   	; 0xfffff88e <__eeprom_end+0xff7ef798>
      32:	72 cc       	rjmp	.-1820   	; 0xfffff918 <__eeprom_end+0xff7ef822>
      34:	36 cc       	rjmp	.-1940   	; 0xfffff8a2 <__eeprom_end+0xff7ef7ac>
      36:	48 cc       	rjmp	.-1904   	; 0xfffff8c8 <__eeprom_end+0xff7ef7d2>
      38:	6f cc       	rjmp	.-1826   	; 0xfffff918 <__eeprom_end+0xff7ef822>
      3a:	52 cc       	rjmp	.-1884   	; 0xfffff8e0 <__eeprom_end+0xff7ef7ea>
      3c:	6d cc       	rjmp	.-1830   	; 0xfffff918 <__eeprom_end+0xff7ef822>
      3e:	66 cc       	rjmp	.-1844   	; 0xfffff90c <__eeprom_end+0xff7ef816>
      40:	62 cc       	rjmp	.-1852   	; 0xfffff906 <__eeprom_end+0xff7ef810>
      42:	67 cc       	rjmp	.-1842   	; 0xfffff912 <__eeprom_end+0xff7ef81c>

00000044 <__trampolines_end>:
      44:	0c 0a       	sbc	r0, r28
      46:	20 0c       	add	r2, r0
	...
      54:	2e 08       	sbc	r2, r14
      56:	80 01       	movw	r16, r0
      58:	80 01       	movw	r16, r0
      5a:	00 00       	nop
      5c:	00 00       	nop
      5e:	30 10       	cpse	r3, r0
      60:	fc 00       	.word	0x00fc	; ????
      62:	02 01       	movw	r0, r4
      64:	01 02       	muls	r16, r17
      66:	01 02       	muls	r16, r17
      68:	02 01       	movw	r0, r4
      6a:	fc 00       	.word	0x00fc	; ????
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	31 0e       	add	r3, r17
      72:	00 00       	nop
      74:	04 00       	.word	0x0004	; ????
      76:	02 00       	.word	0x0002	; ????
      78:	ff 03       	fmulsu	r23, r23
      7a:	00 00       	nop
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	32 10       	cpse	r3, r2
      82:	82 03       	fmuls	r16, r18
      84:	41 02       	muls	r20, r17
      86:	21 02       	muls	r18, r17
      88:	11 02       	muls	r17, r17
      8a:	09 02       	muls	r16, r25
      8c:	06 02       	muls	r16, r22
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	33 10       	cpse	r3, r3
      94:	02 01       	movw	r0, r4
      96:	01 02       	muls	r16, r17
      98:	11 02       	muls	r17, r17
      9a:	11 02       	muls	r17, r17
      9c:	2a 01       	movw	r4, r20
      9e:	c4 00       	.word	0x00c4	; ????
      a0:	00 00       	nop
      a2:	00 00       	nop
      a4:	34 10       	cpse	r3, r4
      a6:	60 00       	.word	0x0060	; ????
      a8:	58 00       	.word	0x0058	; ????
      aa:	46 00       	.word	0x0046	; ????
      ac:	41 00       	.word	0x0041	; ????
      ae:	ff 03       	fmulsu	r23, r23
      b0:	40 00       	.word	0x0040	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	35 10       	cpse	r3, r5
      b8:	1f 01       	movw	r2, r30
      ba:	11 02       	muls	r17, r17
      bc:	11 02       	muls	r17, r17
      be:	11 02       	muls	r17, r17
      c0:	21 01       	movw	r4, r2
      c2:	c0 00       	.word	0x00c0	; ????
      c4:	00 00       	nop
      c6:	00 00       	nop
      c8:	36 10       	cpse	r3, r6
      ca:	fc 00       	.word	0x00fc	; ????
      cc:	12 01       	movw	r2, r4
      ce:	11 02       	muls	r17, r17
      d0:	11 02       	muls	r17, r17
      d2:	21 01       	movw	r4, r2
      d4:	c2 00       	.word	0x00c2	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	37 10       	cpse	r3, r7
      dc:	02 00       	.word	0x0002	; ????
      de:	01 00       	.word	0x0001	; ????
      e0:	01 00       	.word	0x0001	; ????
      e2:	c1 03       	fmuls	r20, r17
      e4:	31 00       	.word	0x0031	; ????
      e6:	0f 00       	.word	0x000f	; ????
      e8:	00 00       	nop
      ea:	00 00       	nop
      ec:	38 12       	cpse	r3, r24
      ee:	c4 00       	.word	0x00c4	; ????
      f0:	2a 01       	movw	r4, r20
      f2:	11 02       	muls	r17, r17
      f4:	11 02       	muls	r17, r17
      f6:	11 02       	muls	r17, r17
      f8:	2a 01       	movw	r4, r20
      fa:	c4 00       	.word	0x00c4	; ????
      fc:	00 00       	nop
      fe:	00 00       	nop
     100:	39 10       	cpse	r3, r9
     102:	0c 01       	movw	r0, r24
     104:	12 02       	muls	r17, r18
     106:	21 02       	muls	r18, r17
     108:	21 02       	muls	r18, r17
     10a:	22 01       	movw	r4, r4
     10c:	dc 00       	.word	0x00dc	; ????
     10e:	00 00       	nop
	...

00000112 <lines5x12>:
     112:	05 0c 20 02 01 08 2f 02 fd 0b 3d 0a 01 08 01 08     .. .../...=.....
     122:	01 08 01 08 01 08 5b 0a ff 0f 01 08 01 08 01 08     ......[.........
     132:	01 08 5d 0a 01 08 01 08 01 08 01 08 ff 0f           ..]...........

00000140 <font5x8>:
     140:	43 08 20 04 00 00 00 00 2c 03 e0 60 00 2e 03 60     C. .....,..`...`
     150:	60 00 30 06 3e 51 49 45 3e 00 31 04 42 7f 40 00     `.0.>QIE>.1.B.@.
     160:	32 06 62 51 49 49 46 00 33 06 22 49 49 49 36 00     2.bQIIF.3."III6.
     170:	34 06 18 14 12 7f 10 00 35 06 2f 49 49 49 31 00     4.......5./III1.
     180:	36 06 3c 4a 49 49 30 00 37 06 01 71 09 05 03 00     6.<JII0.7..q....
     190:	38 06 36 49 49 49 36 00 39 06 06 49 49 29 1e 00     8.6III6.9..II)..
     1a0:	3f 06 02 01 59 09 06 00 41 06 7e 11 11 11 7e 00     ?...Y...A.~...~.
     1b0:	42 06 7f 49 49 49 36 00 43 06 3e 41 41 41 22 00     B..III6.C.>AAA".
     1c0:	44 06 7f 41 41 41 3e 00 45 06 7f 49 49 49 41 00     D..AAA>.E..IIIA.
     1d0:	46 06 7f 09 09 09 01 00 47 06 3e 41 49 49 7a 00     F.......G.>AIIz.
     1e0:	48 06 7f 08 08 08 7f 00 49 04 41 7f 41 00 4a 06     H.......I.A.A.J.
     1f0:	30 40 40 40 3f 00 4b 06 7f 08 14 22 41 00 4c 06     0@@@?.K...."A.L.
     200:	7f 40 40 40 40 00 4d 06 7f 02 04 02 7f 00 4e 06     .@@@@.M.......N.
     210:	7f 02 04 08 7f 00 4f 06 3e 41 41 41 3e 00 50 06     ......O.>AAA>.P.
     220:	7f 09 09 09 06 00 51 06 3e 41 51 21 5e 00 52 06     ......Q.>AQ!^.R.
     230:	7f 09 09 19 66 00 53 06 26 49 49 49 32 00 54 06     ....f.S.&III2.T.
     240:	01 01 7f 01 01 00 55 06 3f 40 40 40 3f 00 56 06     ......U.?@@@?.V.
     250:	1f 20 40 20 1f 00 57 06 3f 40 3c 40 3f 00 58 06     . @ ..W.?@<@?.X.
     260:	63 14 08 14 63 00 59 06 07 08 70 08 07 00 5a 05     c...c.Y...p...Z.
     270:	71 49 45 43 00 5f 05 01 01 01 01 01 61 06 20 54     qIEC._......a. T
     280:	54 54 78 00 62 06 7f 44 44 44 38 00 63 06 38 44     TTx.b..DDD8.c.8D
     290:	44 44 28 00 64 06 38 44 44 44 7f 00 65 06 38 54     DD(.d.8DDD..e.8T
     2a0:	54 54 08 00 66 05 08 7e 09 09 00 67 06 18 a4 a4     TT..f..~...g....
     2b0:	a4 7c 00 68 05 7f 04 04 78 00 69 03 7d 40 00 6a     .|.h....x.i.}@.j
     2c0:	05 40 80 84 7d 00 6b 05 7f 10 28 44 00 6c 04 7f     .@..}.k...(D.l..
     2d0:	40 40 00 6d 06 7c 04 18 04 78 00 6e 05 7c 04 04     @@.m.|...x.n.|..
     2e0:	78 00 6f 06 38 44 44 44 38 00 70 05 fc 44 44 38     x.o.8DDD8.p..DD8
     2f0:	00 71 05 38 44 44 fc 00 72 06 44 78 44 04 08 00     .q.8DD..r.DxD...
     300:	73 06 08 54 54 54 20 00 74 05 04 3e 44 24 00 75     s..TTT .t..>D$.u
     310:	05 3c 40 20 7c 00 76 06 1c 20 40 20 1c 00 77 06     .<@ |.v.. @ ..w.
     320:	3c 60 30 60 3c 00 78 05 6c 10 10 6c 00 79 05 9c     <`0`<.x.l..l.y..
     330:	a0 60 3c 00 7a 05 64 54 54 4c 00 00                 .`<.z.dTTL..

0000033c <__ctors_end>:
     33c:	11 24       	eor	r1, r1
     33e:	1f be       	out	0x3f, r1	; 63
     340:	cf e5       	ldi	r28, 0x5F	; 95
     342:	d2 e0       	ldi	r29, 0x02	; 2
     344:	de bf       	out	0x3e, r29	; 62
     346:	cd bf       	out	0x3d, r28	; 61

00000348 <__do_copy_data>:
     348:	10 e0       	ldi	r17, 0x00	; 0
     34a:	a0 e6       	ldi	r26, 0x60	; 96
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	e4 e4       	ldi	r30, 0x44	; 68
     350:	ff e1       	ldi	r31, 0x1F	; 31
     352:	02 c0       	rjmp	.+4      	; 0x358 <__do_copy_data+0x10>
     354:	05 90       	lpm	r0, Z+
     356:	0d 92       	st	X+, r0
     358:	a6 36       	cpi	r26, 0x66	; 102
     35a:	b1 07       	cpc	r27, r17
     35c:	d9 f7       	brne	.-10     	; 0x354 <__do_copy_data+0xc>

0000035e <__do_clear_bss>:
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	a6 e6       	ldi	r26, 0x66	; 102
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	01 c0       	rjmp	.+2      	; 0x368 <.do_clear_bss_start>

00000366 <.do_clear_bss_loop>:
     366:	1d 92       	st	X+, r1

00000368 <.do_clear_bss_start>:
     368:	a5 3b       	cpi	r26, 0xB5	; 181
     36a:	b2 07       	cpc	r27, r18
     36c:	e1 f7       	brne	.-8      	; 0x366 <.do_clear_bss_loop>
     36e:	02 d0       	rcall	.+4      	; 0x374 <main>
     370:	e7 cd       	rjmp	.-1074   	; 0xffffff40 <__eeprom_end+0xff7efe4a>

00000372 <__bad_interrupt>:
     372:	46 ce       	rjmp	.-884    	; 0x0 <__vectors>

00000374 <main>:
}
#endif

int main (void)
{
   KernelSetup();
     374:	96 d0       	rcall	.+300    	; 0x4a2 <KernelSetup>
   AdcSetup();
     376:	91 d2       	rcall	.+1314   	; 0x89a <AdcSetup>
   MotorSetup();
     378:	60 d9       	rcall	.-3392   	; 0xfffff63a <__eeprom_end+0xff7ef544>
   ButtonSetup();
     37a:	29 d8       	rcall	.-4014   	; 0xfffff3ce <__eeprom_end+0xff7ef2d8>
   NonVolataileSetup();
     37c:	d8 dc       	rcall	.-1616   	; 0xfffffd2e <__eeprom_end+0xff7efc38>

#ifdef test
   InitTask(TESTSTACKSIZE, testStack, TestTask);
#else
   InitTask(EEPROMTASKSTACKSIZE, eepromTaskStack, NonVolataileTask);
     37e:	46 eb       	ldi	r20, 0xB6	; 182
     380:	5e e0       	ldi	r21, 0x0E	; 14
     382:	60 e2       	ldi	r22, 0x20	; 32
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	83 e3       	ldi	r24, 0x33	; 51
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	14 d0       	rcall	.+40     	; 0x3b4 <InitTask>
   InitTask(MOTORSTACKSIZE, motorStack, MotorTask);
     38c:	41 e4       	ldi	r20, 0x41	; 65
     38e:	5b e0       	ldi	r21, 0x0B	; 11
     390:	60 e8       	ldi	r22, 0x80	; 128
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	8d e3       	ldi	r24, 0x3D	; 61
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0d d0       	rcall	.+26     	; 0x3b4 <InitTask>
   InitTask(BUTTONSTACKSIZE, buttonStack, ButtonTask);
     39a:	4a ee       	ldi	r20, 0xEA	; 234
     39c:	59 e0       	ldi	r21, 0x09	; 9
     39e:	6d eb       	ldi	r22, 0xBD	; 189
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	83 e6       	ldi	r24, 0x63	; 99
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	06 d0       	rcall	.+12     	; 0x3b4 <InitTask>
#endif

   StartKernel(NULL);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	a0 d1       	rcall	.+832    	; 0x6ee <StartKernel>
}
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	08 95       	ret

000003b4 <InitTask>:
   InitTask(sizeof(IdleTaskStack), IdleTaskStack, IdleTask);
}

uint8_t InitTask(uint16_t stackSize, uint8_t* stackBuffer, TaskFunction function)
{
   uint8_t* stackptr = stackBuffer + stackSize - 1;
     3b4:	dc 01       	movw	r26, r24
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	a6 0f       	add	r26, r22
     3ba:	b7 1f       	adc	r27, r23
   
   *stackptr-- = (uint16_t)function & 0x00ff;
     3bc:	4c 93       	st	X, r20
   *stackptr-- = (uint16_t)function >> 8;
     3be:	fd 01       	movw	r30, r26
     3c0:	31 97       	sbiw	r30, 0x01	; 1
     3c2:	50 83       	st	Z, r21
   *stackptr-- = 0x00;                                         // register R0
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	10 82       	st	Z, r1
   *stackptr-- = 0x00; nrTasks == 0 ? 0x00 : 0x80;             // status register; interrupt will be enabled later
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	10 82       	st	Z, r1
     3cc:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <nrTasks>

   tasks[nrTasks].stackbuffer = stackBuffer;
     3d0:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <nrTasks>
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	ee 0f       	add	r30, r30
     3da:	ff 1f       	adc	r31, r31
     3dc:	ee 0f       	add	r30, r30
     3de:	ff 1f       	adc	r31, r31
     3e0:	e2 0f       	add	r30, r18
     3e2:	f3 1f       	adc	r31, r19
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	eb 5a       	subi	r30, 0xAB	; 171
     3ea:	fe 4f       	sbci	r31, 0xFE	; 254
     3ec:	71 83       	std	Z+1, r23	; 0x01
     3ee:	60 83       	st	Z, r22
   tasks[nrTasks].StackPointer = (uint16_t)stackptr - 31;      // store stack pointer
     3f0:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <nrTasks>
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	93 97       	sbiw	r26, 0x23	; 35
     3f8:	f9 01       	movw	r30, r18
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	e2 0f       	add	r30, r18
     404:	f3 1f       	adc	r31, r19
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	eb 5a       	subi	r30, 0xAB	; 171
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	b3 83       	std	Z+3, r27	; 0x03
     410:	a2 83       	std	Z+2, r26	; 0x02
   tasks[nrTasks].StackSize = stackSize;
     412:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <nrTasks>
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	f9 01       	movw	r30, r18
     41a:	ee 0f       	add	r30, r30
     41c:	ff 1f       	adc	r31, r31
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	e2 0f       	add	r30, r18
     424:	f3 1f       	adc	r31, r19
     426:	ee 0f       	add	r30, r30
     428:	ff 1f       	adc	r31, r31
     42a:	eb 5a       	subi	r30, 0xAB	; 171
     42c:	fe 4f       	sbci	r31, 0xFE	; 254
     42e:	95 83       	std	Z+5, r25	; 0x05
     430:	84 83       	std	Z+4, r24	; 0x04
   tasks[nrTasks].Handle = nrTasks;
     432:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <nrTasks>
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <nrTasks>
     43c:	fc 01       	movw	r30, r24
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	e8 0f       	add	r30, r24
     448:	f9 1f       	adc	r31, r25
     44a:	ee 0f       	add	r30, r30
     44c:	ff 1f       	adc	r31, r31
     44e:	eb 5a       	subi	r30, 0xAB	; 171
     450:	fe 4f       	sbci	r31, 0xFE	; 254
     452:	26 83       	std	Z+6, r18	; 0x06
   tasks[nrTasks].TaskState = StateRunable;
     454:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <nrTasks>
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fc 01       	movw	r30, r24
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	e8 0f       	add	r30, r24
     466:	f9 1f       	adc	r31, r25
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	eb 5a       	subi	r30, 0xAB	; 171
     46e:	fe 4f       	sbci	r31, 0xFE	; 254
     470:	80 e4       	ldi	r24, 0x40	; 64
     472:	87 83       	std	Z+7, r24	; 0x07
   tasks[nrTasks].NextRunTime = 0;
     474:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <nrTasks>
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	fc 01       	movw	r30, r24
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	ee 0f       	add	r30, r30
     482:	ff 1f       	adc	r31, r31
     484:	e8 0f       	add	r30, r24
     486:	f9 1f       	adc	r31, r25
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	eb 5a       	subi	r30, 0xAB	; 171
     48e:	fe 4f       	sbci	r31, 0xFE	; 254
     490:	11 86       	std	Z+9, r1	; 0x09
     492:	10 86       	std	Z+8, r1	; 0x08

   return nrTasks++;
     494:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <nrTasks>
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	98 0f       	add	r25, r24
     49c:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <nrTasks>
}
     4a0:	08 95       	ret

000004a2 <KernelSetup>:
}

void KernelSetup()
{
   // timer / counter 0 is used to generate the 1 ms timing
   KernelTimerCounter = 0;
     4a2:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <KernelTimerCounter+0x1>
     4a6:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <KernelTimerCounter>
   TCCR0A = (1<<WGM01);            // CTC mode
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	80 bf       	out	0x30, r24	; 48
   TCCR0B = (1<<CS01);             // 8 MHz divide by 64 prescaler produces 125 KHz clock source
     4ae:	83 bf       	out	0x33, r24	; 51
   OCR0A = 124;                    // 125 - 1 gives 1 ms compare match interrupts used for task switching
     4b0:	8c e7       	ldi	r24, 0x7C	; 124
     4b2:	86 bf       	out	0x36, r24	; 54

   nrTasks = 0;
     4b4:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <nrTasks>
   InitTask(sizeof(IdleTaskStack), IdleTaskStack, IdleTask);
     4b8:	46 e4       	ldi	r20, 0x46	; 70
     4ba:	53 e0       	ldi	r21, 0x03	; 3
     4bc:	69 e8       	ldi	r22, 0x89	; 137
     4be:	71 e0       	ldi	r23, 0x01	; 1
     4c0:	87 e2       	ldi	r24, 0x27	; 39
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	77 df       	rcall	.-274    	; 0x3b4 <InitTask>
     4c6:	08 95       	ret

000004c8 <TaskSleep>:
}

void TaskSleep(uint16_t time)
{
   // store context of current task
   __asm volatile(
     4c8:	f8 94       	cli
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	1f 92       	push	r1
     4d2:	2f 92       	push	r2
     4d4:	3f 92       	push	r3
     4d6:	4f 92       	push	r4
     4d8:	5f 92       	push	r5
     4da:	6f 92       	push	r6
     4dc:	7f 92       	push	r7
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	2f 93       	push	r18
     4f4:	3f 93       	push	r19
     4f6:	4f 93       	push	r20
     4f8:	5f 93       	push	r21
     4fa:	6f 93       	push	r22
     4fc:	7f 93       	push	r23
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	af 93       	push	r26
     504:	bf 93       	push	r27
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	ef 93       	push	r30
     50c:	ff 93       	push	r31
     50e:	11 24       	eor	r1, r1
      "              push r30          \n\t"
      "              push r31          \n\t"
      "              clr r1            \n\t" // reset the "zero" register
   ::);
   
   tasks[TaskIndex].StackPointer = SP;
     510:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <TaskIndex>
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	4d b7       	in	r20, 0x3d	; 61
     518:	5e b7       	in	r21, 0x3e	; 62
     51a:	f9 01       	movw	r30, r18
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	ee 0f       	add	r30, r30
     522:	ff 1f       	adc	r31, r31
     524:	e2 0f       	add	r30, r18
     526:	f3 1f       	adc	r31, r19
     528:	ee 0f       	add	r30, r30
     52a:	ff 1f       	adc	r31, r31
     52c:	eb 5a       	subi	r30, 0xAB	; 171
     52e:	fe 4f       	sbci	r31, 0xFE	; 254
     530:	53 83       	std	Z+3, r21	; 0x03
     532:	42 83       	std	Z+2, r20	; 0x02

   if (time > 0)
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	31 f1       	breq	.+76     	; 0x584 <TaskSleep+0xbc>
   {
      tasks[TaskIndex].TaskState = StateWaiting;
     538:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <TaskIndex>
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	f9 01       	movw	r30, r18
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	ee 0f       	add	r30, r30
     546:	ff 1f       	adc	r31, r31
     548:	e2 0f       	add	r30, r18
     54a:	f3 1f       	adc	r31, r19
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	eb 5a       	subi	r30, 0xAB	; 171
     552:	fe 4f       	sbci	r31, 0xFE	; 254
     554:	20 e2       	ldi	r18, 0x20	; 32
     556:	27 83       	std	Z+7, r18	; 0x07
      tasks[TaskIndex].NextRunTime = KernelTimerCounter + time;
     558:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <TaskIndex>
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 91 87 01 	lds	r20, 0x0187	; 0x800187 <KernelTimerCounter>
     562:	50 91 88 01 	lds	r21, 0x0188	; 0x800188 <KernelTimerCounter+0x1>
     566:	84 0f       	add	r24, r20
     568:	95 1f       	adc	r25, r21
     56a:	f9 01       	movw	r30, r18
     56c:	ee 0f       	add	r30, r30
     56e:	ff 1f       	adc	r31, r31
     570:	ee 0f       	add	r30, r30
     572:	ff 1f       	adc	r31, r31
     574:	e2 0f       	add	r30, r18
     576:	f3 1f       	adc	r31, r19
     578:	ee 0f       	add	r30, r30
     57a:	ff 1f       	adc	r31, r31
     57c:	eb 5a       	subi	r30, 0xAB	; 171
     57e:	fe 4f       	sbci	r31, 0xFE	; 254
     580:	91 87       	std	Z+9, r25	; 0x09
     582:	80 87       	std	Z+8, r24	; 0x08
   }

   // find new task to run
   if (TaskIndex == 0) TaskIndex++;
     584:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TaskIndex>
     588:	81 11       	cpse	r24, r1
     58a:	05 c0       	rjmp	.+10     	; 0x596 <TaskSleep+0xce>
     58c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TaskIndex>
     590:	8f 5f       	subi	r24, 0xFF	; 255
     592:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TaskIndex>
   TaskIterator = TaskIndex;
     596:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TaskIndex>
     59a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <TaskIterator>
   do
   {
      TaskIterator = TaskIterator >= nrTasks - 1 ? 1 : TaskIterator + 1;
     59e:	41 e0       	ldi	r20, 0x01	; 1
     5a0:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <TaskIterator>
     5a4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <nrTasks>
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	28 17       	cp	r18, r24
     5b0:	39 07       	cpc	r19, r25
     5b2:	24 f4       	brge	.+8      	; 0x5bc <TaskSleep+0xf4>
     5b4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <TaskIterator>
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	01 c0       	rjmp	.+2      	; 0x5be <TaskSleep+0xf6>
     5bc:	84 2f       	mov	r24, r20
     5be:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <TaskIterator>
   }
   while ((TaskIterator != TaskIndex) && (tasks[TaskIterator].TaskState != StateRunable));
     5c2:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <TaskIterator>
     5c6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TaskIndex>
     5ca:	98 17       	cp	r25, r24
     5cc:	89 f0       	breq	.+34     	; 0x5f0 <TaskSleep+0x128>
     5ce:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <TaskIterator>
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	fc 01       	movw	r30, r24
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	e8 0f       	add	r30, r24
     5e0:	f9 1f       	adc	r31, r25
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	eb 5a       	subi	r30, 0xAB	; 171
     5e8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ea:	87 81       	ldd	r24, Z+7	; 0x07
     5ec:	80 34       	cpi	r24, 0x40	; 64
     5ee:	c1 f6       	brne	.-80     	; 0x5a0 <TaskSleep+0xd8>

   TaskIndex = tasks[TaskIterator].TaskState == StateRunable ? TaskIterator : 0;
     5f0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <TaskIterator>
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	e8 0f       	add	r30, r24
     602:	f9 1f       	adc	r31, r25
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	eb 5a       	subi	r30, 0xAB	; 171
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	87 81       	ldd	r24, Z+7	; 0x07
     60e:	80 34       	cpi	r24, 0x40	; 64
     610:	19 f4       	brne	.+6      	; 0x618 <TaskSleep+0x150>
     612:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <TaskIterator>
     616:	01 c0       	rjmp	.+2      	; 0x61a <TaskSleep+0x152>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TaskIndex>

   // retrieve context of next task to run
   SP = tasks[TaskIndex].StackPointer;
     61e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TaskIndex>
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	e8 0f       	add	r30, r24
     630:	f9 1f       	adc	r31, r25
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	eb 5a       	subi	r30, 0xAB	; 171
     638:	fe 4f       	sbci	r31, 0xFE	; 254
     63a:	82 81       	ldd	r24, Z+2	; 0x02
     63c:	93 81       	ldd	r25, Z+3	; 0x03
     63e:	9e bf       	out	0x3e, r25	; 62
     640:	8d bf       	out	0x3d, r24	; 61

00000642 <start>:

   __asm volatile(
     642:	ff 91       	pop	r31
     644:	ef 91       	pop	r30
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	7f 91       	pop	r23
     654:	6f 91       	pop	r22
     656:	5f 91       	pop	r21
     658:	4f 91       	pop	r20
     65a:	3f 91       	pop	r19
     65c:	2f 91       	pop	r18
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	9f 90       	pop	r9
     670:	8f 90       	pop	r8
     672:	7f 90       	pop	r7
     674:	6f 90       	pop	r6
     676:	5f 90       	pop	r5
     678:	4f 90       	pop	r4
     67a:	3f 90       	pop	r3
     67c:	2f 90       	pop	r2
     67e:	1f 90       	pop	r1
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	78 94       	sei
     688:	08 95       	ret
     68a:	08 95       	ret

0000068c <IdleTask>:

void IdleTask(void);

void IdleTask(void)
{
   if (initFunction != NULL)
     68c:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <initFunction>
     690:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <initFunction+0x1>
     694:	30 97       	sbiw	r30, 0x00	; 0
     696:	09 f0       	breq	.+2      	; 0x69a <IdleTask+0xe>
   {
      initFunction();
     698:	09 95       	icall
   }

   while(true)
   {
      TaskSleep(0);
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	14 df       	rcall	.-472    	; 0x4c8 <TaskSleep>
     6a0:	fc cf       	rjmp	.-8      	; 0x69a <IdleTask+0xe>

000006a2 <TaskStart>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6a2:	f8 94       	cli

void TaskStart(uint8_t index)
{
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      tasks[index].TaskState = StateRunable;
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	fc 01       	movw	r30, r24
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	e8 0f       	add	r30, r24
     6b2:	f9 1f       	adc	r31, r25
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	eb 5a       	subi	r30, 0xAB	; 171
     6ba:	fe 4f       	sbci	r31, 0xFE	; 254
     6bc:	80 e4       	ldi	r24, 0x40	; 64
     6be:	87 83       	std	Z+7, r24	; 0x07
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     6c0:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     6c2:	08 95       	ret

000006c4 <TaskStop>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6c4:	f8 94       	cli

void TaskStop(uint8_t index)
{
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      tasks[index].TaskState = StateStopped;
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	fc 01       	movw	r30, r24
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	e8 0f       	add	r30, r24
     6d4:	f9 1f       	adc	r31, r25
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	eb 5a       	subi	r30, 0xAB	; 171
     6dc:	fe 4f       	sbci	r31, 0xFE	; 254
     6de:	80 e1       	ldi	r24, 0x10	; 16
     6e0:	87 83       	std	Z+7, r24	; 0x07
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     6e2:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     6e4:	08 95       	ret

000006e6 <EnableTaskSwitching>:
   }
}

void EnableTaskSwitching(void)
{
   TIMSK0 |= (1<<OCIE0A);           // enable timer 0 compare match interrupt
     6e6:	89 b7       	in	r24, 0x39	; 57
     6e8:	82 60       	ori	r24, 0x02	; 2
     6ea:	89 bf       	out	0x39, r24	; 57
     6ec:	08 95       	ret

000006ee <StartKernel>:
   return nrTasks++;
}

void StartKernel(TaskFunction function)
{
   TaskIndex = 0;
     6ee:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <TaskIndex>
   initFunction = function;
     6f2:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <initFunction+0x1>
     6f6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <initFunction>
   
   EnableTaskSwitching();
     6fa:	f5 df       	rcall	.-22     	; 0x6e6 <EnableTaskSwitching>
   SP = tasks[TaskIndex].StackPointer;
     6fc:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TaskIndex>
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	fc 01       	movw	r30, r24
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	e8 0f       	add	r30, r24
     70e:	f9 1f       	adc	r31, r25
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	eb 5a       	subi	r30, 0xAB	; 171
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	82 81       	ldd	r24, Z+2	; 0x02
     71a:	93 81       	ldd	r25, Z+3	; 0x03
     71c:	9e bf       	out	0x3e, r25	; 62
     71e:	8d bf       	out	0x3d, r24	; 61

   __asm volatile(
     720:	90 cf       	rjmp	.-224    	; 0x642 <start>
     722:	08 95       	ret

00000724 <__vector_9>:
{
   TIMSK0 |= (1<<OCIE0A);           // enable timer 0 compare match interrupt
}

ISR (TIM0_COMPA_vect)
{
     724:	1f 92       	push	r1
     726:	0f 92       	push	r0
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	0f 92       	push	r0
     72c:	11 24       	eor	r1, r1
     72e:	2f 93       	push	r18
     730:	3f 93       	push	r19
     732:	4f 93       	push	r20
     734:	5f 93       	push	r21
     736:	6f 93       	push	r22
     738:	7f 93       	push	r23
     73a:	8f 93       	push	r24
     73c:	9f 93       	push	r25
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
   static uint8_t delay = 0;
   static uint8_t i;
   
   sei(); // allow other interrupts (ADC)
     742:	78 94       	sei
   
   delay++;
     744:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <delay.1571>
     748:	8f 5f       	subi	r24, 0xFF	; 255
   if (delay == 10)
     74a:	8a 30       	cpi	r24, 0x0A	; 10
     74c:	19 f0       	breq	.+6      	; 0x754 <__vector_9+0x30>
   static uint8_t delay = 0;
   static uint8_t i;
   
   sei(); // allow other interrupts (ADC)
   
   delay++;
     74e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <delay.1571>
     752:	4a c0       	rjmp	.+148    	; 0x7e8 <__vector_9+0xc4>
   if (delay == 10)
   {
      delay = 0;
     754:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <delay.1571>
      KernelTimerCounter++;
     758:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <KernelTimerCounter>
     75c:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <KernelTimerCounter+0x1>
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <KernelTimerCounter+0x1>
     766:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <KernelTimerCounter>

      // update status of each task
      for (i = 0; i < nrTasks; i++)
     76a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
     76e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <nrTasks>
     772:	88 23       	and	r24, r24
     774:	c9 f1       	breq	.+114    	; 0x7e8 <__vector_9+0xc4>
     776:	20 e0       	ldi	r18, 0x00	; 0
      {
         if ((tasks[i].NextRunTime == KernelTimerCounter) &&
            (tasks[i].TaskState != StateStopped))
         {
            tasks[i].TaskState = StateRunable;
     778:	30 e4       	ldi	r19, 0x40	; 64
      KernelTimerCounter++;

      // update status of each task
      for (i = 0; i < nrTasks; i++)
      {
         if ((tasks[i].NextRunTime == KernelTimerCounter) &&
     77a:	82 2f       	mov	r24, r18
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	fc 01       	movw	r30, r24
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	e8 0f       	add	r30, r24
     78a:	f9 1f       	adc	r31, r25
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	eb 5a       	subi	r30, 0xAB	; 171
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	60 85       	ldd	r22, Z+8	; 0x08
     796:	71 85       	ldd	r23, Z+9	; 0x09
     798:	40 91 87 01 	lds	r20, 0x0187	; 0x800187 <KernelTimerCounter>
     79c:	50 91 88 01 	lds	r21, 0x0188	; 0x800188 <KernelTimerCounter+0x1>
     7a0:	64 17       	cp	r22, r20
     7a2:	75 07       	cpc	r23, r21
     7a4:	d1 f4       	brne	.+52     	; 0x7da <__vector_9+0xb6>
            (tasks[i].TaskState != StateStopped))
     7a6:	fc 01       	movw	r30, r24
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	e8 0f       	add	r30, r24
     7b2:	f9 1f       	adc	r31, r25
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	eb 5a       	subi	r30, 0xAB	; 171
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	47 81       	ldd	r20, Z+7	; 0x07
      KernelTimerCounter++;

      // update status of each task
      for (i = 0; i < nrTasks; i++)
      {
         if ((tasks[i].NextRunTime == KernelTimerCounter) &&
     7be:	40 31       	cpi	r20, 0x10	; 16
     7c0:	61 f0       	breq	.+24     	; 0x7da <__vector_9+0xb6>
            (tasks[i].TaskState != StateStopped))
         {
            tasks[i].TaskState = StateRunable;
     7c2:	fc 01       	movw	r30, r24
     7c4:	ee 0f       	add	r30, r30
     7c6:	ff 1f       	adc	r31, r31
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	e8 0f       	add	r30, r24
     7ce:	f9 1f       	adc	r31, r25
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	eb 5a       	subi	r30, 0xAB	; 171
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	37 83       	std	Z+7, r19	; 0x07
   {
      delay = 0;
      KernelTimerCounter++;

      // update status of each task
      for (i = 0; i < nrTasks; i++)
     7da:	2f 5f       	subi	r18, 0xFF	; 255
     7dc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <nrTasks>
     7e0:	28 17       	cp	r18, r24
     7e2:	58 f2       	brcs	.-106    	; 0x77a <__vector_9+0x56>
     7e4:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
         {
            tasks[i].TaskState = StateRunable;
         }
      }
   }
}
     7e8:	ff 91       	pop	r31
     7ea:	ef 91       	pop	r30
     7ec:	9f 91       	pop	r25
     7ee:	8f 91       	pop	r24
     7f0:	7f 91       	pop	r23
     7f2:	6f 91       	pop	r22
     7f4:	5f 91       	pop	r21
     7f6:	4f 91       	pop	r20
     7f8:	3f 91       	pop	r19
     7fa:	2f 91       	pop	r18
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	18 95       	reti

00000806 <GetVoltage>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     806:	f8 94       	cli
int16_t GetVoltage(void)
{
   int16_t value;
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      value = button; //voltage;
     808:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     80c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     810:	78 94       	sei
   }
   return value * 4 / 3;
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	63 e0       	ldi	r22, 0x03	; 3
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	e8 da       	rcall	.-2608   	; 0xfffffdf0 <__eeprom_end+0xff7efcfa>
     820:	cb 01       	movw	r24, r22
}
     822:	08 95       	ret

00000824 <GetAdcButton>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     824:	f8 94       	cli
{
   enum ButtonAdc value;

   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      if ((button >= 480) && (button <= 520))        value = ButtonAdcMenu;  // 1.60V, cnt=500
     826:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     82a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     82e:	80 3e       	cpi	r24, 0xE0	; 224
     830:	91 40       	sbci	r25, 0x01	; 1
     832:	3c f0       	brlt	.+14     	; 0x842 <GetAdcButton+0x1e>
     834:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     838:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     83c:	89 30       	cpi	r24, 0x09	; 9
     83e:	92 40       	sbci	r25, 0x02	; 2
     840:	f4 f0       	brlt	.+60     	; 0x87e <GetAdcButton+0x5a>
      else if ((button >= 658) && (button <= 698))   value = ButtonAdcDown;  // 1.05V, cnt=680
     842:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     846:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     84a:	82 39       	cpi	r24, 0x92	; 146
     84c:	92 40       	sbci	r25, 0x02	; 2
     84e:	3c f0       	brlt	.+14     	; 0x85e <GetAdcButton+0x3a>
     850:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     854:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     858:	8b 3b       	cpi	r24, 0xBB	; 187
     85a:	92 40       	sbci	r25, 0x02	; 2
     85c:	94 f0       	brlt	.+36     	; 0x882 <GetAdcButton+0x5e>
      else if ((button >= 1000) && (button <= 1040)) value = ButtonAdcUp;    // 3.30V, cnt=1023
     85e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     862:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     866:	88 3e       	cpi	r24, 0xE8	; 232
     868:	93 40       	sbci	r25, 0x03	; 3
     86a:	6c f0       	brlt	.+26     	; 0x886 <GetAdcButton+0x62>
     86c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <button>
     870:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <button+0x1>
     874:	81 31       	cpi	r24, 0x11	; 17
     876:	94 40       	sbci	r25, 0x04	; 4
     878:	44 f4       	brge	.+16     	; 0x88a <GetAdcButton+0x66>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	07 c0       	rjmp	.+14     	; 0x88c <GetAdcButton+0x68>
{
   enum ButtonAdc value;

   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      if ((button >= 480) && (button <= 520))        value = ButtonAdcMenu;  // 1.60V, cnt=500
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	05 c0       	rjmp	.+10     	; 0x88c <GetAdcButton+0x68>
      else if ((button >= 658) && (button <= 698))   value = ButtonAdcDown;  // 1.05V, cnt=680
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	03 c0       	rjmp	.+6      	; 0x88c <GetAdcButton+0x68>
      else if ((button >= 1000) && (button <= 1040)) value = ButtonAdcUp;    // 3.30V, cnt=1023
      else value = ButtonAdcNone;
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	01 c0       	rjmp	.+2      	; 0x88c <GetAdcButton+0x68>
     88a:	80 e0       	ldi	r24, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     88c:	78 94       	sei
   }
   return value;
}
     88e:	08 95       	ret

00000890 <GetNrSamples>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     890:	f8 94       	cli
uint16_t GetNrSamples(void)
{
   uint16_t value;
   ATOMIC_BLOCK(ATOMIC_FORCEON)
   {
      value = OCR1A;
     892:	8a b5       	in	r24, 0x2a	; 42
     894:	9b b5       	in	r25, 0x2b	; 43
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     896:	78 94       	sei
   }
   return value;
}
     898:	08 95       	ret

0000089a <AdcSetup>:

void AdcSetup(void)
{
   /* ADC setup */
   DIDR0 = (1 << ADC0D) | (1 << ADC1D);                     // disable digital buffer for ADC0 and ADC1
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	81 b9       	out	0x01, r24	; 1
   ADMUX = 0;                                               // next digitize buttons and 5V reference
     89e:	17 b8       	out	0x07, r1	; 7

   ADCSRB = (1 << ADTS2) | (1 << ADTS0);                    // start conversion on timer 1 compare B
     8a0:	85 e0       	ldi	r24, 0x05	; 5
     8a2:	83 b9       	out	0x03, r24	; 3
   ADCSRA = (1 << ADEN) |                                   // enable ADC
     8a4:	8e ef       	ldi	r24, 0xFE	; 254
     8a6:	86 b9       	out	0x06, r24	; 6
            (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0) |    // 125KHz ADC clock
            (1 << ADIE) |                                   // generate interrupt when ready
            (1 << ADATE);                                   // use interrupt source to start ADC

   /* timer 1 setup */
   TCCR1A = 0;                         // CTC mode
     8a8:	1f bc       	out	0x2f, r1	; 47
   OCR1A = COUNTER_TIME_50HZ;          // 2500 - 1 gives 20 ms delay time
     8aa:	83 ec       	ldi	r24, 0xC3	; 195
     8ac:	99 e0       	ldi	r25, 0x09	; 9
     8ae:	9b bd       	out	0x2b, r25	; 43
     8b0:	8a bd       	out	0x2a, r24	; 42
   OCR1B = COUNTER_DELAY_BUTTON;       // OCR1B is used to trigger the ADC. The ADC is used for buttons and zero detection
     8b2:	87 ee       	ldi	r24, 0xE7	; 231
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	99 bd       	out	0x29, r25	; 41
     8b8:	88 bd       	out	0x28, r24	; 40
   TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10); // CTC mode and 8 MHz divide by 64 prescaler produces 125 KHz clock source
     8ba:	8b e0       	ldi	r24, 0x0B	; 11
     8bc:	8e bd       	out	0x2e, r24	; 46
     8be:	08 95       	ret

000008c0 <__vector_13>:
}

ISR (ADC_vect)
{
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
   static uint16_t average = COUNTER_TIME_50HZ;

   if (OCR1B == COUNTER_DELAY_BUTTON)
     8e2:	88 b5       	in	r24, 0x28	; 40
     8e4:	99 b5       	in	r25, 0x29	; 41
     8e6:	87 3e       	cpi	r24, 0xE7	; 231
     8e8:	93 40       	sbci	r25, 0x03	; 3
     8ea:	69 f4       	brne	.+26     	; 0x906 <__vector_13+0x46>
   {
      // buttons
      button = ADC;
     8ec:	84 b1       	in	r24, 0x04	; 4
     8ee:	95 b1       	in	r25, 0x05	; 5
     8f0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <button+0x1>
     8f4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <button>

      // next adc measurement will be zero crossing
      ADMUX = 1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	87 b9       	out	0x07, r24	; 7
      OCR1B = 0;
     8fc:	19 bc       	out	0x29, r1	; 41
     8fe:	18 bc       	out	0x28, r1	; 40
      SetMotorOutput(GetMotorDirection());
     900:	14 d6       	rcall	.+3112   	; 0x152a <GetMotorDirection>
     902:	a2 d6       	rcall	.+3396   	; 0x1648 <SetMotorOutput>
     904:	40 c0       	rjmp	.+128    	; 0x986 <__vector_13+0xc6>
   }
   else
   {
      // zero crossing
      OCR1A = average + (465 - ADC);
     906:	24 b1       	in	r18, 0x04	; 4
     908:	35 b1       	in	r19, 0x05	; 5
     90a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     90e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     912:	8f 52       	subi	r24, 0x2F	; 47
     914:	9e 4f       	sbci	r25, 0xFE	; 254
     916:	82 1b       	sub	r24, r18
     918:	93 0b       	sbc	r25, r19
     91a:	9b bd       	out	0x2b, r25	; 43
     91c:	8a bd       	out	0x2a, r24	; 42
      average = (average * 9 + OCR1A) / 10;
     91e:	4a b5       	in	r20, 0x2a	; 42
     920:	5b b5       	in	r21, 0x2b	; 43
     922:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     926:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     92a:	c9 01       	movw	r24, r18
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	28 0f       	add	r18, r24
     93a:	39 1f       	adc	r19, r25
     93c:	c9 01       	movw	r24, r18
     93e:	84 0f       	add	r24, r20
     940:	95 1f       	adc	r25, r21
     942:	6a e0       	ldi	r22, 0x0A	; 10
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	40 da       	rcall	.-2944   	; 0xfffffdc8 <__eeprom_end+0xff7efcd2>
     948:	86 2f       	mov	r24, r22
     94a:	97 2f       	mov	r25, r23
     94c:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__data_start>
     950:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__data_start+0x1>
      if (average > COUNTER_TIME_50HZ + COUNTER_DELTA) average = COUNTER_TIME_50HZ + COUNTER_DELTA;
     954:	8c 38       	cpi	r24, 0x8C	; 140
     956:	2a e0       	ldi	r18, 0x0A	; 10
     958:	92 07       	cpc	r25, r18
     95a:	38 f0       	brcs	.+14     	; 0x96a <__vector_13+0xaa>
     95c:	8b e8       	ldi	r24, 0x8B	; 139
     95e:	9a e0       	ldi	r25, 0x0A	; 10
     960:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     964:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     968:	09 c0       	rjmp	.+18     	; 0x97c <__vector_13+0xbc>
      if (average < COUNTER_TIME_50HZ - COUNTER_DELTA) average = COUNTER_TIME_50HZ - COUNTER_DELTA;
     96a:	8b 3f       	cpi	r24, 0xFB	; 251
     96c:	98 40       	sbci	r25, 0x08	; 8
     96e:	30 f4       	brcc	.+12     	; 0x97c <__vector_13+0xbc>
     970:	8b ef       	ldi	r24, 0xFB	; 251
     972:	98 e0       	ldi	r25, 0x08	; 8
     974:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     978:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>

      // next adc measurement will be buttons
      ADMUX = 0;
     97c:	17 b8       	out	0x07, r1	; 7
      OCR1B = COUNTER_DELAY_BUTTON;
     97e:	87 ee       	ldi	r24, 0xE7	; 231
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	99 bd       	out	0x29, r25	; 41
     984:	88 bd       	out	0x28, r24	; 40
   }
   TIFR1 = (1 << TOV1) | (1 << OCF1B) | (1 << OCF1A) | (1 << ICF1);
     986:	87 e2       	ldi	r24, 0x27	; 39
     988:	8b b9       	out	0x0b, r24	; 11

   HandleClock();
     98a:	95 d9       	rcall	.-3286   	; 0xfffffcb6 <__eeprom_end+0xff7efbc0>
}
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	0f 90       	pop	r0
     9aa:	1f 90       	pop	r1
     9ac:	18 95       	reti

000009ae <WriteLcdData>:
   }
}

static void WriteLcdData(uint8_t data)
{
   USIDR = data;
     9ae:	8f b9       	out	0x0f, r24	; 15
   USISR = (1 << USIOIF);                // clear counter and counter overflow interrupt flag
     9b0:	80 e4       	ldi	r24, 0x40	; 64
     9b2:	8e b9       	out	0x0e, r24	; 14
   while (!(USISR & (1 << USIOIF)) )
     9b4:	76 99       	sbic	0x0e, 6	; 14
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <WriteLcdData+0x12>
   {
      USICR = (1 << USIWM0) | (1 << USICS1) | (1 << USICLK) | (1 << USITC);
     9b8:	8b e1       	ldi	r24, 0x1B	; 27
     9ba:	8d b9       	out	0x0d, r24	; 13

static void WriteLcdData(uint8_t data)
{
   USIDR = data;
   USISR = (1 << USIOIF);                // clear counter and counter overflow interrupt flag
   while (!(USISR & (1 << USIOIF)) )
     9bc:	76 9b       	sbis	0x0e, 6	; 14
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <WriteLcdData+0xc>
     9c0:	08 95       	ret

000009c2 <WriteLcdCommand>:
   }
}

static void WriteLcdCommand(uint8_t data)
{
   PORTB &= ~(1 << DDB1);  // PB1: select command register (low)
     9c2:	c1 98       	cbi	0x18, 1	; 24
   WriteLcdData(data);
     9c4:	f4 df       	rcall	.-24     	; 0x9ae <WriteLcdData>
   PORTB |= (1 << DDB1);   // PB1: select data register (high)
     9c6:	c1 9a       	sbi	0x18, 1	; 24
     9c8:	08 95       	ret

000009ca <SetAddress>:
}

static void SetAddress(uint8_t x, uint8_t y)
{
     9ca:	cf 93       	push	r28
     9cc:	c8 2f       	mov	r28, r24
   WriteLcdCommand(0x40 + y); // 0 <= y <= 5; bytes
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	86 0f       	add	r24, r22
     9d2:	f7 df       	rcall	.-18     	; 0x9c2 <WriteLcdCommand>
   WriteLcdCommand(0x80 + x); // 0 <= x <= 83; pixels
     9d4:	80 e8       	ldi	r24, 0x80	; 128
     9d6:	8c 0f       	add	r24, r28
     9d8:	f4 df       	rcall	.-24     	; 0x9c2 <WriteLcdCommand>
}
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <ReadStringFromRam>:
}

static char ReadStringFromRam(const char* address)
{
   return *address;
}
     9de:	fc 01       	movw	r30, r24
     9e0:	80 81       	ld	r24, Z
     9e2:	08 95       	ret

000009e4 <ReadStringFromEeprom>:
   return pgm_read_byte_near(&(font[characterIndex + position]));
}

static char ReadStringFromEeprom(const char* address)
{
   return eeprom_read_byte((uint8_t *)address);
     9e4:	7f da       	rcall	.-2818   	; 0xfffffee4 <__eeprom_end+0xff7efdee>
}
     9e6:	08 95       	ret

000009e8 <LcdSetup>:
#include "kernel.h"
#include "lcd.h"

void LcdSetup(void)
{
   PORTB &= ~((1 << PORTB1) | (1 << PORTB2));
     9e8:	88 b3       	in	r24, 0x18	; 24
     9ea:	89 7f       	andi	r24, 0xF9	; 249
     9ec:	88 bb       	out	0x18, r24	; 24
   PORTB |= (1 << PORTB0);
     9ee:	c0 9a       	sbi	0x18, 0	; 24
   DDRB |= (1 << DDB0)      // PB0; chip enable active low
     9f0:	87 b3       	in	r24, 0x17	; 23
     9f2:	87 60       	ori	r24, 0x07	; 7
     9f4:	87 bb       	out	0x17, r24	; 23
        |  (1 << DDB1)      // PB1: data register (high) / command register (low)
        |  (1 << DDB2);     // PB2: reset active low

   USICR = (1 << USICS1) | (1 << USICLK);
     9f6:	8a e0       	ldi	r24, 0x0A	; 10
     9f8:	8d b9       	out	0x0d, r24	; 13
   DDRA |= (1 << PORTA4)    // uclk as output
     9fa:	8a b3       	in	r24, 0x1a	; 26
     9fc:	80 63       	ori	r24, 0x30	; 48
     9fe:	8a bb       	out	0x1a, r24	; 26
        |  (1 << PORTA5);   // LCD Din as output

   PORTB |= (1 << PORTB2);  // nRESET high
     a00:	c2 9a       	sbi	0x18, 2	; 24
     a02:	08 95       	ret

00000a04 <EnableLcd>:
}

void EnableLcd(bool enable)
{
   if (enable)
     a04:	88 23       	and	r24, r24
     a06:	11 f0       	breq	.+4      	; 0xa0c <EnableLcd+0x8>
   {
      PORTB &= ~(1 << PORTB0);
     a08:	c0 98       	cbi	0x18, 0	; 24
     a0a:	08 95       	ret
   }
   else
   {
      // enableing the LCD also turns on the backlight
      PORTB |= (1 << PORTB0);
     a0c:	c0 9a       	sbi	0x18, 0	; 24
     a0e:	08 95       	ret

00000a10 <Clear>:
   WriteLcdCommand(0x40 + y); // 0 <= y <= 5; bytes
   WriteLcdCommand(0x80 + x); // 0 <= x <= 83; pixels
}

void Clear(void)
{
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
   WriteLcdCommand(8);    // display control; switch display off
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	d5 df       	rcall	.-86     	; 0x9c2 <WriteLcdCommand>

   SetAddress(0, 0);
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	d6 df       	rcall	.-84     	; 0x9ca <SetAddress>
     a1e:	c8 ef       	ldi	r28, 0xF8	; 248
     a20:	d1 e0       	ldi	r29, 0x01	; 1
   for (uint16_t i = 0; i < 84 * 48 / 8; ++i)
   {
      WriteLcdData(0);
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	c4 df       	rcall	.-120    	; 0x9ae <WriteLcdData>
     a26:	21 97       	sbiw	r28, 0x01	; 1
void Clear(void)
{
   WriteLcdCommand(8);    // display control; switch display off

   SetAddress(0, 0);
   for (uint16_t i = 0; i < 84 * 48 / 8; ++i)
     a28:	e1 f7       	brne	.-8      	; 0xa22 <Clear+0x12>
   {
      WriteLcdData(0);
   }
   WriteLcdCommand(0x0C); // display control; switch display on
     a2a:	8c e0       	ldi	r24, 0x0C	; 12
     a2c:	ca df       	rcall	.-108    	; 0x9c2 <WriteLcdCommand>
}
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <LcdInitialize>:

void LcdInitialize(void)
{
   EnableLcd(true);
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	e6 df       	rcall	.-52     	; 0xa04 <EnableLcd>
   WriteLcdCommand(0x21); // function set; H = 1
     a38:	81 e2       	ldi	r24, 0x21	; 33
     a3a:	c3 df       	rcall	.-122    	; 0x9c2 <WriteLcdCommand>
   WriteLcdCommand(0x14); // bias value 4 (1 : 48)
     a3c:	84 e1       	ldi	r24, 0x14	; 20
     a3e:	c1 df       	rcall	.-126    	; 0x9c2 <WriteLcdCommand>
   WriteLcdCommand(0xb2); // set Vop to 3 + 50 * 0.06 = 6V
     a40:	82 eb       	ldi	r24, 0xB2	; 178
     a42:	bf df       	rcall	.-130    	; 0x9c2 <WriteLcdCommand>
   WriteLcdCommand(0x06); // temperature control
     a44:	86 e0       	ldi	r24, 0x06	; 6
     a46:	bd df       	rcall	.-134    	; 0x9c2 <WriteLcdCommand>
   WriteLcdCommand(0x20); // function set; H = 0, horizontal addressing mode
     a48:	80 e2       	ldi	r24, 0x20	; 32
     a4a:	bb df       	rcall	.-138    	; 0x9c2 <WriteLcdCommand>
   Clear();               // clear ram
     a4c:	e1 df       	rcall	.-62     	; 0xa10 <Clear>
     a4e:	08 95       	ret

00000a50 <WriteString>:
   }
   SetAddress(x, y / 8);
}

void WriteString(const uint8_t *font, const uint8_t x, const uint8_t y, char* text)
{
     a50:	2f 92       	push	r2
     a52:	3f 92       	push	r3
     a54:	4f 92       	push	r4
     a56:	5f 92       	push	r5
     a58:	6f 92       	push	r6
     a5a:	7f 92       	push	r7
     a5c:	8f 92       	push	r8
     a5e:	9f 92       	push	r9
     a60:	af 92       	push	r10
     a62:	bf 92       	push	r11
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	ec 01       	movw	r28, r24
     a76:	96 2e       	mov	r9, r22
     a78:	74 2e       	mov	r7, r20
     a7a:	69 01       	movw	r12, r18
   Clear();               // clear ram
}

static inline uint8_t GetNrRows(const uint8_t *font)
{
   return pgm_read_byte_near(&(font[1]));
     a7c:	fc 01       	movw	r30, r24
     a7e:	31 96       	adiw	r30, 0x01	; 1
     a80:	e4 91       	lpm	r30, Z
   SetAddress(x, y / 8);
}

void WriteString(const uint8_t *font, const uint8_t x, const uint8_t y, char* text)
{
   if (GetNrRows(font) > 8)
     a82:	e9 30       	cpi	r30, 0x09	; 9
     a84:	08 f4       	brcc	.+2      	; 0xa88 <WriteString+0x38>
     a86:	e2 c0       	rjmp	.+452    	; 0xc4c <WriteString+0x1fc>

void static inline Write16PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
     a88:	64 2e       	mov	r6, r20
     a8a:	66 94       	lsr	r6
     a8c:	66 94       	lsr	r6
     a8e:	66 94       	lsr	r6
     a90:	66 2d       	mov	r22, r6
     a92:	89 2d       	mov	r24, r9
     a94:	9a df       	rcall	.-204    	; 0x9ca <SetAddress>

   ch = source(&text[index++]);
     a96:	c6 01       	movw	r24, r12
     a98:	a2 df       	rcall	.-188    	; 0x9de <ReadStringFromRam>
     a9a:	b8 2e       	mov	r11, r24
   while (ch != 0)
     a9c:	88 23       	and	r24, r24
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <WriteString+0x52>
     aa0:	58 c0       	rjmp	.+176    	; 0xb52 <WriteString+0x102>
     aa2:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     aa4:	8e 01       	movw	r16, r28
     aa6:	0e 5f       	subi	r16, 0xFE	; 254
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     aaa:	37 2d       	mov	r19, r7
     aac:	37 70       	andi	r19, 0x07	; 7
     aae:	a3 2e       	mov	r10, r19
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <WriteString+0x64>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     ab2:	24 2d       	mov	r18, r4
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     ab4:	fe 01       	movw	r30, r28
     ab6:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     ab8:	44 23       	and	r20, r20
     aba:	d9 f0       	breq	.+54     	; 0xaf2 <WriteString+0xa2>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     abc:	f8 01       	movw	r30, r16
     abe:	84 91       	lpm	r24, Z
     ac0:	8b 15       	cp	r24, r11
     ac2:	d1 f0       	breq	.+52     	; 0xaf8 <WriteString+0xa8>
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	06 c0       	rjmp	.+12     	; 0xad8 <WriteString+0x88>
     acc:	fe 01       	movw	r30, r28
     ace:	e8 0f       	add	r30, r24
     ad0:	f9 1f       	adc	r31, r25
     ad2:	e4 91       	lpm	r30, Z
     ad4:	eb 15       	cp	r30, r11
     ad6:	91 f0       	breq	.+36     	; 0xafc <WriteString+0xac>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     ad8:	fc 01       	movw	r30, r24
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	ec 0f       	add	r30, r28
     ade:	fd 1f       	adc	r31, r29
     ae0:	e4 91       	lpm	r30, Z
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	32 96       	adiw	r30, 0x02	; 2
     ae6:	8e 0f       	add	r24, r30
     ae8:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     aea:	3f 5f       	subi	r19, 0xFF	; 255
     aec:	43 13       	cpse	r20, r19
     aee:	ee cf       	rjmp	.-36     	; 0xacc <WriteString+0x7c>
     af0:	05 c0       	rjmp	.+10     	; 0xafc <WriteString+0xac>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <WriteString+0xac>
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     afc:	7c 01       	movw	r14, r24
     afe:	f2 e0       	ldi	r31, 0x02	; 2
     b00:	ef 0e       	add	r14, r31
     b02:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     b04:	fc 01       	movw	r30, r24
     b06:	31 96       	adiw	r30, 0x01	; 1
     b08:	ec 0f       	add	r30, r28
     b0a:	fd 1f       	adc	r31, r29
     b0c:	84 90       	lpm	r8, Z

   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     b0e:	86 94       	lsr	r8
      ch = source(&text[index++]);
     b10:	44 24       	eor	r4, r4
     b12:	43 94       	inc	r4
     b14:	42 0e       	add	r4, r18
     b16:	c6 01       	movw	r24, r12
     b18:	82 0f       	add	r24, r18
     b1a:	91 1d       	adc	r25, r1
     b1c:	60 df       	rcall	.-320    	; 0x9de <ReadStringFromRam>
     b1e:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     b20:	88 20       	and	r8, r8
     b22:	91 f0       	breq	.+36     	; 0xb48 <WriteString+0xf8>
     b24:	51 2c       	mov	r5, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     b26:	85 2d       	mov	r24, r5
     b28:	88 0f       	add	r24, r24
     b2a:	f7 01       	movw	r30, r14
     b2c:	e8 0f       	add	r30, r24
     b2e:	f1 1d       	adc	r31, r1
     b30:	ec 0f       	add	r30, r28
     b32:	fd 1f       	adc	r31, r29
     b34:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     b36:	0a 2c       	mov	r0, r10
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <WriteString+0xec>
     b3a:	88 0f       	add	r24, r24
     b3c:	0a 94       	dec	r0
     b3e:	ea f7       	brpl	.-6      	; 0xb3a <WriteString+0xea>
     b40:	36 df       	rcall	.-404    	; 0x9ae <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     b42:	53 94       	inc	r5
     b44:	85 10       	cpse	r8, r5
     b46:	ef cf       	rjmp	.-34     	; 0xb26 <WriteString+0xd6>
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	bd dc       	rcall	.-1670   	; 0x4c8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while (ch != 0)
     b4e:	b1 10       	cpse	r11, r1
     b50:	b0 cf       	rjmp	.-160    	; 0xab2 <WriteString+0x62>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   SetAddress(x, y / 8 + 1);
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	66 0d       	add	r22, r6
     b56:	89 2d       	mov	r24, r9
     b58:	38 df       	rcall	.-400    	; 0x9ca <SetAddress>
   index = 0;
   ch = source(&text[index++]);
     b5a:	c6 01       	movw	r24, r12
     b5c:	40 df       	rcall	.-384    	; 0x9de <ReadStringFromRam>
     b5e:	88 2e       	mov	r8, r24
   while (ch != 0)
     b60:	88 23       	and	r24, r24
     b62:	09 f4       	brne	.+2      	; 0xb66 <WriteString+0x116>
     b64:	6f c0       	rjmp	.+222    	; 0xc44 <WriteString+0x1f4>
     b66:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     b68:	8e 01       	movw	r16, r28
     b6a:	0e 5f       	subi	r16, 0xFE	; 254
     b6c:	1f 4f       	sbci	r17, 0xFF	; 255
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
     b6e:	37 2d       	mov	r19, r7
     b70:	37 70       	andi	r19, 0x07	; 7
     b72:	73 2e       	mov	r7, r19
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     b74:	88 e0       	ldi	r24, 0x08	; 8
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	7c 01       	movw	r14, r24
     b7a:	e3 1a       	sub	r14, r19
     b7c:	f1 08       	sbc	r15, r1
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <WriteString+0x132>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     b80:	23 2d       	mov	r18, r3
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     b82:	fe 01       	movw	r30, r28
     b84:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     b86:	44 23       	and	r20, r20
     b88:	d9 f0       	breq	.+54     	; 0xbc0 <WriteString+0x170>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     b8a:	f8 01       	movw	r30, r16
     b8c:	84 91       	lpm	r24, Z
     b8e:	88 15       	cp	r24, r8
     b90:	d1 f0       	breq	.+52     	; 0xbc6 <WriteString+0x176>
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	06 c0       	rjmp	.+12     	; 0xba6 <WriteString+0x156>
     b9a:	fe 01       	movw	r30, r28
     b9c:	e8 0f       	add	r30, r24
     b9e:	f9 1f       	adc	r31, r25
     ba0:	e4 91       	lpm	r30, Z
     ba2:	e8 15       	cp	r30, r8
     ba4:	91 f0       	breq	.+36     	; 0xbca <WriteString+0x17a>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     ba6:	fc 01       	movw	r30, r24
     ba8:	31 96       	adiw	r30, 0x01	; 1
     baa:	ec 0f       	add	r30, r28
     bac:	fd 1f       	adc	r31, r29
     bae:	e4 91       	lpm	r30, Z
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	32 96       	adiw	r30, 0x02	; 2
     bb4:	8e 0f       	add	r24, r30
     bb6:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     bb8:	3f 5f       	subi	r19, 0xFF	; 255
     bba:	43 13       	cpse	r20, r19
     bbc:	ee cf       	rjmp	.-36     	; 0xb9a <WriteString+0x14a>
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <WriteString+0x17a>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <WriteString+0x17a>
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     bca:	5c 01       	movw	r10, r24
     bcc:	f2 e0       	ldi	r31, 0x02	; 2
     bce:	af 0e       	add	r10, r31
     bd0:	b1 1c       	adc	r11, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     bd2:	fc 01       	movw	r30, r24
     bd4:	31 96       	adiw	r30, 0x01	; 1
     bd6:	ec 0f       	add	r30, r28
     bd8:	fd 1f       	adc	r31, r29
     bda:	54 90       	lpm	r5, Z
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     bdc:	56 94       	lsr	r5
      ch = source(&text[index++]);
     bde:	33 24       	eor	r3, r3
     be0:	33 94       	inc	r3
     be2:	32 0e       	add	r3, r18
     be4:	c6 01       	movw	r24, r12
     be6:	82 0f       	add	r24, r18
     be8:	91 1d       	adc	r25, r1
     bea:	f9 de       	rcall	.-526    	; 0x9de <ReadStringFromRam>
     bec:	88 2e       	mov	r8, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     bee:	55 20       	and	r5, r5
     bf0:	21 f1       	breq	.+72     	; 0xc3a <WriteString+0x1ea>
     bf2:	22 24       	eor	r2, r2
     bf4:	23 94       	inc	r2
     bf6:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     bf8:	84 2d       	mov	r24, r4
     bfa:	88 0f       	add	r24, r24
     bfc:	f5 01       	movw	r30, r10
     bfe:	e8 0f       	add	r30, r24
     c00:	f1 1d       	adc	r31, r1
     c02:	ec 0f       	add	r30, r28
     c04:	fd 1f       	adc	r31, r29
     c06:	24 91       	lpm	r18, Z
     c08:	f5 01       	movw	r30, r10
     c0a:	e2 0d       	add	r30, r2
     c0c:	f1 1d       	adc	r31, r1
     c0e:	ec 0f       	add	r30, r28
     c10:	fd 1f       	adc	r31, r29
     c12:	84 91       	lpm	r24, Z
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	0e 2c       	mov	r0, r14
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <WriteString+0x1ce>
     c1a:	35 95       	asr	r19
     c1c:	27 95       	ror	r18
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <WriteString+0x1ca>
     c22:	07 2c       	mov	r0, r7
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <WriteString+0x1d8>
     c26:	88 0f       	add	r24, r24
     c28:	0a 94       	dec	r0
     c2a:	ea f7       	brpl	.-6      	; 0xc26 <WriteString+0x1d6>
     c2c:	82 2b       	or	r24, r18
     c2e:	bf de       	rcall	.-642    	; 0x9ae <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     c30:	43 94       	inc	r4
     c32:	23 94       	inc	r2
     c34:	23 94       	inc	r2
     c36:	54 10       	cpse	r5, r4
     c38:	df cf       	rjmp	.-66     	; 0xbf8 <WriteString+0x1a8>
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	44 dc       	rcall	.-1912   	; 0x4c8 <TaskSleep>
   }

   SetAddress(x, y / 8 + 1);
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
     c40:	81 10       	cpse	r8, r1
     c42:	9e cf       	rjmp	.-196    	; 0xb80 <WriteString+0x130>
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
   }
   SetAddress(x, y / 8);
     c44:	66 2d       	mov	r22, r6
     c46:	89 2d       	mov	r24, r9
     c48:	c0 de       	rcall	.-640    	; 0x9ca <SetAddress>
     c4a:	d2 c0       	rjmp	.+420    	; 0xdf0 <WriteString+0x3a0>

static inline void Write8PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
     c4c:	84 2e       	mov	r8, r20
     c4e:	86 94       	lsr	r8
     c50:	86 94       	lsr	r8
     c52:	86 94       	lsr	r8
     c54:	68 2d       	mov	r22, r8
     c56:	89 2d       	mov	r24, r9
     c58:	b8 de       	rcall	.-656    	; 0x9ca <SetAddress>

   ch = source(&text[index++]);
     c5a:	c6 01       	movw	r24, r12
     c5c:	c0 de       	rcall	.-640    	; 0x9de <ReadStringFromRam>
     c5e:	b8 2e       	mov	r11, r24
   while ((ch != 0) && (ch != 255))
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	8b 0d       	add	r24, r11
     c64:	8e 3f       	cpi	r24, 0xFE	; 254
     c66:	08 f0       	brcs	.+2      	; 0xc6a <WriteString+0x21a>
     c68:	59 c0       	rjmp	.+178    	; 0xd1c <WriteString+0x2cc>
     c6a:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     c6c:	8e 01       	movw	r16, r28
     c6e:	0e 5f       	subi	r16, 0xFE	; 254
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
     c72:	37 2d       	mov	r19, r7
     c74:	37 70       	andi	r19, 0x07	; 7
     c76:	a3 2e       	mov	r10, r19
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <WriteString+0x22c>
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
     c7a:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     c7c:	fe 01       	movw	r30, r28
     c7e:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     c80:	44 23       	and	r20, r20
     c82:	d9 f0       	breq	.+54     	; 0xcba <WriteString+0x26a>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     c84:	f8 01       	movw	r30, r16
     c86:	84 91       	lpm	r24, Z
     c88:	8b 15       	cp	r24, r11
     c8a:	d1 f0       	breq	.+52     	; 0xcc0 <WriteString+0x270>
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <WriteString+0x250>
     c94:	fe 01       	movw	r30, r28
     c96:	e8 0f       	add	r30, r24
     c98:	f9 1f       	adc	r31, r25
     c9a:	e4 91       	lpm	r30, Z
     c9c:	eb 15       	cp	r30, r11
     c9e:	91 f0       	breq	.+36     	; 0xcc4 <WriteString+0x274>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     ca0:	fc 01       	movw	r30, r24
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	ec 0f       	add	r30, r28
     ca6:	fd 1f       	adc	r31, r29
     ca8:	e4 91       	lpm	r30, Z
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	32 96       	adiw	r30, 0x02	; 2
     cae:	8e 0f       	add	r24, r30
     cb0:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     cb2:	3f 5f       	subi	r19, 0xFF	; 255
     cb4:	43 13       	cpse	r20, r19
     cb6:	ee cf       	rjmp	.-36     	; 0xc94 <WriteString+0x244>
     cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <WriteString+0x274>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <WriteString+0x274>
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     cc4:	7c 01       	movw	r14, r24
     cc6:	f2 e0       	ldi	r31, 0x02	; 2
     cc8:	ef 0e       	add	r14, r31
     cca:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     ccc:	fc 01       	movw	r30, r24
     cce:	31 96       	adiw	r30, 0x01	; 1
     cd0:	ec 0f       	add	r30, r28
     cd2:	fd 1f       	adc	r31, r29
     cd4:	64 90       	lpm	r6, Z
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
     cd6:	55 24       	eor	r5, r5
     cd8:	53 94       	inc	r5
     cda:	52 0e       	add	r5, r18
     cdc:	c6 01       	movw	r24, r12
     cde:	82 0f       	add	r24, r18
     ce0:	91 1d       	adc	r25, r1
     ce2:	7d de       	rcall	.-774    	; 0x9de <ReadStringFromRam>
     ce4:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     ce6:	66 20       	and	r6, r6
     ce8:	89 f0       	breq	.+34     	; 0xd0c <WriteString+0x2bc>
     cea:	ec 0e       	add	r14, r28
     cec:	fd 1e       	adc	r15, r29
     cee:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     cf0:	f7 01       	movw	r30, r14
     cf2:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
     cf4:	0a 2c       	mov	r0, r10
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <WriteString+0x2aa>
     cf8:	88 0f       	add	r24, r24
     cfa:	0a 94       	dec	r0
     cfc:	ea f7       	brpl	.-6      	; 0xcf8 <WriteString+0x2a8>
     cfe:	57 de       	rcall	.-850    	; 0x9ae <WriteLcdData>
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     d00:	43 94       	inc	r4
     d02:	ff ef       	ldi	r31, 0xFF	; 255
     d04:	ef 1a       	sub	r14, r31
     d06:	ff 0a       	sbc	r15, r31
     d08:	64 10       	cpse	r6, r4
     d0a:	f2 cf       	rjmp	.-28     	; 0xcf0 <WriteString+0x2a0>
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	db db       	rcall	.-2122   	; 0x4c8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	8b 0d       	add	r24, r11
     d16:	8e 3f       	cpi	r24, 0xFE	; 254
     d18:	08 f4       	brcc	.+2      	; 0xd1c <WriteString+0x2cc>
     d1a:	af cf       	rjmp	.-162    	; 0xc7a <WriteString+0x22a>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   if (y % 8 > 0)
     d1c:	17 2d       	mov	r17, r7
     d1e:	17 70       	andi	r17, 0x07	; 7
     d20:	09 f4       	brne	.+2      	; 0xd24 <WriteString+0x2d4>
     d22:	63 c0       	rjmp	.+198    	; 0xdea <WriteString+0x39a>
   {
      index = 0;
      ch = source(&text[index++]);
     d24:	c6 01       	movw	r24, r12
     d26:	5b de       	rcall	.-842    	; 0x9de <ReadStringFromRam>
     d28:	68 2e       	mov	r6, r24
      SetAddress(x, y / 8 + 1);
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	68 0d       	add	r22, r8
     d2e:	89 2d       	mov	r24, r9
     d30:	4c de       	rcall	.-872    	; 0x9ca <SetAddress>
      while (ch != 0)
     d32:	66 20       	and	r6, r6
     d34:	09 f4       	brne	.+2      	; 0xd38 <WriteString+0x2e8>
     d36:	59 c0       	rjmp	.+178    	; 0xdea <WriteString+0x39a>
     d38:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     d3a:	5e 01       	movw	r10, r28
     d3c:	32 e0       	ldi	r19, 0x02	; 2
     d3e:	a3 0e       	add	r10, r19
     d40:	b1 1c       	adc	r11, r1
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
     d42:	88 e0       	ldi	r24, 0x08	; 8
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	7c 01       	movw	r14, r24
     d48:	e1 1a       	sub	r14, r17
     d4a:	f1 08       	sbc	r15, r1
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <WriteString+0x300>
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
     d4e:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     d50:	fe 01       	movw	r30, r28
     d52:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     d54:	44 23       	and	r20, r20
     d56:	d9 f0       	breq	.+54     	; 0xd8e <WriteString+0x33e>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     d58:	f5 01       	movw	r30, r10
     d5a:	84 91       	lpm	r24, Z
     d5c:	86 15       	cp	r24, r6
     d5e:	d1 f0       	breq	.+52     	; 0xd94 <WriteString+0x344>
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <WriteString+0x324>
     d68:	fe 01       	movw	r30, r28
     d6a:	e8 0f       	add	r30, r24
     d6c:	f9 1f       	adc	r31, r25
     d6e:	e4 91       	lpm	r30, Z
     d70:	e6 15       	cp	r30, r6
     d72:	91 f0       	breq	.+36     	; 0xd98 <WriteString+0x348>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     d74:	fc 01       	movw	r30, r24
     d76:	31 96       	adiw	r30, 0x01	; 1
     d78:	ec 0f       	add	r30, r28
     d7a:	fd 1f       	adc	r31, r29
     d7c:	e4 91       	lpm	r30, Z
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	32 96       	adiw	r30, 0x02	; 2
     d82:	8e 0f       	add	r24, r30
     d84:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     d86:	3f 5f       	subi	r19, 0xFF	; 255
     d88:	43 13       	cpse	r20, r19
     d8a:	ee cf       	rjmp	.-36     	; 0xd68 <WriteString+0x318>
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <WriteString+0x348>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <WriteString+0x348>
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     d98:	8c 01       	movw	r16, r24
     d9a:	0e 5f       	subi	r16, 0xFE	; 254
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     d9e:	fc 01       	movw	r30, r24
     da0:	31 96       	adiw	r30, 0x01	; 1
     da2:	ec 0f       	add	r30, r28
     da4:	fd 1f       	adc	r31, r29
     da6:	74 90       	lpm	r7, Z
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
     da8:	55 24       	eor	r5, r5
     daa:	53 94       	inc	r5
     dac:	52 0e       	add	r5, r18
     dae:	c6 01       	movw	r24, r12
     db0:	82 0f       	add	r24, r18
     db2:	91 1d       	adc	r25, r1
     db4:	14 de       	rcall	.-984    	; 0x9de <ReadStringFromRam>
     db6:	68 2e       	mov	r6, r24
         for (uint8_t n = 0; n < nrColumns; ++n)
     db8:	77 20       	and	r7, r7
     dba:	91 f0       	breq	.+36     	; 0xde0 <WriteString+0x390>
     dbc:	0c 0f       	add	r16, r28
     dbe:	1d 1f       	adc	r17, r29
     dc0:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     dc2:	f8 01       	movw	r30, r16
     dc4:	84 91       	lpm	r24, Z
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 2c       	mov	r0, r14
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <WriteString+0x380>
     dcc:	95 95       	asr	r25
     dce:	87 95       	ror	r24
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <WriteString+0x37c>
            WriteLcdData(data);
     dd4:	ec dd       	rcall	.-1064   	; 0x9ae <WriteLcdData>
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
     dd6:	43 94       	inc	r4
     dd8:	0f 5f       	subi	r16, 0xFF	; 255
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	74 10       	cpse	r7, r4
     dde:	f1 cf       	rjmp	.-30     	; 0xdc2 <WriteString+0x372>
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
            WriteLcdData(data);
         }
         TaskSleep(0);
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	71 db       	rcall	.-2334   	; 0x4c8 <TaskSleep>
   if (y % 8 > 0)
   {
      index = 0;
      ch = source(&text[index++]);
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
     de6:	61 10       	cpse	r6, r1
     de8:	b2 cf       	rjmp	.-156    	; 0xd4e <WriteString+0x2fe>
            WriteLcdData(data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
     dea:	68 2d       	mov	r22, r8
     dec:	89 2d       	mov	r24, r9
     dee:	ed dd       	rcall	.-1062   	; 0x9ca <SetAddress>
   }
   else
   {
      Write8PixelString(font, x, y, ReadStringFromRam, text);
   }
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	bf 90       	pop	r11
     e02:	af 90       	pop	r10
     e04:	9f 90       	pop	r9
     e06:	8f 90       	pop	r8
     e08:	7f 90       	pop	r7
     e0a:	6f 90       	pop	r6
     e0c:	5f 90       	pop	r5
     e0e:	4f 90       	pop	r4
     e10:	3f 90       	pop	r3
     e12:	2f 90       	pop	r2
     e14:	08 95       	ret

00000e16 <WriteStaticString>:

void WriteStaticString(const uint8_t *font, uint8_t x, uint8_t y, const char* text)
{
     e16:	2f 92       	push	r2
     e18:	3f 92       	push	r3
     e1a:	4f 92       	push	r4
     e1c:	5f 92       	push	r5
     e1e:	6f 92       	push	r6
     e20:	7f 92       	push	r7
     e22:	8f 92       	push	r8
     e24:	9f 92       	push	r9
     e26:	af 92       	push	r10
     e28:	bf 92       	push	r11
     e2a:	cf 92       	push	r12
     e2c:	df 92       	push	r13
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	ec 01       	movw	r28, r24
     e3c:	96 2e       	mov	r9, r22
     e3e:	74 2e       	mov	r7, r20
     e40:	69 01       	movw	r12, r18
   Clear();               // clear ram
}

static inline uint8_t GetNrRows(const uint8_t *font)
{
   return pgm_read_byte_near(&(font[1]));
     e42:	fc 01       	movw	r30, r24
     e44:	31 96       	adiw	r30, 0x01	; 1
     e46:	e4 91       	lpm	r30, Z
   }
}

void WriteStaticString(const uint8_t *font, uint8_t x, uint8_t y, const char* text)
{
   if (GetNrRows(font) > 8)
     e48:	e9 30       	cpi	r30, 0x09	; 9
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <WriteStaticString+0x38>
     e4c:	e2 c0       	rjmp	.+452    	; 0x1012 <WriteStaticString+0x1fc>

void static inline Write16PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
     e4e:	64 2e       	mov	r6, r20
     e50:	66 94       	lsr	r6
     e52:	66 94       	lsr	r6
     e54:	66 94       	lsr	r6
     e56:	66 2d       	mov	r22, r6
     e58:	89 2d       	mov	r24, r9
     e5a:	b7 dd       	rcall	.-1170   	; 0x9ca <SetAddress>

   ch = source(&text[index++]);
     e5c:	c6 01       	movw	r24, r12
     e5e:	c2 dd       	rcall	.-1148   	; 0x9e4 <ReadStringFromEeprom>
     e60:	b8 2e       	mov	r11, r24
   while (ch != 0)
     e62:	88 23       	and	r24, r24
     e64:	09 f4       	brne	.+2      	; 0xe68 <WriteStaticString+0x52>
     e66:	58 c0       	rjmp	.+176    	; 0xf18 <WriteStaticString+0x102>
     e68:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     e6a:	8e 01       	movw	r16, r28
     e6c:	0e 5f       	subi	r16, 0xFE	; 254
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     e70:	37 2d       	mov	r19, r7
     e72:	37 70       	andi	r19, 0x07	; 7
     e74:	a3 2e       	mov	r10, r19
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <WriteStaticString+0x64>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     e78:	24 2d       	mov	r18, r4
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     e7a:	fe 01       	movw	r30, r28
     e7c:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     e7e:	44 23       	and	r20, r20
     e80:	d9 f0       	breq	.+54     	; 0xeb8 <WriteStaticString+0xa2>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     e82:	f8 01       	movw	r30, r16
     e84:	84 91       	lpm	r24, Z
     e86:	8b 15       	cp	r24, r11
     e88:	d1 f0       	breq	.+52     	; 0xebe <WriteStaticString+0xa8>
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	06 c0       	rjmp	.+12     	; 0xe9e <WriteStaticString+0x88>
     e92:	fe 01       	movw	r30, r28
     e94:	e8 0f       	add	r30, r24
     e96:	f9 1f       	adc	r31, r25
     e98:	e4 91       	lpm	r30, Z
     e9a:	eb 15       	cp	r30, r11
     e9c:	91 f0       	breq	.+36     	; 0xec2 <WriteStaticString+0xac>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     e9e:	fc 01       	movw	r30, r24
     ea0:	31 96       	adiw	r30, 0x01	; 1
     ea2:	ec 0f       	add	r30, r28
     ea4:	fd 1f       	adc	r31, r29
     ea6:	e4 91       	lpm	r30, Z
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	32 96       	adiw	r30, 0x02	; 2
     eac:	8e 0f       	add	r24, r30
     eae:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     eb0:	3f 5f       	subi	r19, 0xFF	; 255
     eb2:	43 13       	cpse	r20, r19
     eb4:	ee cf       	rjmp	.-36     	; 0xe92 <WriteStaticString+0x7c>
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <WriteStaticString+0xac>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <WriteStaticString+0xac>
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     ec2:	7c 01       	movw	r14, r24
     ec4:	f2 e0       	ldi	r31, 0x02	; 2
     ec6:	ef 0e       	add	r14, r31
     ec8:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     eca:	fc 01       	movw	r30, r24
     ecc:	31 96       	adiw	r30, 0x01	; 1
     ece:	ec 0f       	add	r30, r28
     ed0:	fd 1f       	adc	r31, r29
     ed2:	84 90       	lpm	r8, Z

   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     ed4:	86 94       	lsr	r8
      ch = source(&text[index++]);
     ed6:	44 24       	eor	r4, r4
     ed8:	43 94       	inc	r4
     eda:	42 0e       	add	r4, r18
     edc:	c6 01       	movw	r24, r12
     ede:	82 0f       	add	r24, r18
     ee0:	91 1d       	adc	r25, r1
     ee2:	80 dd       	rcall	.-1280   	; 0x9e4 <ReadStringFromEeprom>
     ee4:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     ee6:	88 20       	and	r8, r8
     ee8:	91 f0       	breq	.+36     	; 0xf0e <WriteStaticString+0xf8>
     eea:	51 2c       	mov	r5, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     eec:	85 2d       	mov	r24, r5
     eee:	88 0f       	add	r24, r24
     ef0:	f7 01       	movw	r30, r14
     ef2:	e8 0f       	add	r30, r24
     ef4:	f1 1d       	adc	r31, r1
     ef6:	ec 0f       	add	r30, r28
     ef8:	fd 1f       	adc	r31, r29
     efa:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
     efc:	0a 2c       	mov	r0, r10
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <WriteStaticString+0xec>
     f00:	88 0f       	add	r24, r24
     f02:	0a 94       	dec	r0
     f04:	ea f7       	brpl	.-6      	; 0xf00 <WriteStaticString+0xea>
     f06:	53 dd       	rcall	.-1370   	; 0x9ae <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     f08:	53 94       	inc	r5
     f0a:	85 10       	cpse	r8, r5
     f0c:	ef cf       	rjmp	.-34     	; 0xeec <WriteStaticString+0xd6>
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	da da       	rcall	.-2636   	; 0x4c8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while (ch != 0)
     f14:	b1 10       	cpse	r11, r1
     f16:	b0 cf       	rjmp	.-160    	; 0xe78 <WriteStaticString+0x62>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   SetAddress(x, y / 8 + 1);
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	66 0d       	add	r22, r6
     f1c:	89 2d       	mov	r24, r9
     f1e:	55 dd       	rcall	.-1366   	; 0x9ca <SetAddress>
   index = 0;
   ch = source(&text[index++]);
     f20:	c6 01       	movw	r24, r12
     f22:	60 dd       	rcall	.-1344   	; 0x9e4 <ReadStringFromEeprom>
     f24:	88 2e       	mov	r8, r24
   while (ch != 0)
     f26:	88 23       	and	r24, r24
     f28:	09 f4       	brne	.+2      	; 0xf2c <WriteStaticString+0x116>
     f2a:	6f c0       	rjmp	.+222    	; 0x100a <WriteStaticString+0x1f4>
     f2c:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
     f2e:	8e 01       	movw	r16, r28
     f30:	0e 5f       	subi	r16, 0xFE	; 254
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
     f34:	37 2d       	mov	r19, r7
     f36:	37 70       	andi	r19, 0x07	; 7
     f38:	73 2e       	mov	r7, r19
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     f3a:	88 e0       	ldi	r24, 0x08	; 8
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	7c 01       	movw	r14, r24
     f40:	e3 1a       	sub	r14, r19
     f42:	f1 08       	sbc	r15, r1
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <WriteStaticString+0x132>
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
     f46:	23 2d       	mov	r18, r3
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
     f48:	fe 01       	movw	r30, r28
     f4a:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     f4c:	44 23       	and	r20, r20
     f4e:	d9 f0       	breq	.+54     	; 0xf86 <WriteStaticString+0x170>
   {
      if (value == pgm_read_byte_near(&(font[index])))
     f50:	f8 01       	movw	r30, r16
     f52:	84 91       	lpm	r24, Z
     f54:	88 15       	cp	r24, r8
     f56:	d1 f0       	breq	.+52     	; 0xf8c <WriteStaticString+0x176>
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <WriteStaticString+0x156>
     f60:	fe 01       	movw	r30, r28
     f62:	e8 0f       	add	r30, r24
     f64:	f9 1f       	adc	r31, r25
     f66:	e4 91       	lpm	r30, Z
     f68:	e8 15       	cp	r30, r8
     f6a:	91 f0       	breq	.+36     	; 0xf90 <WriteStaticString+0x17a>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
     f6c:	fc 01       	movw	r30, r24
     f6e:	31 96       	adiw	r30, 0x01	; 1
     f70:	ec 0f       	add	r30, r28
     f72:	fd 1f       	adc	r31, r29
     f74:	e4 91       	lpm	r30, Z
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	32 96       	adiw	r30, 0x02	; 2
     f7a:	8e 0f       	add	r24, r30
     f7c:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
     f7e:	3f 5f       	subi	r19, 0xFF	; 255
     f80:	43 13       	cpse	r20, r19
     f82:	ee cf       	rjmp	.-36     	; 0xf60 <WriteStaticString+0x14a>
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <WriteStaticString+0x17a>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <WriteStaticString+0x17a>
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
     f90:	5c 01       	movw	r10, r24
     f92:	f2 e0       	ldi	r31, 0x02	; 2
     f94:	af 0e       	add	r10, r31
     f96:	b1 1c       	adc	r11, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
     f98:	fc 01       	movw	r30, r24
     f9a:	31 96       	adiw	r30, 0x01	; 1
     f9c:	ec 0f       	add	r30, r28
     f9e:	fd 1f       	adc	r31, r29
     fa0:	54 90       	lpm	r5, Z
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
     fa2:	56 94       	lsr	r5
      ch = source(&text[index++]);
     fa4:	33 24       	eor	r3, r3
     fa6:	33 94       	inc	r3
     fa8:	32 0e       	add	r3, r18
     faa:	c6 01       	movw	r24, r12
     fac:	82 0f       	add	r24, r18
     fae:	91 1d       	adc	r25, r1
     fb0:	19 dd       	rcall	.-1486   	; 0x9e4 <ReadStringFromEeprom>
     fb2:	88 2e       	mov	r8, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
     fb4:	55 20       	and	r5, r5
     fb6:	21 f1       	breq	.+72     	; 0x1000 <WriteStaticString+0x1ea>
     fb8:	22 24       	eor	r2, r2
     fba:	23 94       	inc	r2
     fbc:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
     fbe:	84 2d       	mov	r24, r4
     fc0:	88 0f       	add	r24, r24
     fc2:	f5 01       	movw	r30, r10
     fc4:	e8 0f       	add	r30, r24
     fc6:	f1 1d       	adc	r31, r1
     fc8:	ec 0f       	add	r30, r28
     fca:	fd 1f       	adc	r31, r29
     fcc:	24 91       	lpm	r18, Z
     fce:	f5 01       	movw	r30, r10
     fd0:	e2 0d       	add	r30, r2
     fd2:	f1 1d       	adc	r31, r1
     fd4:	ec 0f       	add	r30, r28
     fd6:	fd 1f       	adc	r31, r29
     fd8:	84 91       	lpm	r24, Z
      {
         value = GetColumnData(font, characterIndex, n * 2);
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	0e 2c       	mov	r0, r14
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <WriteStaticString+0x1ce>
     fe0:	35 95       	asr	r19
     fe2:	27 95       	ror	r18
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <WriteStaticString+0x1ca>
     fe8:	07 2c       	mov	r0, r7
     fea:	01 c0       	rjmp	.+2      	; 0xfee <WriteStaticString+0x1d8>
     fec:	88 0f       	add	r24, r24
     fee:	0a 94       	dec	r0
     ff0:	ea f7       	brpl	.-6      	; 0xfec <WriteStaticString+0x1d6>
     ff2:	82 2b       	or	r24, r18
     ff4:	dc dc       	rcall	.-1608   	; 0x9ae <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex) / 2;
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
     ff6:	43 94       	inc	r4
     ff8:	23 94       	inc	r2
     ffa:	23 94       	inc	r2
     ffc:	54 10       	cpse	r5, r4
     ffe:	df cf       	rjmp	.-66     	; 0xfbe <WriteStaticString+0x1a8>
         data = value >> (8 - (y % 8));
         value = GetColumnData(font, characterIndex, n * 2 + 1);
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	61 da       	rcall	.-2878   	; 0x4c8 <TaskSleep>
   }

   SetAddress(x, y / 8 + 1);
   index = 0;
   ch = source(&text[index++]);
   while (ch != 0)
    1006:	81 10       	cpse	r8, r1
    1008:	9e cf       	rjmp	.-196    	; 0xf46 <WriteStaticString+0x130>
         data |= value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
   }
   SetAddress(x, y / 8);
    100a:	66 2d       	mov	r22, r6
    100c:	89 2d       	mov	r24, r9
    100e:	dd dc       	rcall	.-1606   	; 0x9ca <SetAddress>
    1010:	d2 c0       	rjmp	.+420    	; 0x11b6 <WriteStaticString+0x3a0>

static inline void Write8PixelString(const uint8_t *font, const uint8_t x, uint8_t y, char (*source)(const char*), const char* text)
{
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
    1012:	84 2e       	mov	r8, r20
    1014:	86 94       	lsr	r8
    1016:	86 94       	lsr	r8
    1018:	86 94       	lsr	r8
    101a:	68 2d       	mov	r22, r8
    101c:	89 2d       	mov	r24, r9
    101e:	d5 dc       	rcall	.-1622   	; 0x9ca <SetAddress>

   ch = source(&text[index++]);
    1020:	c6 01       	movw	r24, r12
    1022:	e0 dc       	rcall	.-1600   	; 0x9e4 <ReadStringFromEeprom>
    1024:	b8 2e       	mov	r11, r24
   while ((ch != 0) && (ch != 255))
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	8b 0d       	add	r24, r11
    102a:	8e 3f       	cpi	r24, 0xFE	; 254
    102c:	08 f0       	brcs	.+2      	; 0x1030 <WriteStaticString+0x21a>
    102e:	59 c0       	rjmp	.+178    	; 0x10e2 <WriteStaticString+0x2cc>
    1030:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
    1032:	8e 01       	movw	r16, r28
    1034:	0e 5f       	subi	r16, 0xFE	; 254
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
    1038:	37 2d       	mov	r19, r7
    103a:	37 70       	andi	r19, 0x07	; 7
    103c:	a3 2e       	mov	r10, r19
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <WriteStaticString+0x22c>
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
    1040:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
    1042:	fe 01       	movw	r30, r28
    1044:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1046:	44 23       	and	r20, r20
    1048:	d9 f0       	breq	.+54     	; 0x1080 <WriteStaticString+0x26a>
   {
      if (value == pgm_read_byte_near(&(font[index])))
    104a:	f8 01       	movw	r30, r16
    104c:	84 91       	lpm	r24, Z
    104e:	8b 15       	cp	r24, r11
    1050:	d1 f0       	breq	.+52     	; 0x1086 <WriteStaticString+0x270>
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <WriteStaticString+0x250>
    105a:	fe 01       	movw	r30, r28
    105c:	e8 0f       	add	r30, r24
    105e:	f9 1f       	adc	r31, r25
    1060:	e4 91       	lpm	r30, Z
    1062:	eb 15       	cp	r30, r11
    1064:	91 f0       	breq	.+36     	; 0x108a <WriteStaticString+0x274>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
    1066:	fc 01       	movw	r30, r24
    1068:	31 96       	adiw	r30, 0x01	; 1
    106a:	ec 0f       	add	r30, r28
    106c:	fd 1f       	adc	r31, r29
    106e:	e4 91       	lpm	r30, Z
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	32 96       	adiw	r30, 0x02	; 2
    1074:	8e 0f       	add	r24, r30
    1076:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1078:	3f 5f       	subi	r19, 0xFF	; 255
    107a:	43 13       	cpse	r20, r19
    107c:	ee cf       	rjmp	.-36     	; 0x105a <WriteStaticString+0x244>
    107e:	05 c0       	rjmp	.+10     	; 0x108a <WriteStaticString+0x274>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <WriteStaticString+0x274>
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
    108a:	7c 01       	movw	r14, r24
    108c:	f2 e0       	ldi	r31, 0x02	; 2
    108e:	ef 0e       	add	r14, r31
    1090:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
    1092:	fc 01       	movw	r30, r24
    1094:	31 96       	adiw	r30, 0x01	; 1
    1096:	ec 0f       	add	r30, r28
    1098:	fd 1f       	adc	r31, r29
    109a:	64 90       	lpm	r6, Z
   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
    109c:	55 24       	eor	r5, r5
    109e:	53 94       	inc	r5
    10a0:	52 0e       	add	r5, r18
    10a2:	c6 01       	movw	r24, r12
    10a4:	82 0f       	add	r24, r18
    10a6:	91 1d       	adc	r25, r1
    10a8:	9d dc       	rcall	.-1734   	; 0x9e4 <ReadStringFromEeprom>
    10aa:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
    10ac:	66 20       	and	r6, r6
    10ae:	89 f0       	breq	.+34     	; 0x10d2 <WriteStaticString+0x2bc>
    10b0:	ec 0e       	add	r14, r28
    10b2:	fd 1e       	adc	r15, r29
    10b4:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
    10b6:	f7 01       	movw	r30, r14
    10b8:	84 91       	lpm	r24, Z
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
    10ba:	0a 2c       	mov	r0, r10
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <WriteStaticString+0x2aa>
    10be:	88 0f       	add	r24, r24
    10c0:	0a 94       	dec	r0
    10c2:	ea f7       	brpl	.-6      	; 0x10be <WriteStaticString+0x2a8>
    10c4:	74 dc       	rcall	.-1816   	; 0x9ae <WriteLcdData>
   while ((ch != 0) && (ch != 255))
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = source(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
    10c6:	43 94       	inc	r4
    10c8:	ff ef       	ldi	r31, 0xFF	; 255
    10ca:	ef 1a       	sub	r14, r31
    10cc:	ff 0a       	sbc	r15, r31
    10ce:	64 10       	cpse	r6, r4
    10d0:	f2 cf       	rjmp	.-28     	; 0x10b6 <WriteStaticString+0x2a0>
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(data);
      }
      TaskSleep(0);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	f8 d9       	rcall	.-3088   	; 0x4c8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = source(&text[index++]);
   while ((ch != 0) && (ch != 255))
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	8b 0d       	add	r24, r11
    10dc:	8e 3f       	cpi	r24, 0xFE	; 254
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <WriteStaticString+0x2cc>
    10e0:	af cf       	rjmp	.-162    	; 0x1040 <WriteStaticString+0x22a>
         WriteLcdData(data);
      }
      TaskSleep(0);
   }

   if (y % 8 > 0)
    10e2:	17 2d       	mov	r17, r7
    10e4:	17 70       	andi	r17, 0x07	; 7
    10e6:	09 f4       	brne	.+2      	; 0x10ea <WriteStaticString+0x2d4>
    10e8:	63 c0       	rjmp	.+198    	; 0x11b0 <WriteStaticString+0x39a>
   {
      index = 0;
      ch = source(&text[index++]);
    10ea:	c6 01       	movw	r24, r12
    10ec:	7b dc       	rcall	.-1802   	; 0x9e4 <ReadStringFromEeprom>
    10ee:	68 2e       	mov	r6, r24
      SetAddress(x, y / 8 + 1);
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	68 0d       	add	r22, r8
    10f4:	89 2d       	mov	r24, r9
    10f6:	69 dc       	rcall	.-1838   	; 0x9ca <SetAddress>
      while (ch != 0)
    10f8:	66 20       	and	r6, r6
    10fa:	09 f4       	brne	.+2      	; 0x10fe <WriteStaticString+0x2e8>
    10fc:	59 c0       	rjmp	.+178    	; 0x11b0 <WriteStaticString+0x39a>
    10fe:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
    1100:	5e 01       	movw	r10, r28
    1102:	32 e0       	ldi	r19, 0x02	; 2
    1104:	a3 0e       	add	r10, r19
    1106:	b1 1c       	adc	r11, r1
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
    1108:	88 e0       	ldi	r24, 0x08	; 8
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	7c 01       	movw	r14, r24
    110e:	e1 1a       	sub	r14, r17
    1110:	f1 08       	sbc	r15, r1
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <WriteStaticString+0x300>
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
    1114:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
    1116:	fe 01       	movw	r30, r28
    1118:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    111a:	44 23       	and	r20, r20
    111c:	d9 f0       	breq	.+54     	; 0x1154 <WriteStaticString+0x33e>
   {
      if (value == pgm_read_byte_near(&(font[index])))
    111e:	f5 01       	movw	r30, r10
    1120:	84 91       	lpm	r24, Z
    1122:	86 15       	cp	r24, r6
    1124:	d1 f0       	breq	.+52     	; 0x115a <WriteStaticString+0x344>
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	06 c0       	rjmp	.+12     	; 0x113a <WriteStaticString+0x324>
    112e:	fe 01       	movw	r30, r28
    1130:	e8 0f       	add	r30, r24
    1132:	f9 1f       	adc	r31, r25
    1134:	e4 91       	lpm	r30, Z
    1136:	e6 15       	cp	r30, r6
    1138:	91 f0       	breq	.+36     	; 0x115e <WriteStaticString+0x348>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
    113a:	fc 01       	movw	r30, r24
    113c:	31 96       	adiw	r30, 0x01	; 1
    113e:	ec 0f       	add	r30, r28
    1140:	fd 1f       	adc	r31, r29
    1142:	e4 91       	lpm	r30, Z
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	32 96       	adiw	r30, 0x02	; 2
    1148:	8e 0f       	add	r24, r30
    114a:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    114c:	3f 5f       	subi	r19, 0xFF	; 255
    114e:	43 13       	cpse	r20, r19
    1150:	ee cf       	rjmp	.-36     	; 0x112e <WriteStaticString+0x318>
    1152:	05 c0       	rjmp	.+10     	; 0x115e <WriteStaticString+0x348>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <WriteStaticString+0x348>
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
    115e:	8c 01       	movw	r16, r24
    1160:	0e 5f       	subi	r16, 0xFE	; 254
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
    1164:	fc 01       	movw	r30, r24
    1166:	31 96       	adiw	r30, 0x01	; 1
    1168:	ec 0f       	add	r30, r28
    116a:	fd 1f       	adc	r31, r29
    116c:	74 90       	lpm	r7, Z
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
    116e:	55 24       	eor	r5, r5
    1170:	53 94       	inc	r5
    1172:	52 0e       	add	r5, r18
    1174:	c6 01       	movw	r24, r12
    1176:	82 0f       	add	r24, r18
    1178:	91 1d       	adc	r25, r1
    117a:	34 dc       	rcall	.-1944   	; 0x9e4 <ReadStringFromEeprom>
    117c:	68 2e       	mov	r6, r24
         for (uint8_t n = 0; n < nrColumns; ++n)
    117e:	77 20       	and	r7, r7
    1180:	91 f0       	breq	.+36     	; 0x11a6 <WriteStaticString+0x390>
    1182:	0c 0f       	add	r16, r28
    1184:	1d 1f       	adc	r17, r29
    1186:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
    1188:	f8 01       	movw	r30, r16
    118a:	84 91       	lpm	r24, Z
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 2c       	mov	r0, r14
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <WriteStaticString+0x380>
    1192:	95 95       	asr	r25
    1194:	87 95       	ror	r24
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <WriteStaticString+0x37c>
            WriteLcdData(data);
    119a:	09 dc       	rcall	.-2030   	; 0x9ae <WriteLcdData>
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = source(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
    119c:	43 94       	inc	r4
    119e:	0f 5f       	subi	r16, 0xFF	; 255
    11a0:	1f 4f       	sbci	r17, 0xFF	; 255
    11a2:	74 10       	cpse	r7, r4
    11a4:	f1 cf       	rjmp	.-30     	; 0x1188 <WriteStaticString+0x372>
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
            WriteLcdData(data);
         }
         TaskSleep(0);
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	8e d9       	rcall	.-3300   	; 0x4c8 <TaskSleep>
   if (y % 8 > 0)
   {
      index = 0;
      ch = source(&text[index++]);
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
    11ac:	61 10       	cpse	r6, r1
    11ae:	b2 cf       	rjmp	.-156    	; 0x1114 <WriteStaticString+0x2fe>
            WriteLcdData(data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
    11b0:	68 2d       	mov	r22, r8
    11b2:	89 2d       	mov	r24, r9
    11b4:	0a dc       	rcall	.-2028   	; 0x9ca <SetAddress>
   }
   else
   {
      Write8PixelString(font, x, y, ReadStringFromEeprom, text);
   }
}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	bf 90       	pop	r11
    11c8:	af 90       	pop	r10
    11ca:	9f 90       	pop	r9
    11cc:	8f 90       	pop	r8
    11ce:	7f 90       	pop	r7
    11d0:	6f 90       	pop	r6
    11d2:	5f 90       	pop	r5
    11d4:	4f 90       	pop	r4
    11d6:	3f 90       	pop	r3
    11d8:	2f 90       	pop	r2
    11da:	08 95       	ret

000011dc <WriteInverted8PixelString>:

void WriteInverted8PixelString(const uint8_t *font, const uint8_t x, uint8_t y, const char* text)
{
    11dc:	4f 92       	push	r4
    11de:	5f 92       	push	r5
    11e0:	6f 92       	push	r6
    11e2:	7f 92       	push	r7
    11e4:	8f 92       	push	r8
    11e6:	9f 92       	push	r9
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
    11fe:	96 2e       	mov	r9, r22
    1200:	74 2e       	mov	r7, r20
    1202:	69 01       	movw	r12, r18
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);
    1204:	84 2e       	mov	r8, r20
    1206:	86 94       	lsr	r8
    1208:	86 94       	lsr	r8
    120a:	86 94       	lsr	r8
    120c:	68 2d       	mov	r22, r8
    120e:	89 2d       	mov	r24, r9
    1210:	dc db       	rcall	.-2120   	; 0x9ca <SetAddress>

   ch = eeprom_read_byte(&text[index++]);
    1212:	c6 01       	movw	r24, r12
    1214:	67 d6       	rcall	.+3278   	; 0x1ee4 <eeprom_read_byte>
    1216:	b8 2e       	mov	r11, r24
   while (ch != 0)
    1218:	88 23       	and	r24, r24
    121a:	09 f4       	brne	.+2      	; 0x121e <WriteInverted8PixelString+0x42>
    121c:	57 c0       	rjmp	.+174    	; 0x12cc <WriteInverted8PixelString+0xf0>
    121e:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
    1220:	8e 01       	movw	r16, r28
    1222:	0e 5f       	subi	r16, 0xFE	; 254
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
      ch = eeprom_read_byte(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(~data);
    1226:	37 2d       	mov	r19, r7
    1228:	37 70       	andi	r19, 0x07	; 7
    122a:	a3 2e       	mov	r10, r19
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <WriteInverted8PixelString+0x54>
   ch = eeprom_read_byte(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = eeprom_read_byte(&text[index++]);
    122e:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
    1230:	fe 01       	movw	r30, r28
    1232:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1234:	44 23       	and	r20, r20
    1236:	d9 f0       	breq	.+54     	; 0x126e <WriteInverted8PixelString+0x92>
   {
      if (value == pgm_read_byte_near(&(font[index])))
    1238:	f8 01       	movw	r30, r16
    123a:	84 91       	lpm	r24, Z
    123c:	8b 15       	cp	r24, r11
    123e:	d1 f0       	breq	.+52     	; 0x1274 <WriteInverted8PixelString+0x98>
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <WriteInverted8PixelString+0x78>
    1248:	fe 01       	movw	r30, r28
    124a:	e8 0f       	add	r30, r24
    124c:	f9 1f       	adc	r31, r25
    124e:	e4 91       	lpm	r30, Z
    1250:	eb 15       	cp	r30, r11
    1252:	91 f0       	breq	.+36     	; 0x1278 <WriteInverted8PixelString+0x9c>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
    1254:	fc 01       	movw	r30, r24
    1256:	31 96       	adiw	r30, 0x01	; 1
    1258:	ec 0f       	add	r30, r28
    125a:	fd 1f       	adc	r31, r29
    125c:	e4 91       	lpm	r30, Z
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	32 96       	adiw	r30, 0x02	; 2
    1262:	8e 0f       	add	r24, r30
    1264:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1266:	3f 5f       	subi	r19, 0xFF	; 255
    1268:	43 13       	cpse	r20, r19
    126a:	ee cf       	rjmp	.-36     	; 0x1248 <WriteInverted8PixelString+0x6c>
    126c:	05 c0       	rjmp	.+10     	; 0x1278 <WriteInverted8PixelString+0x9c>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <WriteInverted8PixelString+0x9c>
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
    1278:	7c 01       	movw	r14, r24
    127a:	f2 e0       	ldi	r31, 0x02	; 2
    127c:	ef 0e       	add	r14, r31
    127e:	f1 1c       	adc	r15, r1
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
    1280:	fc 01       	movw	r30, r24
    1282:	31 96       	adiw	r30, 0x01	; 1
    1284:	ec 0f       	add	r30, r28
    1286:	fd 1f       	adc	r31, r29
    1288:	64 90       	lpm	r6, Z
   ch = eeprom_read_byte(&text[index++]);
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = eeprom_read_byte(&text[index++]);
    128a:	55 24       	eor	r5, r5
    128c:	53 94       	inc	r5
    128e:	52 0e       	add	r5, r18
    1290:	c6 01       	movw	r24, r12
    1292:	82 0f       	add	r24, r18
    1294:	91 1d       	adc	r25, r1
    1296:	26 d6       	rcall	.+3148   	; 0x1ee4 <eeprom_read_byte>
    1298:	b8 2e       	mov	r11, r24
      for (uint8_t n = 0; n < nrColumns; ++n)
    129a:	66 20       	and	r6, r6
    129c:	91 f0       	breq	.+36     	; 0x12c2 <WriteInverted8PixelString+0xe6>
    129e:	ec 0e       	add	r14, r28
    12a0:	fd 1e       	adc	r15, r29
    12a2:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
    12a4:	f7 01       	movw	r30, r14
    12a6:	84 91       	lpm	r24, Z
      ch = eeprom_read_byte(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(~data);
    12a8:	0a 2c       	mov	r0, r10
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <WriteInverted8PixelString+0xd2>
    12ac:	88 0f       	add	r24, r24
    12ae:	0a 94       	dec	r0
    12b0:	ea f7       	brpl	.-6      	; 0x12ac <WriteInverted8PixelString+0xd0>
    12b2:	80 95       	com	r24
    12b4:	7c db       	rcall	.-2312   	; 0x9ae <WriteLcdData>
   while (ch != 0)
   {
      uint16_t characterIndex = FindCharacter(font, ch);
      uint8_t nrColumns = GetNrColumns(font, characterIndex);
      ch = eeprom_read_byte(&text[index++]);
      for (uint8_t n = 0; n < nrColumns; ++n)
    12b6:	43 94       	inc	r4
    12b8:	ff ef       	ldi	r31, 0xFF	; 255
    12ba:	ef 1a       	sub	r14, r31
    12bc:	ff 0a       	sbc	r15, r31
    12be:	46 10       	cpse	r4, r6
    12c0:	f1 cf       	rjmp	.-30     	; 0x12a4 <WriteInverted8PixelString+0xc8>
      {
         value = GetColumnData(font, characterIndex, n);
         data = value << (y % 8);
         WriteLcdData(~data);
      }
      TaskSleep(0);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	00 d9       	rcall	.-3584   	; 0x4c8 <TaskSleep>
   uint8_t data, value, ch, index = 0;

   SetAddress(x, y / 8);

   ch = eeprom_read_byte(&text[index++]);
   while (ch != 0)
    12c8:	b1 10       	cpse	r11, r1
    12ca:	b1 cf       	rjmp	.-158    	; 0x122e <WriteInverted8PixelString+0x52>
         WriteLcdData(~data);
      }
      TaskSleep(0);
   }

   if (y % 8 > 0)
    12cc:	17 2d       	mov	r17, r7
    12ce:	17 70       	andi	r17, 0x07	; 7
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <WriteInverted8PixelString+0xf8>
    12d2:	64 c0       	rjmp	.+200    	; 0x139c <WriteInverted8PixelString+0x1c0>
   {
      index = 0;
      ch = eeprom_read_byte(&text[index++]);
    12d4:	c6 01       	movw	r24, r12
    12d6:	06 d6       	rcall	.+3084   	; 0x1ee4 <eeprom_read_byte>
    12d8:	68 2e       	mov	r6, r24
      SetAddress(x, y / 8 + 1);
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	68 0d       	add	r22, r8
    12de:	89 2d       	mov	r24, r9
    12e0:	74 db       	rcall	.-2328   	; 0x9ca <SetAddress>
      while (ch != 0)
    12e2:	66 20       	and	r6, r6
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <WriteInverted8PixelString+0x10c>
    12e6:	5a c0       	rjmp	.+180    	; 0x139c <WriteInverted8PixelString+0x1c0>
    12e8:	21 e0       	ldi	r18, 0x01	; 1
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
   {
      if (value == pgm_read_byte_near(&(font[index])))
    12ea:	5e 01       	movw	r10, r28
    12ec:	32 e0       	ldi	r19, 0x02	; 2
    12ee:	a3 0e       	add	r10, r19
    12f0:	b1 1c       	adc	r11, r1
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
    12f2:	88 e0       	ldi	r24, 0x08	; 8
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	7c 01       	movw	r14, r24
    12f8:	e1 1a       	sub	r14, r17
    12fa:	f1 08       	sbc	r15, r1
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <WriteInverted8PixelString+0x124>
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
    12fe:	25 2d       	mov	r18, r5
   return pgm_read_byte_near(&(font[1]));
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
    1300:	fe 01       	movw	r30, r28
    1302:	44 91       	lpm	r20, Z
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1304:	44 23       	and	r20, r20
    1306:	d9 f0       	breq	.+54     	; 0x133e <WriteInverted8PixelString+0x162>
   {
      if (value == pgm_read_byte_near(&(font[index])))
    1308:	f5 01       	movw	r30, r10
    130a:	84 91       	lpm	r24, Z
    130c:	86 15       	cp	r24, r6
    130e:	d1 f0       	breq	.+52     	; 0x1344 <WriteInverted8PixelString+0x168>
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <WriteInverted8PixelString+0x148>
    1318:	fe 01       	movw	r30, r28
    131a:	e8 0f       	add	r30, r24
    131c:	f9 1f       	adc	r31, r25
    131e:	e4 91       	lpm	r30, Z
    1320:	e6 15       	cp	r30, r6
    1322:	91 f0       	breq	.+36     	; 0x1348 <WriteInverted8PixelString+0x16c>
      {
         break;
      }
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
    1324:	fc 01       	movw	r30, r24
    1326:	31 96       	adiw	r30, 0x01	; 1
    1328:	ec 0f       	add	r30, r28
    132a:	fd 1f       	adc	r31, r29
    132c:	e4 91       	lpm	r30, Z
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	32 96       	adiw	r30, 0x02	; 2
    1332:	8e 0f       	add	r24, r30
    1334:	9f 1f       	adc	r25, r31
static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;

   for (uint8_t i = 0; i < nrCharacters; ++i)
    1336:	3f 5f       	subi	r19, 0xFF	; 255
    1338:	43 13       	cpse	r20, r19
    133a:	ee cf       	rjmp	.-36     	; 0x1318 <WriteInverted8PixelString+0x13c>
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <WriteInverted8PixelString+0x16c>
}

static inline uint16_t FindCharacter(const uint8_t *font, uint8_t value)
{
   uint8_t nrCharacters = pgm_read_byte_near(&(font[0]));
   uint16_t index = 2;
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <WriteInverted8PixelString+0x16c>
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	90 e0       	ldi	r25, 0x00	; 0
      else
      {
         index += pgm_read_byte_near(&(font[index + 1])) + 2;
      }
   }
   return index + 2;
    1348:	8c 01       	movw	r16, r24
    134a:	0e 5f       	subi	r16, 0xFE	; 254
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
}

static inline uint8_t GetNrColumns(const uint8_t *font, uint16_t characterIndex)
{
   return pgm_read_byte_near(&(font[characterIndex - 1]));
    134e:	fc 01       	movw	r30, r24
    1350:	31 96       	adiw	r30, 0x01	; 1
    1352:	ec 0f       	add	r30, r28
    1354:	fd 1f       	adc	r31, r29
    1356:	74 90       	lpm	r7, Z
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
    1358:	55 24       	eor	r5, r5
    135a:	53 94       	inc	r5
    135c:	52 0e       	add	r5, r18
    135e:	c6 01       	movw	r24, r12
    1360:	82 0f       	add	r24, r18
    1362:	91 1d       	adc	r25, r1
    1364:	bf d5       	rcall	.+2942   	; 0x1ee4 <eeprom_read_byte>
    1366:	68 2e       	mov	r6, r24
         for (uint8_t n = 0; n < nrColumns; ++n)
    1368:	77 20       	and	r7, r7
    136a:	99 f0       	breq	.+38     	; 0x1392 <WriteInverted8PixelString+0x1b6>
    136c:	0c 0f       	add	r16, r28
    136e:	1d 1f       	adc	r17, r29
    1370:	41 2c       	mov	r4, r1
   return pgm_read_byte_near(&(font[characterIndex - 1]));
}

static inline uint8_t GetColumnData(const uint8_t *font, uint16_t characterIndex, uint8_t position)
{
   return pgm_read_byte_near(&(font[characterIndex + position]));
    1372:	f8 01       	movw	r30, r16
    1374:	84 91       	lpm	r24, Z
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 2c       	mov	r0, r14
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <WriteInverted8PixelString+0x1a4>
    137c:	95 95       	asr	r25
    137e:	87 95       	ror	r24
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <WriteInverted8PixelString+0x1a0>
            WriteLcdData(~data);
    1384:	80 95       	com	r24
    1386:	13 db       	rcall	.-2522   	; 0x9ae <WriteLcdData>
      while (ch != 0)
      {
         uint16_t characterIndex = FindCharacter(font, ch);
         uint8_t nrColumns = GetNrColumns(font, characterIndex);
         ch = eeprom_read_byte(&text[index++]);
         for (uint8_t n = 0; n < nrColumns; ++n)
    1388:	43 94       	inc	r4
    138a:	0f 5f       	subi	r16, 0xFF	; 255
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	47 10       	cpse	r4, r7
    1390:	f0 cf       	rjmp	.-32     	; 0x1372 <WriteInverted8PixelString+0x196>
         {
            data = GetColumnData(font, characterIndex, n);
            data >>= (8 - (y % 8));
            WriteLcdData(~data);
         }
         TaskSleep(0);
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	98 d8       	rcall	.-3792   	; 0x4c8 <TaskSleep>
   if (y % 8 > 0)
   {
      index = 0;
      ch = eeprom_read_byte(&text[index++]);
      SetAddress(x, y / 8 + 1);
      while (ch != 0)
    1398:	61 10       	cpse	r6, r1
    139a:	b1 cf       	rjmp	.-158    	; 0x12fe <WriteInverted8PixelString+0x122>
            WriteLcdData(~data);
         }
         TaskSleep(0);
      }
   }
   SetAddress(x, y / 8);
    139c:	68 2d       	mov	r22, r8
    139e:	89 2d       	mov	r24, r9
    13a0:	14 db       	rcall	.-2520   	; 0x9ca <SetAddress>
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	7f 90       	pop	r7
    13bc:	6f 90       	pop	r6
    13be:	5f 90       	pop	r5
    13c0:	4f 90       	pop	r4
    13c2:	08 95       	ret

000013c4 <SetKeyHandler>:
   }
}

void SetKeyHandler(void (*handler)(enum PressedButtonState))
{
   keyHandler = handler;
    13c4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <keyHandler+0x1>
    13c8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <keyHandler>
    13cc:	08 95       	ret

000013ce <ButtonSetup>:
}

void ButtonSetup(void)
{
   LcdSetup();
    13ce:	0c db       	rcall	.-2536   	; 0x9e8 <LcdSetup>
   LcdInitialize();
    13d0:	31 db       	rcall	.-2462   	; 0xa34 <LcdInitialize>
    13d2:	08 95       	ret

000013d4 <ButtonTask>:
         else
         {
            keyHandler(pressedButton + 2);
         }
      }
      pressedButton = PressedButtonNone;
    13d4:	d9 e0       	ldi	r29, 0x09	; 9
   if (oldAdcButton != newAdcButton)
   {
      count = 0;
      if (keyHandler)
      {
         if (pressedButton % 3 == 1)
    13d6:	13 e0       	ldi	r17, 0x03	; 3
         pressedButton++;
         if (keyHandler) keyHandler(pressedButton);
      }
      else if (count > LONGPRESS)
      {
        count = LONGPRESS + 1;
    13d8:	05 e6       	ldi	r16, 0x65	; 101
{
   switch (adcButton)
   {
      case ButtonAdcDown: return PressedButtonDown;
      case ButtonAdcUp:   return PressedButtonUp;
      case ButtonAdcMenu: return PressedButtonMenu;
    13da:	0f 2e       	mov	r0, r31
    13dc:	f6 e0       	ldi	r31, 0x06	; 6
    13de:	ff 2e       	mov	r15, r31
    13e0:	f0 2d       	mov	r31, r0

static inline void CheckButtonPress(void)
{
   static enum ButtonAdc oldAdcButton = ButtonAdcNone;
   static uint8_t count = 0;
   enum ButtonAdc newAdcButton = GetAdcButton();
    13e2:	20 da       	rcall	.-3008   	; 0x824 <GetAdcButton>
    13e4:	c8 2f       	mov	r28, r24

   if (oldAdcButton != newAdcButton)
    13e6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <oldAdcButton.1578>
    13ea:	c8 17       	cp	r28, r24
    13ec:	c9 f0       	breq	.+50     	; 0x1420 <ButtonTask+0x4c>
   {
      count = 0;
    13ee:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <count.1579>
      if (keyHandler)
    13f2:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <keyHandler>
    13f6:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <keyHandler+0x1>
    13fa:	30 97       	sbiw	r30, 0x00	; 0
    13fc:	69 f0       	breq	.+26     	; 0x1418 <ButtonTask+0x44>
      {
         if (pressedButton % 3 == 1)
    13fe:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <pressedButton>
    1402:	82 2f       	mov	r24, r18
    1404:	61 2f       	mov	r22, r17
    1406:	d4 d4       	rcall	.+2472   	; 0x1db0 <__udivmodqi4>
    1408:	91 30       	cpi	r25, 0x01	; 1
    140a:	19 f4       	brne	.+6      	; 0x1412 <ButtonTask+0x3e>
         {
            keyHandler(PressedButtonNone);
    140c:	8d 2f       	mov	r24, r29
    140e:	09 95       	icall
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <ButtonTask+0x44>
         }
         else
         {
            keyHandler(pressedButton + 2);
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	82 0f       	add	r24, r18
    1416:	09 95       	icall
         }
      }
      pressedButton = PressedButtonNone;
    1418:	d0 93 62 00 	sts	0x0062, r29	; 0x800062 <pressedButton>
      oldAdcButton = newAdcButton;
    141c:	c0 93 6b 00 	sts	0x006B, r28	; 0x80006b <oldAdcButton.1578>
   }

   if (newAdcButton != ButtonAdcNone)
    1420:	cc 23       	and	r28, r28
    1422:	91 f1       	breq	.+100    	; 0x1488 <ButtonTask+0xb4>
   {
      count++;
    1424:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <count.1579>
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <count.1579>

      if (count == 5)
    142e:	85 30       	cpi	r24, 0x05	; 5
    1430:	c1 f4       	brne	.+48     	; 0x1462 <ButtonTask+0x8e>
static enum PressedButtonState pressedButton = PressedButtonNone;
static void (*keyHandler)(enum PressedButtonState);

static inline enum PressedButtonState AdcButtonToPressedButton(enum ButtonAdc adcButton)
{
   switch (adcButton)
    1432:	c2 30       	cpi	r28, 0x02	; 2
    1434:	29 f0       	breq	.+10     	; 0x1440 <ButtonTask+0x6c>
    1436:	c3 30       	cpi	r28, 0x03	; 3
    1438:	29 f0       	breq	.+10     	; 0x1444 <ButtonTask+0x70>
    143a:	c1 30       	cpi	r28, 0x01	; 1
    143c:	29 f4       	brne	.+10     	; 0x1448 <ButtonTask+0x74>
    143e:	06 c0       	rjmp	.+12     	; 0x144c <ButtonTask+0x78>
   {
      case ButtonAdcDown: return PressedButtonDown;
      case ButtonAdcUp:   return PressedButtonUp;
    1440:	81 2f       	mov	r24, r17
    1442:	05 c0       	rjmp	.+10     	; 0x144e <ButtonTask+0x7a>
      case ButtonAdcMenu: return PressedButtonMenu;
    1444:	8f 2d       	mov	r24, r15
    1446:	03 c0       	rjmp	.+6      	; 0x144e <ButtonTask+0x7a>
      case ButtonAdcNone:
      default:
         return PressedButtonNone;
    1448:	8d 2f       	mov	r24, r29
    144a:	01 c0       	rjmp	.+2      	; 0x144e <ButtonTask+0x7a>

static inline enum PressedButtonState AdcButtonToPressedButton(enum ButtonAdc adcButton)
{
   switch (adcButton)
   {
      case ButtonAdcDown: return PressedButtonDown;
    144c:	80 e0       	ldi	r24, 0x00	; 0
   {
      count++;

      if (count == 5)
      {
         pressedButton = AdcButtonToPressedButton(newAdcButton);
    144e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pressedButton>
         if (keyHandler) keyHandler(pressedButton);
    1452:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <keyHandler>
    1456:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <keyHandler+0x1>
    145a:	30 97       	sbiw	r30, 0x00	; 0
    145c:	a9 f0       	breq	.+42     	; 0x1488 <ButtonTask+0xb4>
    145e:	09 95       	icall
    1460:	13 c0       	rjmp	.+38     	; 0x1488 <ButtonTask+0xb4>
      }
      else if (count == LONGPRESS)
    1462:	84 36       	cpi	r24, 0x64	; 100
    1464:	69 f4       	brne	.+26     	; 0x1480 <ButtonTask+0xac>
      {
         pressedButton++;
    1466:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pressedButton>
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pressedButton>
         if (keyHandler) keyHandler(pressedButton);
    1470:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <keyHandler>
    1474:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <keyHandler+0x1>
    1478:	30 97       	sbiw	r30, 0x00	; 0
    147a:	31 f0       	breq	.+12     	; 0x1488 <ButtonTask+0xb4>
    147c:	09 95       	icall
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <ButtonTask+0xb4>
      }
      else if (count > LONGPRESS)
    1480:	85 36       	cpi	r24, 0x65	; 101
    1482:	10 f0       	brcs	.+4      	; 0x1488 <ButtonTask+0xb4>
      {
        count = LONGPRESS + 1;
    1484:	00 93 6a 00 	sts	0x006A, r16	; 0x80006a <count.1579>
void ButtonTask(void)
{
   while (true)
   {
      CheckButtonPress();
      TaskSleep(5);
    1488:	85 e0       	ldi	r24, 0x05	; 5
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	1d d8       	rcall	.-4038   	; 0x4c8 <TaskSleep>
      HandleDisplay();
    148e:	0a d0       	rcall	.+20     	; 0x14a4 <HandleDisplay>
      TaskSleep(5);
    1490:	85 e0       	ldi	r24, 0x05	; 5
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	19 d8       	rcall	.-4046   	; 0x4c8 <TaskSleep>
   }
    1496:	a5 cf       	rjmp	.-182    	; 0x13e2 <ButtonTask+0xe>

00001498 <GetScreenMode>:
}

enum ScreenModeType GetScreenMode(void)
{
   return screen;
}
    1498:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <screen>
    149c:	08 95       	ret

0000149e <SetScreenMode>:

void SetScreenMode(enum ScreenModeType screenMode)
{
   screen = screenMode;
    149e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
    14a2:	08 95       	ret

000014a4 <HandleDisplay>:
}

void HandleDisplay(void)
{
   switch(screen)
    14a4:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <screen>
    14a8:	8e 2f       	mov	r24, r30
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	87 30       	cpi	r24, 0x07	; 7
    14ae:	91 05       	cpc	r25, r1
    14b0:	c8 f5       	brcc	.+114    	; 0x1524 <HandleDisplay+0x80>
    14b2:	fc 01       	movw	r30, r24
    14b4:	ef 5e       	subi	r30, 0xEF	; 239
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	09 94       	ijmp
static char EEMEM ProductTitle[20] = "Sun Blind Control";
static char EEMEM ProductVersion[20] = "version 1.0";

static void displayProductTitle(void)
{
   Clear();
    14ba:	aa da       	rcall	.-2732   	; 0xa10 <Clear>
   WriteStaticString(font5x8, 0, 10, ProductTitle);
    14bc:	24 e1       	ldi	r18, 0x14	; 20
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a e0       	ldi	r20, 0x0A	; 10
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	80 e4       	ldi	r24, 0x40	; 64
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	a6 dc       	rcall	.-1716   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 10, 24, ProductVersion);
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	48 e1       	ldi	r20, 0x18	; 24
    14d0:	6a e0       	ldi	r22, 0x0A	; 10
    14d2:	80 e4       	ldi	r24, 0x40	; 64
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	9f dc       	rcall	.-1730   	; 0xe16 <WriteStaticString>
   TaskSleep(2000);
    14d8:	80 ed       	ldi	r24, 0xD0	; 208
    14da:	97 e0       	ldi	r25, 0x07	; 7
    14dc:	f5 d7       	rcall	.+4074   	; 0x24c8 <__TEXT_REGION_LENGTH__+0x4c8>
   switch(screen)
   {
      case ModeProductTitle:
         // write product title and software version
         displayProductTitle();
         screen = ModeMainScreenInit;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
         break;
    14e4:	08 95       	ret

      case ModeMainScreenInit:
         // display main screen with progress bar and percent blinds lowered
         mainScreenInit();
    14e6:	a0 d1       	rcall	.+832    	; 0x1828 <mainScreenInit>
         SetKeyHandler(mainScreenKey);
    14e8:	8e e3       	ldi	r24, 0x3E	; 62
    14ea:	9c e0       	ldi	r25, 0x0C	; 12
    14ec:	6b df       	rcall	.-298    	; 0x13c4 <SetKeyHandler>
         screen = ModeMainScreenUpdate;
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
         break;
    14f4:	08 95       	ret

      case ModeMainScreenUpdate:
         // update main screen
         mainScreenUpdate();
    14f6:	11 d2       	rcall	.+1058   	; 0x191a <mainScreenUpdate>
         break;
    14f8:	08 95       	ret

      case ModeAskClosingTimeInit:
         // ask user to input time before closing the sun blinds
         closingTimeInit();
    14fa:	e7 d2       	rcall	.+1486   	; 0x1aca <closingTimeInit>
         SetKeyHandler(ClosingTimeKey);
    14fc:	83 e8       	ldi	r24, 0x83	; 131
    14fe:	9d e0       	ldi	r25, 0x0D	; 13
    1500:	61 df       	rcall	.-318    	; 0x13c4 <SetKeyHandler>
         screen = ModeAskClosingTimeUpdate;
    1502:	84 e0       	ldi	r24, 0x04	; 4
    1504:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
         break;
    1508:	08 95       	ret

      case ModeAskClosingTimeUpdate:
         // update the input time screen
         closingTimeUpdate();
    150a:	20 d3       	rcall	.+1600   	; 0x1b4c <closingTimeUpdate>
         break;
    150c:	08 95       	ret

      case ModeAskFullOpenInit:
         // display screen to input time to open sun blinds 100%
         Clear();
    150e:	80 da       	rcall	.-2816   	; 0xa10 <Clear>
         FullOpenInit();
    1510:	93 d2       	rcall	.+1318   	; 0x1a38 <FullOpenInit>
         SetKeyHandler(FullOpenKey);
    1512:	8c e4       	ldi	r24, 0x4C	; 76
    1514:	9d e0       	ldi	r25, 0x0D	; 13
    1516:	56 df       	rcall	.-340    	; 0x13c4 <SetKeyHandler>
         screen = ModeAskFullOpenUpdate;
    1518:	86 e0       	ldi	r24, 0x06	; 6
    151a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <screen>
         break;
    151e:	08 95       	ret

      case ModeAskFullOpenUpdate:
         // screen to input 100% open time is displayed
         FullOpenUpdate();
    1520:	ba d2       	rcall	.+1396   	; 0x1a96 <FullOpenUpdate>
         break;
    1522:	08 95       	ret

      default:
         screen = ModeProductTitle;
    1524:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <screen>
    1528:	08 95       	ret

0000152a <GetMotorDirection>:

static bool timerActive = false;

direction_type GetMotorDirection(void)
{
   return motorDirection;
    152a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
}
    152e:	08 95       	ret

00001530 <MotorOpenPercent>:

void MotorOpenPercent(uint8_t value)
{
    1530:	28 2f       	mov	r18, r24
   requestedOpenTime = ((int32_t)value * (int32_t)fullyOpen) / 100;
    1532:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <fullyOpen>
    1536:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <fullyOpen+0x1>
    153a:	07 2e       	mov	r0, r23
    153c:	00 0c       	add	r0, r0
    153e:	88 0b       	sbc	r24, r24
    1540:	99 0b       	sbc	r25, r25
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	1a d4       	rcall	.+2100   	; 0x1d7e <__mulsi3>
    154a:	24 e6       	ldi	r18, 0x64	; 100
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	83 d4       	rcall	.+2310   	; 0x1e5a <__divmodsi4>
    1554:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <requestedOpenTime+0x1>
    1558:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <requestedOpenTime>
    155c:	08 95       	ret

0000155e <MotorOpen>:
}
 
void MotorOpen(void)
{
   StartDown();
    155e:	90 d3       	rcall	.+1824   	; 0x1c80 <StartDown>
   requestedOpenTime = -1;
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <requestedOpenTime+0x1>
    1568:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <requestedOpenTime>
   motorDirection = DIRECTION_DOWN;
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <motorDirection>
    1572:	08 95       	ret

00001574 <MotorClose>:
}

void MotorClose(void)
{
   if (GetUpDownTime() > 0)
    1574:	97 d3       	rcall	.+1838   	; 0x1ca4 <GetUpDownTime>
    1576:	89 2b       	or	r24, r25
    1578:	21 f0       	breq	.+8      	; 0x1582 <MotorClose+0xe>
   {
      StartUp();
    157a:	86 d3       	rcall	.+1804   	; 0x1c88 <StartUp>
      motorDirection = DIRECTION_UP;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <motorDirection>
   }
   requestedOpenTime = -1;
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	9f ef       	ldi	r25, 0xFF	; 255
    1586:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <requestedOpenTime+0x1>
    158a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <requestedOpenTime>
    158e:	08 95       	ret

00001590 <MotorStop>:
}

void MotorStop(void)
{
   StopUpDown();
    1590:	7f d3       	rcall	.+1790   	; 0x1c90 <StopUpDown>
   requestedOpenTime = -1;
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	9f ef       	ldi	r25, 0xFF	; 255
    1596:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <requestedOpenTime+0x1>
    159a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <requestedOpenTime>
   motorDirection = DIRECTION_STOP;
    159e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <motorDirection>
    15a2:	08 95       	ret

000015a4 <MotorProgress>:
}

uint8_t MotorProgress(void)
{
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
   uint8_t value = 0;
   if (fullyOpen)
    15a8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <fullyOpen>
    15ac:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <fullyOpen+0x1>
    15b0:	89 2b       	or	r24, r25
    15b2:	b1 f1       	breq	.+108    	; 0x1620 <MotorProgress+0x7c>
   {
      value = ((int32_t)100 * GetUpDownTime()) / fullyOpen;
    15b4:	77 d3       	rcall	.+1774   	; 0x1ca4 <GetUpDownTime>
    15b6:	a0 e0       	ldi	r26, 0x00	; 0
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	aa 1f       	adc	r26, r26
    15c0:	bb 1f       	adc	r27, r27
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	aa 1f       	adc	r26, r26
    15c8:	bb 1f       	adc	r27, r27
    15ca:	ac 01       	movw	r20, r24
    15cc:	bd 01       	movw	r22, r26
    15ce:	44 0f       	add	r20, r20
    15d0:	55 1f       	adc	r21, r21
    15d2:	66 1f       	adc	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	44 0f       	add	r20, r20
    15d8:	55 1f       	adc	r21, r21
    15da:	66 1f       	adc	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	84 0f       	add	r24, r20
    15e0:	95 1f       	adc	r25, r21
    15e2:	a6 1f       	adc	r26, r22
    15e4:	b7 1f       	adc	r27, r23
    15e6:	ac 01       	movw	r20, r24
    15e8:	bd 01       	movw	r22, r26
    15ea:	44 0f       	add	r20, r20
    15ec:	55 1f       	adc	r21, r21
    15ee:	66 1f       	adc	r22, r22
    15f0:	77 1f       	adc	r23, r23
    15f2:	44 0f       	add	r20, r20
    15f4:	55 1f       	adc	r21, r21
    15f6:	66 1f       	adc	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	8c 01       	movw	r16, r24
    15fc:	9d 01       	movw	r18, r26
    15fe:	04 0f       	add	r16, r20
    1600:	15 1f       	adc	r17, r21
    1602:	26 1f       	adc	r18, r22
    1604:	37 1f       	adc	r19, r23
    1606:	c9 01       	movw	r24, r18
    1608:	b8 01       	movw	r22, r16
    160a:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <fullyOpen>
    160e:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <fullyOpen+0x1>
    1612:	03 2e       	mov	r0, r19
    1614:	00 0c       	add	r0, r0
    1616:	44 0b       	sbc	r20, r20
    1618:	55 0b       	sbc	r21, r21
    161a:	1f d4       	rcall	.+2110   	; 0x1e5a <__divmodsi4>
    161c:	82 2f       	mov	r24, r18
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <MotorProgress+0x7e>
   motorDirection = DIRECTION_STOP;
}

uint8_t MotorProgress(void)
{
   uint8_t value = 0;
    1620:	80 e0       	ldi	r24, 0x00	; 0
   if (fullyOpen)
   {
      value = ((int32_t)100 * GetUpDownTime()) / fullyOpen;
   }
   if (value > 100) value = 100;
   return value;
    1622:	85 36       	cpi	r24, 0x65	; 101
    1624:	08 f0       	brcs	.+2      	; 0x1628 <MotorProgress+0x84>
    1626:	84 e6       	ldi	r24, 0x64	; 100
}
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	08 95       	ret

0000162e <SetFullyOpen>:

void SetFullyOpen(void)
{
   fullyOpen = GetUpDownTime();
    162e:	3a d3       	rcall	.+1652   	; 0x1ca4 <GetUpDownTime>
    1630:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <fullyOpen+0x1>
    1634:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <fullyOpen>
    1638:	08 95       	ret

0000163a <MotorSetup>:
}

void MotorSetup(void)
{
   // PA2; drive motor down, PA3: drive motor up
   PORTA &= ~((1 << PORTA2) | (1 << PORTA3)); // make sure outputs are low at startup
    163a:	8b b3       	in	r24, 0x1b	; 27
    163c:	83 7f       	andi	r24, 0xF3	; 243
    163e:	8b bb       	out	0x1b, r24	; 27
   DDRA |= (1 << DDA2) | (1 << DDA3);
    1640:	8a b3       	in	r24, 0x1a	; 26
    1642:	8c 60       	ori	r24, 0x0C	; 12
    1644:	8a bb       	out	0x1a, r24	; 26
    1646:	08 95       	ret

00001648 <SetMotorOutput>:
}

void SetMotorOutput(direction_type direction)
{
   switch (direction)
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	21 f0       	breq	.+8      	; 0x1654 <SetMotorOutput+0xc>
    164c:	48 f0       	brcs	.+18     	; 0x1660 <SetMotorOutput+0x18>
    164e:	82 30       	cpi	r24, 0x02	; 2
    1650:	21 f0       	breq	.+8      	; 0x165a <SetMotorOutput+0x12>
    1652:	08 95       	ret
   {
      case DIRECTION_UP:
         PORTA &= ~(1 << PORTA2);
    1654:	da 98       	cbi	0x1b, 2	; 27
         PORTA |= (1 << PORTA3);
    1656:	db 9a       	sbi	0x1b, 3	; 27
         break;
    1658:	08 95       	ret

      case DIRECTION_DOWN:
         PORTA &= ~(1 << PORTA3);
    165a:	db 98       	cbi	0x1b, 3	; 27
         PORTA |= (1 << PORTA2);
    165c:	da 9a       	sbi	0x1b, 2	; 27
         break;
    165e:	08 95       	ret

      case DIRECTION_STOP:
         PORTA &= ~((1 << PORTA2) | (1 << PORTA3));
    1660:	8b b3       	in	r24, 0x1b	; 27
    1662:	83 7f       	andi	r24, 0xF3	; 243
    1664:	8b bb       	out	0x1b, r24	; 27
    1666:	08 95       	ret

00001668 <MotorDelayClose>:
         break;
   }
}

void MotorDelayClose(uint16_t delayTime)
{
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	ec 01       	movw	r28, r24
   StartTime(delayTime);
    166e:	b3 d2       	rcall	.+1382   	; 0x1bd6 <StartTime>
   timerActive = delayTime > 0;   
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	cd 2b       	or	r28, r29
    1674:	09 f4       	brne	.+2      	; 0x1678 <MotorDelayClose+0x10>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <timerActive>
}
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <MotorTask>:

      /* start automatic moving down */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime > 0) && (requestedOpenTime > GetUpDownTime()))
      {
         StartDown();
         motorDirection = DIRECTION_DOWN;
    1682:	02 e0       	ldi	r16, 0x02	; 2

      /* start automatic moving up */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime >= 0) && (requestedOpenTime < GetUpDownTime()))
      {
         StartUp();
         motorDirection = DIRECTION_UP;
    1684:	11 e0       	ldi	r17, 0x01	; 1

      /* stop automatic moving up */
      if ((motorDirection == DIRECTION_UP) && (requestedOpenTime >= 0) && (requestedOpenTime > GetUpDownTime()))
      {
         StopUpDown();
         requestedOpenTime = -1;
    1686:	cf ef       	ldi	r28, 0xFF	; 255
    1688:	df ef       	ldi	r29, 0xFF	; 255
void MotorTask(void)
{
   while (true)
   {
      /* manual moving up but already fully closed */
      if ((motorDirection == DIRECTION_UP) && (GetUpDownTime() == 0))
    168a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	49 f4       	brne	.+18     	; 0x16a4 <MotorTask+0x22>
    1692:	08 d3       	rcall	.+1552   	; 0x1ca4 <GetUpDownTime>
    1694:	89 2b       	or	r24, r25
    1696:	31 f4       	brne	.+12     	; 0x16a4 <MotorTask+0x22>
      {
         /* extra time to make sure fully closed */
         TaskSleep(500);
    1698:	84 ef       	ldi	r24, 0xF4	; 244
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	15 d7       	rcall	.+3626   	; 0x24c8 <__TEXT_REGION_LENGTH__+0x4c8>
         StopUpDown();
    169e:	f8 d2       	rcall	.+1520   	; 0x1c90 <StopUpDown>
         motorDirection = DIRECTION_STOP;
    16a0:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <motorDirection>
      }

      /* start automatic moving down */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime > 0) && (requestedOpenTime > GetUpDownTime()))
    16a4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    16a8:	81 11       	cpse	r24, r1
    16aa:	12 c0       	rjmp	.+36     	; 0x16d0 <MotorTask+0x4e>
    16ac:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <requestedOpenTime>
    16b0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    16b4:	18 16       	cp	r1, r24
    16b6:	19 06       	cpc	r1, r25
    16b8:	5c f4       	brge	.+22     	; 0x16d0 <MotorTask+0x4e>
    16ba:	f4 d2       	rcall	.+1512   	; 0x1ca4 <GetUpDownTime>
    16bc:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <requestedOpenTime>
    16c0:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    16c4:	82 17       	cp	r24, r18
    16c6:	93 07       	cpc	r25, r19
    16c8:	18 f4       	brcc	.+6      	; 0x16d0 <MotorTask+0x4e>
      {
         StartDown();
    16ca:	da d2       	rcall	.+1460   	; 0x1c80 <StartDown>
         motorDirection = DIRECTION_DOWN;
    16cc:	00 93 72 00 	sts	0x0072, r16	; 0x800072 <motorDirection>
      }

      /* start automatic moving up */
      if((motorDirection == DIRECTION_STOP) && (requestedOpenTime >= 0) && (requestedOpenTime < GetUpDownTime()))
    16d0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    16d4:	81 11       	cpse	r24, r1
    16d6:	11 c0       	rjmp	.+34     	; 0x16fa <MotorTask+0x78>
    16d8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <requestedOpenTime>
    16dc:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    16e0:	99 23       	and	r25, r25
    16e2:	5c f0       	brlt	.+22     	; 0x16fa <MotorTask+0x78>
    16e4:	df d2       	rcall	.+1470   	; 0x1ca4 <GetUpDownTime>
    16e6:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <requestedOpenTime>
    16ea:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    16ee:	28 17       	cp	r18, r24
    16f0:	39 07       	cpc	r19, r25
    16f2:	18 f4       	brcc	.+6      	; 0x16fa <MotorTask+0x78>
      {
         StartUp();
    16f4:	c9 d2       	rcall	.+1426   	; 0x1c88 <StartUp>
         motorDirection = DIRECTION_UP;
    16f6:	10 93 72 00 	sts	0x0072, r17	; 0x800072 <motorDirection>
      }

      /* stop automatic moving down */
      if ((motorDirection == DIRECTION_DOWN) && (requestedOpenTime > 0) && (requestedOpenTime < GetUpDownTime()))
    16fa:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	c9 f4       	brne	.+50     	; 0x1734 <MotorTask+0xb2>
    1702:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <requestedOpenTime>
    1706:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    170a:	18 16       	cp	r1, r24
    170c:	19 06       	cpc	r1, r25
    170e:	94 f4       	brge	.+36     	; 0x1734 <MotorTask+0xb2>
    1710:	c9 d2       	rcall	.+1426   	; 0x1ca4 <GetUpDownTime>
    1712:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <requestedOpenTime>
    1716:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    171a:	28 17       	cp	r18, r24
    171c:	39 07       	cpc	r19, r25
    171e:	50 f4       	brcc	.+20     	; 0x1734 <MotorTask+0xb2>
      {
         StopUpDown();
    1720:	b7 d2       	rcall	.+1390   	; 0x1c90 <StopUpDown>
         requestedOpenTime = -1;
    1722:	d0 93 71 00 	sts	0x0071, r29	; 0x800071 <requestedOpenTime+0x1>
    1726:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <requestedOpenTime>
         motorDirection = DIRECTION_STOP;
    172a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <motorDirection>
      }

      /* stop automatic moving up */
      if ((motorDirection == DIRECTION_UP) && (requestedOpenTime >= 0) && (requestedOpenTime > GetUpDownTime()))
    172e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    1732:	19 c0       	rjmp	.+50     	; 0x1766 <MotorTask+0xe4>
    1734:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <motorDirection>
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	a9 f4       	brne	.+42     	; 0x1766 <MotorTask+0xe4>
    173c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <requestedOpenTime>
    1740:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    1744:	99 23       	and	r25, r25
    1746:	7c f0       	brlt	.+30     	; 0x1766 <MotorTask+0xe4>
    1748:	ad d2       	rcall	.+1370   	; 0x1ca4 <GetUpDownTime>
    174a:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <requestedOpenTime>
    174e:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <requestedOpenTime+0x1>
    1752:	82 17       	cp	r24, r18
    1754:	93 07       	cpc	r25, r19
    1756:	38 f4       	brcc	.+14     	; 0x1766 <MotorTask+0xe4>
      {
         StopUpDown();
    1758:	9b d2       	rcall	.+1334   	; 0x1c90 <StopUpDown>
         requestedOpenTime = -1;
    175a:	d0 93 71 00 	sts	0x0071, r29	; 0x800071 <requestedOpenTime+0x1>
    175e:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <requestedOpenTime>
         motorDirection = DIRECTION_STOP;
    1762:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <motorDirection>
      }

      /* time delay has passed; close */
      if (timerActive && (GetTime() == 0))
    1766:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <timerActive>
    176a:	88 23       	and	r24, r24
    176c:	31 f0       	breq	.+12     	; 0x177a <MotorTask+0xf8>
    176e:	79 d2       	rcall	.+1266   	; 0x1c62 <GetTime>
    1770:	89 2b       	or	r24, r25
    1772:	19 f4       	brne	.+6      	; 0x177a <MotorTask+0xf8>
      {
         MotorClose();
    1774:	ff de       	rcall	.-514    	; 0x1574 <MotorClose>
         timerActive = false;
    1776:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <timerActive>
      }
      TaskSleep(10);
    177a:	8a e0       	ldi	r24, 0x0A	; 10
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a4 d6       	rcall	.+3400   	; 0x24c8 <__TEXT_REGION_LENGTH__+0x4c8>
   }
    1780:	84 cf       	rjmp	.-248    	; 0x168a <MotorTask+0x8>

00001782 <ProgressPercent>:
   }
   return buffer;
}

static void ProgressPercent(void)
{
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	00 d0       	rcall	.+0      	; 0x1788 <ProgressPercent+0x6>
    1788:	00 d0       	rcall	.+0      	; 0x178a <ProgressPercent+0x8>
    178a:	00 d0       	rcall	.+0      	; 0x178c <ProgressPercent+0xa>
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    1790:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    1794:	4a e0       	ldi	r20, 0x0A	; 10
    1796:	be 01       	movw	r22, r28
    1798:	6f 5f       	subi	r22, 0xFF	; 255
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	79 d3       	rcall	.+1778   	; 0x1e92 <__utoa_ncheck>
}

static char *utoaRightAligned(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	81 11       	cpse	r24, r1
    17a4:	05 c0       	rjmp	.+10     	; 0x17b0 <ProgressPercent+0x2e>
   {
      buffer[2] = 0;
      buffer[1] = buffer[0];
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    17aa:	80 e2       	ldi	r24, 0x20	; 32
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <ProgressPercent+0x34>

   }
   if (buffer[2] == 0)
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	81 11       	cpse	r24, r1
    17b4:	07 c0       	rjmp	.+14     	; 0x17c4 <ProgressPercent+0x42>
   {
      buffer[3] = 0;
    17b6:	1c 82       	std	Y+4, r1	; 0x04
      buffer[2] = buffer[1];
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	8b 83       	std	Y+3, r24	; 0x03
      buffer[1] = buffer[0];
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    17c0:	80 e2       	ldi	r24, 0x20	; 32
    17c2:	89 83       	std	Y+1, r24	; 0x01

static void ProgressPercent(void)
{
   char buffer[6];

   WriteString(font6x10, 8, 26, utoaRightAligned(openPercent, buffer));
    17c4:	9e 01       	movw	r18, r28
    17c6:	2f 5f       	subi	r18, 0xFF	; 255
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	4a e1       	ldi	r20, 0x1A	; 26
    17cc:	68 e0       	ldi	r22, 0x08	; 8
    17ce:	84 e4       	ldi	r24, 0x44	; 68
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	3e d9       	rcall	.-3460   	; 0xa50 <WriteString>
   WriteString(font6x10, 50, 26, utoaRightAligned(MotorProgress(), buffer));
    17d4:	e7 de       	rcall	.-562    	; 0x15a4 <MotorProgress>
    17d6:	4a e0       	ldi	r20, 0x0A	; 10
    17d8:	be 01       	movw	r22, r28
    17da:	6f 5f       	subi	r22, 0xFF	; 255
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	58 d3       	rcall	.+1712   	; 0x1e92 <__utoa_ncheck>
}

static char *utoaRightAligned(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	81 11       	cpse	r24, r1
    17e6:	05 c0       	rjmp	.+10     	; 0x17f2 <ProgressPercent+0x70>
   {
      buffer[2] = 0;
      buffer[1] = buffer[0];
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    17ec:	80 e2       	ldi	r24, 0x20	; 32
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <ProgressPercent+0x76>

   }
   if (buffer[2] == 0)
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	81 11       	cpse	r24, r1
    17f6:	07 c0       	rjmp	.+14     	; 0x1806 <ProgressPercent+0x84>
   {
      buffer[3] = 0;
    17f8:	1c 82       	std	Y+4, r1	; 0x04
      buffer[2] = buffer[1];
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	8b 83       	std	Y+3, r24	; 0x03
      buffer[1] = buffer[0];
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = ' ';
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	89 83       	std	Y+1, r24	; 0x01
static void ProgressPercent(void)
{
   char buffer[6];

   WriteString(font6x10, 8, 26, utoaRightAligned(openPercent, buffer));
   WriteString(font6x10, 50, 26, utoaRightAligned(MotorProgress(), buffer));
    1806:	9e 01       	movw	r18, r28
    1808:	2f 5f       	subi	r18, 0xFF	; 255
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	4a e1       	ldi	r20, 0x1A	; 26
    180e:	62 e3       	ldi	r22, 0x32	; 50
    1810:	84 e4       	ldi	r24, 0x44	; 68
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	1d d9       	rcall	.-3526   	; 0xa50 <WriteString>
}
    1816:	26 96       	adiw	r28, 0x06	; 6
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <mainScreenInit>:

   }
}
void mainScreenInit(void)
{
   block = false;
    1828:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <block>
   Clear();
    182c:	f1 d8       	rcall	.-3614   	; 0xa10 <Clear>
uint8_t current;
bool block;

static void ProgressBarSetup(void)
{
   WriteStaticString(lines5x12, 2, 2, ProgressOutline);
    182e:	24 e5       	ldi	r18, 0x54	; 84
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	42 e0       	ldi	r20, 0x02	; 2
    1834:	62 e0       	ldi	r22, 0x02	; 2
    1836:	82 e1       	ldi	r24, 0x12	; 18
    1838:	91 e0       	ldi	r25, 0x01	; 1
    183a:	ed da       	rcall	.-2598   	; 0xe16 <WriteStaticString>
   current = 0;
    183c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <current>
void mainScreenInit(void)
{
   block = false;
   Clear();
   ProgressBarSetup();
   ProgressPercent();
    1840:	a0 df       	rcall	.-192    	; 0x1782 <ProgressPercent>
   WriteStaticString(font5x8, 13, 40, Up);
    1842:	26 e4       	ldi	r18, 0x46	; 70
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	48 e2       	ldi	r20, 0x28	; 40
    1848:	6d e0       	ldi	r22, 0x0D	; 13
    184a:	80 e4       	ldi	r24, 0x40	; 64
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	e3 da       	rcall	.-2618   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 50, 40, Down);
    1850:	2c e3       	ldi	r18, 0x3C	; 60
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	48 e2       	ldi	r20, 0x28	; 40
    1856:	62 e3       	ldi	r22, 0x32	; 50
    1858:	80 e4       	ldi	r24, 0x40	; 64
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	dc da       	rcall	.-2632   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 10, 16, Set);
    185e:	28 e2       	ldi	r18, 0x28	; 40
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e1       	ldi	r20, 0x10	; 16
    1864:	6a e0       	ldi	r22, 0x0A	; 10
    1866:	80 e4       	ldi	r24, 0x40	; 64
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	d5 da       	rcall	.-2646   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 40, 16, Actual);
    186c:	22 e3       	ldi	r18, 0x32	; 50
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e1       	ldi	r20, 0x10	; 16
    1872:	68 e2       	ldi	r22, 0x28	; 40
    1874:	80 e4       	ldi	r24, 0x40	; 64
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	ce da       	rcall	.-2660   	; 0xe16 <WriteStaticString>
    187a:	08 95       	ret

0000187c <mainScreenKey>:
}

void mainScreenKey(enum PressedButtonState key)
{
   switch (key)
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	8a 30       	cpi	r24, 0x0A	; 10
    1880:	91 05       	cpc	r25, r1
    1882:	08 f0       	brcs	.+2      	; 0x1886 <mainScreenKey+0xa>
    1884:	49 c0       	rjmp	.+146    	; 0x1918 <mainScreenKey+0x9c>
    1886:	fc 01       	movw	r30, r24
    1888:	e8 5e       	subi	r30, 0xE8	; 232
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	09 94       	ijmp
   {
      case PressedButtonDown:
         if (GetMotorDirection() == DIRECTION_UP)
    188e:	4d de       	rcall	.-870    	; 0x152a <GetMotorDirection>
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	29 f4       	brne	.+10     	; 0x189e <mainScreenKey+0x22>
         {
            MotorStop();
    1894:	7d de       	rcall	.-774    	; 0x1590 <MotorStop>
            block = true;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <block>
    189c:	08 95       	ret
         }
         else
         {
            MotorOpen();
    189e:	5f de       	rcall	.-834    	; 0x155e <MotorOpen>
    18a0:	08 95       	ret
         }
         break;

      case PressedButtonDownKey:
         if (block)
    18a2:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <block>
    18a6:	88 23       	and	r24, r24
    18a8:	21 f0       	breq	.+8      	; 0x18b2 <mainScreenKey+0x36>
         {
            MotorStop();
    18aa:	72 de       	rcall	.-796    	; 0x1590 <MotorStop>
            block = false;
    18ac:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <block>
    18b0:	08 95       	ret
         }
         else
         {
            if (openPercent < 100) openPercent += 25;
    18b2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    18b6:	84 36       	cpi	r24, 0x64	; 100
    18b8:	18 f4       	brcc	.+6      	; 0x18c0 <mainScreenKey+0x44>
    18ba:	87 5e       	subi	r24, 0xE7	; 231
    18bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <openPercent>
            MotorOpenPercent(openPercent);
    18c0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    18c4:	35 de       	rcall	.-918    	; 0x1530 <MotorOpenPercent>
    18c6:	08 95       	ret
         }
         break;

      case PressedButtonUp:
         if (GetMotorDirection() == DIRECTION_DOWN)
    18c8:	30 de       	rcall	.-928    	; 0x152a <GetMotorDirection>
    18ca:	82 30       	cpi	r24, 0x02	; 2
    18cc:	29 f4       	brne	.+10     	; 0x18d8 <mainScreenKey+0x5c>
         {
            MotorStop();
    18ce:	60 de       	rcall	.-832    	; 0x1590 <MotorStop>
            block = true;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <block>
    18d6:	08 95       	ret
         }
         else
         {
            openPercent = 0;
    18d8:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <openPercent>
            MotorClose();
    18dc:	4b de       	rcall	.-874    	; 0x1574 <MotorClose>
    18de:	08 95       	ret
         }
         break;

      case PressedButtonUpKey:
         if (block)
    18e0:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <block>
    18e4:	88 23       	and	r24, r24
    18e6:	21 f0       	breq	.+8      	; 0x18f0 <mainScreenKey+0x74>
         {
            MotorStop();
    18e8:	53 de       	rcall	.-858    	; 0x1590 <MotorStop>
            block = false;
    18ea:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <block>
    18ee:	08 95       	ret
         }
         else
         {
            if (openPercent >= 25) openPercent -= 25;
    18f0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    18f4:	89 31       	cpi	r24, 0x19	; 25
    18f6:	18 f0       	brcs	.+6      	; 0x18fe <mainScreenKey+0x82>
    18f8:	89 51       	subi	r24, 0x19	; 25
    18fa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <openPercent>
            MotorOpenPercent(openPercent);
    18fe:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <openPercent>
    1902:	16 de       	rcall	.-980    	; 0x1530 <MotorOpenPercent>
    1904:	08 95       	ret
         }
         break;

      case PressedButtonMenuKey:
         SetScreenMode(ModeAskClosingTimeInit);
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	ca dd       	rcall	.-1132   	; 0x149e <SetScreenMode>
         break;
    190a:	08 95       	ret

      case PressedButtonMenuRepeat:
         SetScreenMode(ModeAskFullOpenInit);
    190c:	85 e0       	ldi	r24, 0x05	; 5
    190e:	c7 dd       	rcall	.-1138   	; 0x149e <SetScreenMode>
         break;
    1910:	08 95       	ret

      case PressedButtonNone:
         openPercent = 0;
    1912:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <openPercent>
         MotorStop();
    1916:	3c de       	rcall	.-904    	; 0x1590 <MotorStop>
    1918:	08 95       	ret

0000191a <mainScreenUpdate>:
         break;
   }
}

void mainScreenUpdate(void)
{
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
   static uint8_t selection = 0;

   selection++;
    1920:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <selection.1852>
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <selection.1852>

   switch(selection % 4)
    192a:	83 70       	andi	r24, 0x03	; 3
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	39 f0       	breq	.+14     	; 0x193e <mainScreenUpdate+0x24>
    1930:	83 30       	cpi	r24, 0x03	; 3
    1932:	c1 f1       	breq	.+112    	; 0x19a4 <mainScreenUpdate+0x8a>
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	09 f0       	breq	.+2      	; 0x193a <mainScreenUpdate+0x20>
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <mainScreenUpdate+0x9e>
   {
      case 1:
         ProgressPercent();
    193a:	23 df       	rcall	.-442    	; 0x1782 <ProgressPercent>
         break;
    193c:	79 c0       	rjmp	.+242    	; 0x1a30 <mainScreenUpdate+0x116>
   WriteString(font6x10, 50, 26, utoaRightAligned(MotorProgress(), buffer));
}

static void InvertedWhenMoving(void)
{
   switch(GetMotorDirection())
    193e:	f5 dd       	rcall	.-1046   	; 0x152a <GetMotorDirection>
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	19 f0       	breq	.+6      	; 0x194a <mainScreenUpdate+0x30>
    1944:	82 30       	cpi	r24, 0x02	; 2
    1946:	81 f0       	breq	.+32     	; 0x1968 <mainScreenUpdate+0x4e>
    1948:	1e c0       	rjmp	.+60     	; 0x1986 <mainScreenUpdate+0x6c>
   {
      case DIRECTION_UP:
         WriteInverted8PixelString(font5x8, 13, 40, Up);
    194a:	26 e4       	ldi	r18, 0x46	; 70
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	48 e2       	ldi	r20, 0x28	; 40
    1950:	6d e0       	ldi	r22, 0x0D	; 13
    1952:	80 e4       	ldi	r24, 0x40	; 64
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	42 dc       	rcall	.-1916   	; 0x11dc <WriteInverted8PixelString>
         WriteStaticString(font5x8, 50, 40, Down);
    1958:	2c e3       	ldi	r18, 0x3C	; 60
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	48 e2       	ldi	r20, 0x28	; 40
    195e:	62 e3       	ldi	r22, 0x32	; 50
    1960:	80 e4       	ldi	r24, 0x40	; 64
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	58 da       	rcall	.-2896   	; 0xe16 <WriteStaticString>
    1966:	64 c0       	rjmp	.+200    	; 0x1a30 <mainScreenUpdate+0x116>
         break;

      case DIRECTION_DOWN:
         WriteStaticString(font5x8, 13, 40, Up);
    1968:	26 e4       	ldi	r18, 0x46	; 70
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	48 e2       	ldi	r20, 0x28	; 40
    196e:	6d e0       	ldi	r22, 0x0D	; 13
    1970:	80 e4       	ldi	r24, 0x40	; 64
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	50 da       	rcall	.-2912   	; 0xe16 <WriteStaticString>
         WriteInverted8PixelString(font5x8, 50, 40, Down);
    1976:	2c e3       	ldi	r18, 0x3C	; 60
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	48 e2       	ldi	r20, 0x28	; 40
    197c:	62 e3       	ldi	r22, 0x32	; 50
    197e:	80 e4       	ldi	r24, 0x40	; 64
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	2c dc       	rcall	.-1960   	; 0x11dc <WriteInverted8PixelString>
    1984:	55 c0       	rjmp	.+170    	; 0x1a30 <mainScreenUpdate+0x116>
         break;

      case DIRECTION_STOP:
      default:
         WriteStaticString(font5x8, 13, 40, Up);
    1986:	26 e4       	ldi	r18, 0x46	; 70
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	48 e2       	ldi	r20, 0x28	; 40
    198c:	6d e0       	ldi	r22, 0x0D	; 13
    198e:	80 e4       	ldi	r24, 0x40	; 64
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	41 da       	rcall	.-2942   	; 0xe16 <WriteStaticString>
         WriteStaticString(font5x8, 50, 40, Down);
    1994:	2c e3       	ldi	r18, 0x3C	; 60
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	48 e2       	ldi	r20, 0x28	; 40
    199a:	62 e3       	ldi	r22, 0x32	; 50
    199c:	80 e4       	ldi	r24, 0x40	; 64
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	3a da       	rcall	.-2956   	; 0xe16 <WriteStaticString>
    19a2:	46 c0       	rjmp	.+140    	; 0x1a30 <mainScreenUpdate+0x116>
      case 2:
         InvertedWhenMoving();
         break;

      case 3:
         if ((GetUpDownTime() == 0) && (GetMotorDirection() == DIRECTION_STOP))
    19a4:	7f d1       	rcall	.+766    	; 0x1ca4 <GetUpDownTime>
    19a6:	89 2b       	or	r24, r25
    19a8:	09 f0       	breq	.+2      	; 0x19ac <mainScreenUpdate+0x92>
    19aa:	42 c0       	rjmp	.+132    	; 0x1a30 <mainScreenUpdate+0x116>
    19ac:	be dd       	rcall	.-1156   	; 0x152a <GetMotorDirection>
    19ae:	81 11       	cpse	r24, r1
    19b0:	3f c0       	rjmp	.+126    	; 0x1a30 <mainScreenUpdate+0x116>
         {
            openPercent = 0;
    19b2:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <openPercent>
    19b6:	3c c0       	rjmp	.+120    	; 0x1a30 <mainScreenUpdate+0x116>
         }
         break;
         
      default:
         ProgressBar(MotorProgress());
    19b8:	f5 dd       	rcall	.-1046   	; 0x15a4 <MotorProgress>
   current = 0;
}

static void ProgressBar(uint8_t targetValue)
{
   targetValue = (uint16_t)targetValue * 77 / 100;
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9c 01       	movw	r18, r24
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	22 0f       	add	r18, r18
    19c4:	33 1f       	adc	r19, r19
    19c6:	28 0f       	add	r18, r24
    19c8:	39 1f       	adc	r19, r25
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	82 0f       	add	r24, r18
    19d0:	93 1f       	adc	r25, r19
    19d2:	9c 01       	movw	r18, r24
    19d4:	22 0f       	add	r18, r18
    19d6:	33 1f       	adc	r19, r19
    19d8:	22 0f       	add	r18, r18
    19da:	33 1f       	adc	r19, r19
    19dc:	22 0f       	add	r18, r18
    19de:	33 1f       	adc	r19, r19
    19e0:	a9 01       	movw	r20, r18
    19e2:	48 1b       	sub	r20, r24
    19e4:	59 0b       	sbc	r21, r25
    19e6:	ca 01       	movw	r24, r20
    19e8:	64 e6       	ldi	r22, 0x64	; 100
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	ed d1       	rcall	.+986    	; 0x1dc8 <__udivmodhi4>
    19ee:	16 2f       	mov	r17, r22
    19f0:	d6 2f       	mov	r29, r22
   if (targetValue >= current)
    19f2:	c0 91 b4 01 	lds	r28, 0x01B4	; 0x8001b4 <current>
    19f6:	6c 17       	cp	r22, r28
    19f8:	70 f0       	brcs	.+28     	; 0x1a16 <mainScreenUpdate+0xfc>
   {
      for (uint8_t i = current; i < targetValue; ++i)
    19fa:	c6 17       	cp	r28, r22
    19fc:	b8 f4       	brcc	.+46     	; 0x1a2c <mainScreenUpdate+0x112>
      {
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineSolid);
    19fe:	63 e0       	ldi	r22, 0x03	; 3
    1a00:	6c 0f       	add	r22, r28
    1a02:	22 e5       	ldi	r18, 0x52	; 82
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	42 e0       	ldi	r20, 0x02	; 2
    1a08:	82 e1       	ldi	r24, 0x12	; 18
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	04 da       	rcall	.-3064   	; 0xe16 <WriteStaticString>
static void ProgressBar(uint8_t targetValue)
{
   targetValue = (uint16_t)targetValue * 77 / 100;
   if (targetValue >= current)
   {
      for (uint8_t i = current; i < targetValue; ++i)
    1a0e:	cf 5f       	subi	r28, 0xFF	; 255
    1a10:	cd 17       	cp	r28, r29
    1a12:	a8 f3       	brcs	.-22     	; 0x19fe <mainScreenUpdate+0xe4>
    1a14:	0b c0       	rjmp	.+22     	; 0x1a2c <mainScreenUpdate+0x112>
   }
   else if (targetValue < current)
   {
      for (uint8_t i = current; i > targetValue; --i)
      {
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineBlank);
    1a16:	63 e0       	ldi	r22, 0x03	; 3
    1a18:	6c 0f       	add	r22, r28
    1a1a:	20 e5       	ldi	r18, 0x50	; 80
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	42 e0       	ldi	r20, 0x02	; 2
    1a20:	82 e1       	ldi	r24, 0x12	; 18
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	f8 d9       	rcall	.-3088   	; 0xe16 <WriteStaticString>
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineSolid);
      }
   }
   else if (targetValue < current)
   {
      for (uint8_t i = current; i > targetValue; --i)
    1a26:	c1 50       	subi	r28, 0x01	; 1
    1a28:	dc 17       	cp	r29, r28
    1a2a:	a8 f3       	brcs	.-22     	; 0x1a16 <mainScreenUpdate+0xfc>
      {
         WriteStaticString(lines5x12, 3 + i, 2, ProgressLineBlank);
      }
   }

   current = targetValue;
    1a2c:	10 93 b4 01 	sts	0x01B4, r17	; 0x8001b4 <current>
         
      default:
         ProgressBar(MotorProgress());
         break;
   };
}
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	08 95       	ret

00001a38 <FullOpenInit>:
static char EEMEM Title3[20]       = "open?";
static char EEMEM PositionSet[20]  = "Position is set";

void FullOpenInit(void)
{
   Clear();
    1a38:	eb d7       	rcall	.+4054   	; 0x2a10 <__TEXT_REGION_LENGTH__+0xa10>
   WriteStaticString(font5x8, 0, 0, Title1);
    1a3a:	24 ea       	ldi	r18, 0xA4	; 164
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	80 e4       	ldi	r24, 0x40	; 64
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	e5 d9       	rcall	.-3126   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 0, 8, Title2);
    1a4c:	20 e9       	ldi	r18, 0x90	; 144
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	48 e0       	ldi	r20, 0x08	; 8
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	80 e4       	ldi	r24, 0x40	; 64
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	dc d9       	rcall	.-3144   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 0, 16, Title3);
    1a5e:	2c e7       	ldi	r18, 0x7C	; 124
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e1       	ldi	r20, 0x10	; 16
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	80 e4       	ldi	r24, 0x40	; 64
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	d3 d9       	rcall	.-3162   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 8, 40, Back);
    1a70:	28 eb       	ldi	r18, 0xB8	; 184
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	48 e2       	ldi	r20, 0x28	; 40
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	68 e0       	ldi	r22, 0x08	; 8
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	80 e4       	ldi	r24, 0x40	; 64
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	ca d9       	rcall	.-3180   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 40, 40, Accept);
    1a82:	21 ec       	ldi	r18, 0xC1	; 193
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	48 e2       	ldi	r20, 0x28	; 40
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	68 e2       	ldi	r22, 0x28	; 40
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	80 e4       	ldi	r24, 0x40	; 64
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	c1 d9       	rcall	.-3198   	; 0xe16 <WriteStaticString>
    1a94:	08 95       	ret

00001a96 <FullOpenUpdate>:
}

void FullOpenUpdate(void)
{
    1a96:	08 95       	ret

00001a98 <FullOpenKey>:
}

void FullOpenKey(enum PressedButtonState key)
{
   switch (key)
    1a98:	85 30       	cpi	r24, 0x05	; 5
    1a9a:	a1 f0       	breq	.+40     	; 0x1ac4 <FullOpenKey+0x2c>
    1a9c:	88 30       	cpi	r24, 0x08	; 8
    1a9e:	91 f0       	breq	.+36     	; 0x1ac4 <FullOpenKey+0x2c>
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	91 f4       	brne	.+36     	; 0x1ac8 <FullOpenKey+0x30>
   {
      case PressedButtonDownKey:
         WriteStaticString(font5x8, 0, 30, PositionSet);
    1aa4:	28 e6       	ldi	r18, 0x68	; 104
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4e e1       	ldi	r20, 0x1E	; 30
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	80 e4       	ldi	r24, 0x40	; 64
    1ab2:	91 e0       	ldi	r25, 0x01	; 1
    1ab4:	b0 d9       	rcall	.-3232   	; 0xe16 <WriteStaticString>
         SetFullyOpen();
    1ab6:	bb dd       	rcall	.-1162   	; 0x162e <SetFullyOpen>
         TaskSleep(500);
    1ab8:	84 ef       	ldi	r24, 0xF4	; 244
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	05 d5       	rcall	.+2570   	; 0x24c8 <__TEXT_REGION_LENGTH__+0x4c8>
         SetScreenMode(ModeMainScreenInit);
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	ee dc       	rcall	.-1572   	; 0x149e <SetScreenMode>
         break;
    1ac2:	08 95       	ret

      case PressedButtonUpKey:
      case PressedButtonMenuKey:
         SetScreenMode(ModeMainScreenInit);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	eb dc       	rcall	.-1578   	; 0x149e <SetScreenMode>
    1ac8:	08 95       	ret

00001aca <closingTimeInit>:
   WriteString(font6x10, 28, 20, utoa2Digits(GetTime() % 60, buffer));
}

void closingTimeInit(void)
{
   Clear();
    1aca:	a2 d7       	rcall	.+3908   	; 0x2a10 <__TEXT_REGION_LENGTH__+0xa10>
   WriteStaticString(font5x8, 0, 0, WaitTitle1);
    1acc:	22 ee       	ldi	r18, 0xE2	; 226
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	80 e4       	ldi	r24, 0x40	; 64
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	9e d9       	rcall	.-3268   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 0, 8, WaitTitle2);
    1ada:	2e ec       	ldi	r18, 0xCE	; 206
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	48 e0       	ldi	r20, 0x08	; 8
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	80 e4       	ldi	r24, 0x40	; 64
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	97 d9       	rcall	.-3282   	; 0xe16 <WriteStaticString>
   WriteStaticString(font6x10, 23, 20, Semicolon);
    1ae8:	2c ec       	ldi	r18, 0xCC	; 204
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	44 e1       	ldi	r20, 0x14	; 20
    1aee:	67 e1       	ldi	r22, 0x17	; 23
    1af0:	84 e4       	ldi	r24, 0x44	; 68
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	90 d9       	rcall	.-3296   	; 0xe16 <WriteStaticString>
   WriteStaticString(font5x8, 46, 23, Hour);
    1af6:	2a ec       	ldi	r18, 0xCA	; 202
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	47 e1       	ldi	r20, 0x17	; 23
    1afc:	6e e2       	ldi	r22, 0x2E	; 46
    1afe:	80 e4       	ldi	r24, 0x40	; 64
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	89 d9       	rcall	.-3310   	; 0xe16 <WriteStaticString>
    1b04:	08 95       	ret

00001b06 <ClosingTimeKey>:
}

void ClosingTimeKey(enum PressedButtonState key)
{
    1b06:	cf 93       	push	r28
    1b08:	c8 2f       	mov	r28, r24
   uint16_t delayTime = GetTime();
    1b0a:	ab d0       	rcall	.+342    	; 0x1c62 <GetTime>

   delayTime = (delayTime / STEPDELAYTIME) * STEPDELAYTIME + (delayTime % STEPDELAYTIME > 0) ? STEPDELAYTIME : 0;
    1b0c:	89 2b       	or	r24, r25
    1b0e:	81 f4       	brne	.+32     	; 0x1b30 <ClosingTimeKey+0x2a>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0f c0       	rjmp	.+30     	; 0x1b34 <ClosingTimeKey+0x2e>
         }
         else
         {
            delayTime = MAXDELAYTIME;
         }
         MotorDelayClose(delayTime);
    1b16:	02 96       	adiw	r24, 0x02	; 2
    1b18:	a7 dd       	rcall	.-1202   	; 0x1668 <MotorDelayClose>
         break;
    1b1a:	16 c0       	rjmp	.+44     	; 0x1b48 <ClosingTimeKey+0x42>
         }
         else
         {
            delayTime = 0;
         }
         MotorDelayClose(delayTime);
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a3 dd       	rcall	.-1210   	; 0x1668 <MotorDelayClose>
         break;
    1b22:	12 c0       	rjmp	.+36     	; 0x1b48 <ClosingTimeKey+0x42>

      case PressedButtonMenuKey:
         SetScreenMode(ModeMainScreenInit);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	bb dc       	rcall	.-1674   	; 0x149e <SetScreenMode>
         break;
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <ClosingTimeKey+0x42>

      case PressedButtonNone:
         step = 0;
    1b2a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <step>
         break;

      default:
         break;
   }
}
    1b2e:	0c c0       	rjmp	.+24     	; 0x1b48 <ClosingTimeKey+0x42>

void ClosingTimeKey(enum PressedButtonState key)
{
   uint16_t delayTime = GetTime();

   delayTime = (delayTime / STEPDELAYTIME) * STEPDELAYTIME + (delayTime % STEPDELAYTIME > 0) ? STEPDELAYTIME : 0;
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	90 e0       	ldi	r25, 0x00	; 0

   switch (key)
    1b34:	c5 30       	cpi	r28, 0x05	; 5
    1b36:	91 f3       	breq	.-28     	; 0x1b1c <ClosingTimeKey+0x16>
    1b38:	18 f4       	brcc	.+6      	; 0x1b40 <ClosingTimeKey+0x3a>
    1b3a:	c2 30       	cpi	r28, 0x02	; 2
    1b3c:	61 f3       	breq	.-40     	; 0x1b16 <ClosingTimeKey+0x10>
    1b3e:	04 c0       	rjmp	.+8      	; 0x1b48 <ClosingTimeKey+0x42>
    1b40:	c8 30       	cpi	r28, 0x08	; 8
    1b42:	81 f3       	breq	.-32     	; 0x1b24 <ClosingTimeKey+0x1e>
    1b44:	c9 30       	cpi	r28, 0x09	; 9
    1b46:	89 f3       	breq	.-30     	; 0x1b2a <ClosingTimeKey+0x24>
         break;

      default:
         break;
   }
}
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <closingTimeUpdate>:

void closingTimeUpdate(void)
{
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <closingTimeUpdate+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <closingTimeUpdate+0x8>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <closingTimeUpdate+0xa>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62

static void updateTime(void)
{
   char buffer[6];

   WriteString(font6x10, 5, 20, utoa2Digits(GetTime() / 60, buffer));
    1b5a:	83 d0       	rcall	.+262    	; 0x1c62 <GetTime>
    1b5c:	6c e3       	ldi	r22, 0x3C	; 60
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	47 d1       	rcall	.+654    	; 0x1df0 <__divmodhi4>
    1b62:	86 2f       	mov	r24, r22
    1b64:	4a e0       	ldi	r20, 0x0A	; 10
    1b66:	be 01       	movw	r22, r28
    1b68:	6f 5f       	subi	r22, 0xFF	; 255
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	91 d1       	rcall	.+802    	; 0x1e92 <__utoa_ncheck>
static char EEMEM Hour[2]   = "h";

static char *utoa2Digits(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	81 11       	cpse	r24, r1
    1b74:	05 c0       	rjmp	.+10     	; 0x1b80 <closingTimeUpdate+0x34>
   {
      buffer[1] = buffer[0];
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = '0';
    1b7a:	80 e3       	ldi	r24, 0x30	; 48
    1b7c:	89 83       	std	Y+1, r24	; 0x01
      buffer[2] = 0;
    1b7e:	1b 82       	std	Y+3, r1	; 0x03

static void updateTime(void)
{
   char buffer[6];

   WriteString(font6x10, 5, 20, utoa2Digits(GetTime() / 60, buffer));
    1b80:	9e 01       	movw	r18, r28
    1b82:	2f 5f       	subi	r18, 0xFF	; 255
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	44 e1       	ldi	r20, 0x14	; 20
    1b88:	65 e0       	ldi	r22, 0x05	; 5
    1b8a:	84 e4       	ldi	r24, 0x44	; 68
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	60 d7       	rcall	.+3776   	; 0x2a50 <__TEXT_REGION_LENGTH__+0xa50>
   WriteString(font6x10, 28, 20, utoa2Digits(GetTime() % 60, buffer));
    1b90:	68 d0       	rcall	.+208    	; 0x1c62 <GetTime>
    1b92:	6c e3       	ldi	r22, 0x3C	; 60
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	2c d1       	rcall	.+600    	; 0x1df0 <__divmodhi4>
    1b98:	4a e0       	ldi	r20, 0x0A	; 10
    1b9a:	be 01       	movw	r22, r28
    1b9c:	6f 5f       	subi	r22, 0xFF	; 255
    1b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	77 d1       	rcall	.+750    	; 0x1e92 <__utoa_ncheck>
static char EEMEM Hour[2]   = "h";

static char *utoa2Digits(uint8_t value, char *buffer)
{
   utoa(value, buffer, 10);
   if (buffer[1] == 0)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	05 c0       	rjmp	.+10     	; 0x1bb4 <closingTimeUpdate+0x68>
   {
      buffer[1] = buffer[0];
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	8a 83       	std	Y+2, r24	; 0x02
      buffer[0] = '0';
    1bae:	80 e3       	ldi	r24, 0x30	; 48
    1bb0:	89 83       	std	Y+1, r24	; 0x01
      buffer[2] = 0;
    1bb2:	1b 82       	std	Y+3, r1	; 0x03
static void updateTime(void)
{
   char buffer[6];

   WriteString(font6x10, 5, 20, utoa2Digits(GetTime() / 60, buffer));
   WriteString(font6x10, 28, 20, utoa2Digits(GetTime() % 60, buffer));
    1bb4:	9e 01       	movw	r18, r28
    1bb6:	2f 5f       	subi	r18, 0xFF	; 255
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	44 e1       	ldi	r20, 0x14	; 20
    1bbc:	6c e1       	ldi	r22, 0x1C	; 28
    1bbe:	84 e4       	ldi	r24, 0x44	; 68
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	46 d7       	rcall	.+3724   	; 0x2a50 <__TEXT_REGION_LENGTH__+0xa50>
}

void closingTimeUpdate(void)
{
   updateTime();
}
    1bc4:	26 96       	adiw	r28, 0x06	; 6
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <StartTime>:
static volatile uint16_t upDownCounter = 0;
static volatile int8_t step = 0;
 
void StartTime(uint16_t waitTime)
{
   timeCounter = (uint32_t)waitTime * 50 * 60;
    1bd6:	ac 01       	movw	r20, r24
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	db 01       	movw	r26, r22
    1bde:	ca 01       	movw	r24, r20
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	aa 1f       	adc	r26, r26
    1be6:	bb 1f       	adc	r27, r27
    1be8:	84 0f       	add	r24, r20
    1bea:	95 1f       	adc	r25, r21
    1bec:	a6 1f       	adc	r26, r22
    1bee:	b7 1f       	adc	r27, r23
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	aa 1f       	adc	r26, r26
    1bf6:	bb 1f       	adc	r27, r27
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	aa 1f       	adc	r26, r26
    1bfe:	bb 1f       	adc	r27, r27
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	aa 1f       	adc	r26, r26
    1c06:	bb 1f       	adc	r27, r27
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	aa 1f       	adc	r26, r26
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	84 1b       	sub	r24, r20
    1c12:	95 0b       	sbc	r25, r21
    1c14:	a6 0b       	sbc	r26, r22
    1c16:	b7 0b       	sbc	r27, r23
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	aa 1f       	adc	r26, r26
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	aa 1f       	adc	r26, r26
    1c26:	bb 1f       	adc	r27, r27
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	aa 1f       	adc	r26, r26
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	84 1b       	sub	r24, r20
    1c32:	95 0b       	sbc	r25, r21
    1c34:	a6 0b       	sbc	r26, r22
    1c36:	b7 0b       	sbc	r27, r23
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	aa 1f       	adc	r26, r26
    1c46:	bb 1f       	adc	r27, r27
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	aa 1f       	adc	r26, r26
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <timeCounter>
    1c54:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <timeCounter+0x1>
    1c58:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <timeCounter+0x2>
    1c5c:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <timeCounter+0x3>
    1c60:	08 95       	ret

00001c62 <GetTime>:
}

uint16_t GetTime(void)
{
   /* minutes resolution */
   return timeCounter / 50 / 60;
    1c62:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <timeCounter>
    1c66:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <timeCounter+0x1>
    1c6a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <timeCounter+0x2>
    1c6e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <timeCounter+0x3>
    1c72:	28 eb       	ldi	r18, 0xB8	; 184
    1c74:	3b e0       	ldi	r19, 0x0B	; 11
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	cd d0       	rcall	.+410    	; 0x1e16 <__udivmodsi4>
}
    1c7c:	c9 01       	movw	r24, r18
    1c7e:	08 95       	ret

00001c80 <StartDown>:

void StartDown(void)
{
   step = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <step>
    1c86:	08 95       	ret

00001c88 <StartUp>:
}

void StartUp(void)
{
   step = -1;
    1c88:	8f ef       	ldi	r24, 0xFF	; 255
    1c8a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <step>
    1c8e:	08 95       	ret

00001c90 <StopUpDown>:
}

void StopUpDown(void)
{
   step = 0;
    1c90:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <step>
    1c94:	08 95       	ret

00001c96 <ResetUpDown>:
}

void ResetUpDown(void)
{
   step = 0;
    1c96:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <step>
   upDownCounter = 0;
    1c9a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <upDownCounter+0x1>
    1c9e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <upDownCounter>
    1ca2:	08 95       	ret

00001ca4 <GetUpDownTime>:
}

uint16_t GetUpDownTime(void)
{
   /* 100ms resolution */
   return upDownCounter / 5;
    1ca4:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <upDownCounter>
    1ca8:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <upDownCounter+0x1>
    1cac:	65 e0       	ldi	r22, 0x05	; 5
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	8b d0       	rcall	.+278    	; 0x1dc8 <__udivmodhi4>
    1cb2:	cb 01       	movw	r24, r22
}
    1cb4:	08 95       	ret

00001cb6 <HandleClock>:

void HandleClock(void)
{
   upDownCounter += step;
    1cb6:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <step>
    1cba:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <upDownCounter>
    1cbe:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <upDownCounter+0x1>
    1cc2:	82 0f       	add	r24, r18
    1cc4:	91 1d       	adc	r25, r1
    1cc6:	27 fd       	sbrc	r18, 7
    1cc8:	9a 95       	dec	r25
    1cca:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <upDownCounter+0x1>
    1cce:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <upDownCounter>
   if ((upDownCounter == 0) || (upDownCounter == 0xFFFF)) step = 0;
    1cd2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <upDownCounter>
    1cd6:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <upDownCounter+0x1>
    1cda:	89 2b       	or	r24, r25
    1cdc:	31 f0       	breq	.+12     	; 0x1cea <HandleClock+0x34>
    1cde:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <upDownCounter>
    1ce2:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <upDownCounter+0x1>
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	11 f4       	brne	.+4      	; 0x1cee <HandleClock+0x38>
    1cea:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <step>
   if (timeCounter > 0) timeCounter--;
    1cee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <timeCounter>
    1cf2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <timeCounter+0x1>
    1cf6:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <timeCounter+0x2>
    1cfa:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <timeCounter+0x3>
    1cfe:	89 2b       	or	r24, r25
    1d00:	8a 2b       	or	r24, r26
    1d02:	8b 2b       	or	r24, r27
    1d04:	99 f0       	breq	.+38     	; 0x1d2c <HandleClock+0x76>
    1d06:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <timeCounter>
    1d0a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <timeCounter+0x1>
    1d0e:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <timeCounter+0x2>
    1d12:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <timeCounter+0x3>
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	a1 09       	sbc	r26, r1
    1d1a:	b1 09       	sbc	r27, r1
    1d1c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <timeCounter>
    1d20:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <timeCounter+0x1>
    1d24:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <timeCounter+0x2>
    1d28:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <timeCounter+0x3>
    1d2c:	08 95       	ret

00001d2e <NonVolataileSetup>:
static bool changed;
static uint16_t delaySeconds;
 
void NonVolataileSetup(void)
{
   changed = false;
    1d2e:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <changed>
   delaySeconds = eeprom_read_word((uint16_t*) 64);
    1d32:	80 e4       	ldi	r24, 0x40	; 64
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	de d0       	rcall	.+444    	; 0x1ef4 <eeprom_read_word>
    1d38:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <delaySeconds+0x1>
    1d3c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <delaySeconds>
    1d40:	08 95       	ret

00001d42 <NonVolataileRead>:
}

uint16_t NonVolataileRead(void)
{
   return delaySeconds;
}
    1d42:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <delaySeconds>
    1d46:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <delaySeconds+0x1>
    1d4a:	08 95       	ret

00001d4c <NonVolataileWrite>:

void NonVolataileWrite(uint16_t value)
{
   if (value != delaySeconds)
    1d4c:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <delaySeconds>
    1d50:	30 91 7e 00 	lds	r19, 0x007E	; 0x80007e <delaySeconds+0x1>
    1d54:	28 17       	cp	r18, r24
    1d56:	39 07       	cpc	r19, r25
    1d58:	41 f0       	breq	.+16     	; 0x1d6a <NonVolataileWrite+0x1e>
    1d5a:	bc 01       	movw	r22, r24
   {
      delaySeconds = value;
    1d5c:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <delaySeconds+0x1>
    1d60:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <delaySeconds>
      eeprom_write_word((uint16_t*) 64, delaySeconds);
    1d64:	80 e4       	ldi	r24, 0x40	; 64
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	ca d0       	rcall	.+404    	; 0x1efe <eeprom_write_word>
    1d6a:	08 95       	ret

00001d6c <NonVolataileTask>:

void NonVolataileTask(void)
{
   while(true)
   {
      if (changed)
    1d6c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <changed>
    1d70:	81 11       	cpse	r24, r1
      {
         changed = false;
    1d72:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <changed>
      }
      TaskSleep(500);
    1d76:	84 ef       	ldi	r24, 0xF4	; 244
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	a6 d3       	rcall	.+1868   	; 0x24c8 <__TEXT_REGION_LENGTH__+0x4c8>
   }
    1d7c:	f7 cf       	rjmp	.-18     	; 0x1d6c <NonVolataileTask>

00001d7e <__mulsi3>:
    1d7e:	ee 27       	eor	r30, r30
    1d80:	ff 27       	eor	r31, r31

00001d82 <__mulsi3_helper>:
    1d82:	aa 27       	eor	r26, r26
    1d84:	bb 27       	eor	r27, r27
    1d86:	08 c0       	rjmp	.+16     	; 0x1d98 <__mulsi3_helper+0x16>
    1d88:	a2 0f       	add	r26, r18
    1d8a:	b3 1f       	adc	r27, r19
    1d8c:	e4 1f       	adc	r30, r20
    1d8e:	f5 1f       	adc	r31, r21
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	44 1f       	adc	r20, r20
    1d96:	55 1f       	adc	r21, r21
    1d98:	96 95       	lsr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	77 95       	ror	r23
    1d9e:	67 95       	ror	r22
    1da0:	98 f3       	brcs	.-26     	; 0x1d88 <__mulsi3_helper+0x6>
    1da2:	70 40       	sbci	r23, 0x00	; 0
    1da4:	a9 f7       	brne	.-22     	; 0x1d90 <__mulsi3_helper+0xe>
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	99 f7       	brne	.-26     	; 0x1d90 <__mulsi3_helper+0xe>
    1daa:	bd 01       	movw	r22, r26
    1dac:	cf 01       	movw	r24, r30
    1dae:	08 95       	ret

00001db0 <__udivmodqi4>:
    1db0:	99 1b       	sub	r25, r25
    1db2:	79 e0       	ldi	r23, 0x09	; 9
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <__udivmodqi4_ep>

00001db6 <__udivmodqi4_loop>:
    1db6:	99 1f       	adc	r25, r25
    1db8:	96 17       	cp	r25, r22
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <__udivmodqi4_ep>
    1dbc:	96 1b       	sub	r25, r22

00001dbe <__udivmodqi4_ep>:
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	7a 95       	dec	r23
    1dc2:	c9 f7       	brne	.-14     	; 0x1db6 <__udivmodqi4_loop>
    1dc4:	80 95       	com	r24
    1dc6:	08 95       	ret

00001dc8 <__udivmodhi4>:
    1dc8:	aa 1b       	sub	r26, r26
    1dca:	bb 1b       	sub	r27, r27
    1dcc:	51 e1       	ldi	r21, 0x11	; 17
    1dce:	07 c0       	rjmp	.+14     	; 0x1dde <__udivmodhi4_ep>

00001dd0 <__udivmodhi4_loop>:
    1dd0:	aa 1f       	adc	r26, r26
    1dd2:	bb 1f       	adc	r27, r27
    1dd4:	a6 17       	cp	r26, r22
    1dd6:	b7 07       	cpc	r27, r23
    1dd8:	10 f0       	brcs	.+4      	; 0x1dde <__udivmodhi4_ep>
    1dda:	a6 1b       	sub	r26, r22
    1ddc:	b7 0b       	sbc	r27, r23

00001dde <__udivmodhi4_ep>:
    1dde:	88 1f       	adc	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	5a 95       	dec	r21
    1de4:	a9 f7       	brne	.-22     	; 0x1dd0 <__udivmodhi4_loop>
    1de6:	80 95       	com	r24
    1de8:	90 95       	com	r25
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	08 95       	ret

00001df0 <__divmodhi4>:
    1df0:	97 fb       	bst	r25, 7
    1df2:	07 2e       	mov	r0, r23
    1df4:	16 f4       	brtc	.+4      	; 0x1dfa <__divmodhi4+0xa>
    1df6:	00 94       	com	r0
    1df8:	06 d0       	rcall	.+12     	; 0x1e06 <__divmodhi4_neg1>
    1dfa:	77 fd       	sbrc	r23, 7
    1dfc:	08 d0       	rcall	.+16     	; 0x1e0e <__divmodhi4_neg2>
    1dfe:	e4 df       	rcall	.-56     	; 0x1dc8 <__udivmodhi4>
    1e00:	07 fc       	sbrc	r0, 7
    1e02:	05 d0       	rcall	.+10     	; 0x1e0e <__divmodhi4_neg2>
    1e04:	3e f4       	brtc	.+14     	; 0x1e14 <__divmodhi4_exit>

00001e06 <__divmodhi4_neg1>:
    1e06:	90 95       	com	r25
    1e08:	81 95       	neg	r24
    1e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0c:	08 95       	ret

00001e0e <__divmodhi4_neg2>:
    1e0e:	70 95       	com	r23
    1e10:	61 95       	neg	r22
    1e12:	7f 4f       	sbci	r23, 0xFF	; 255

00001e14 <__divmodhi4_exit>:
    1e14:	08 95       	ret

00001e16 <__udivmodsi4>:
    1e16:	a1 e2       	ldi	r26, 0x21	; 33
    1e18:	1a 2e       	mov	r1, r26
    1e1a:	aa 1b       	sub	r26, r26
    1e1c:	bb 1b       	sub	r27, r27
    1e1e:	fd 01       	movw	r30, r26
    1e20:	0d c0       	rjmp	.+26     	; 0x1e3c <__udivmodsi4_ep>

00001e22 <__udivmodsi4_loop>:
    1e22:	aa 1f       	adc	r26, r26
    1e24:	bb 1f       	adc	r27, r27
    1e26:	ee 1f       	adc	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	a2 17       	cp	r26, r18
    1e2c:	b3 07       	cpc	r27, r19
    1e2e:	e4 07       	cpc	r30, r20
    1e30:	f5 07       	cpc	r31, r21
    1e32:	20 f0       	brcs	.+8      	; 0x1e3c <__udivmodsi4_ep>
    1e34:	a2 1b       	sub	r26, r18
    1e36:	b3 0b       	sbc	r27, r19
    1e38:	e4 0b       	sbc	r30, r20
    1e3a:	f5 0b       	sbc	r31, r21

00001e3c <__udivmodsi4_ep>:
    1e3c:	66 1f       	adc	r22, r22
    1e3e:	77 1f       	adc	r23, r23
    1e40:	88 1f       	adc	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	1a 94       	dec	r1
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <__udivmodsi4_loop>
    1e48:	60 95       	com	r22
    1e4a:	70 95       	com	r23
    1e4c:	80 95       	com	r24
    1e4e:	90 95       	com	r25
    1e50:	9b 01       	movw	r18, r22
    1e52:	ac 01       	movw	r20, r24
    1e54:	bd 01       	movw	r22, r26
    1e56:	cf 01       	movw	r24, r30
    1e58:	08 95       	ret

00001e5a <__divmodsi4>:
    1e5a:	05 2e       	mov	r0, r21
    1e5c:	97 fb       	bst	r25, 7
    1e5e:	16 f4       	brtc	.+4      	; 0x1e64 <__divmodsi4+0xa>
    1e60:	00 94       	com	r0
    1e62:	0f d0       	rcall	.+30     	; 0x1e82 <__negsi2>
    1e64:	57 fd       	sbrc	r21, 7
    1e66:	05 d0       	rcall	.+10     	; 0x1e72 <__divmodsi4_neg2>
    1e68:	d6 df       	rcall	.-84     	; 0x1e16 <__udivmodsi4>
    1e6a:	07 fc       	sbrc	r0, 7
    1e6c:	02 d0       	rcall	.+4      	; 0x1e72 <__divmodsi4_neg2>
    1e6e:	46 f4       	brtc	.+16     	; 0x1e80 <__divmodsi4_exit>
    1e70:	08 c0       	rjmp	.+16     	; 0x1e82 <__negsi2>

00001e72 <__divmodsi4_neg2>:
    1e72:	50 95       	com	r21
    1e74:	40 95       	com	r20
    1e76:	30 95       	com	r19
    1e78:	21 95       	neg	r18
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e7e:	5f 4f       	sbci	r21, 0xFF	; 255

00001e80 <__divmodsi4_exit>:
    1e80:	08 95       	ret

00001e82 <__negsi2>:
    1e82:	90 95       	com	r25
    1e84:	80 95       	com	r24
    1e86:	70 95       	com	r23
    1e88:	61 95       	neg	r22
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	08 95       	ret

00001e92 <__utoa_ncheck>:
    1e92:	bb 27       	eor	r27, r27

00001e94 <__utoa_common>:
    1e94:	fb 01       	movw	r30, r22
    1e96:	55 27       	eor	r21, r21
    1e98:	aa 27       	eor	r26, r26
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	aa 1f       	adc	r26, r26
    1ea0:	a4 17       	cp	r26, r20
    1ea2:	10 f0       	brcs	.+4      	; 0x1ea8 <__utoa_common+0x14>
    1ea4:	a4 1b       	sub	r26, r20
    1ea6:	83 95       	inc	r24
    1ea8:	50 51       	subi	r21, 0x10	; 16
    1eaa:	b9 f7       	brne	.-18     	; 0x1e9a <__utoa_common+0x6>
    1eac:	a0 5d       	subi	r26, 0xD0	; 208
    1eae:	aa 33       	cpi	r26, 0x3A	; 58
    1eb0:	08 f0       	brcs	.+2      	; 0x1eb4 <__utoa_common+0x20>
    1eb2:	a9 5d       	subi	r26, 0xD9	; 217
    1eb4:	a1 93       	st	Z+, r26
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	79 f7       	brne	.-34     	; 0x1e98 <__utoa_common+0x4>
    1eba:	b1 11       	cpse	r27, r1
    1ebc:	b1 93       	st	Z+, r27
    1ebe:	11 92       	st	Z+, r1
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	00 c0       	rjmp	.+0      	; 0x1ec4 <strrev>

00001ec4 <strrev>:
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	67 2f       	mov	r22, r23
    1eca:	71 91       	ld	r23, Z+
    1ecc:	77 23       	and	r23, r23
    1ece:	e1 f7       	brne	.-8      	; 0x1ec8 <strrev+0x4>
    1ed0:	32 97       	sbiw	r30, 0x02	; 2
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <strrev+0x18>
    1ed4:	7c 91       	ld	r23, X
    1ed6:	6d 93       	st	X+, r22
    1ed8:	70 83       	st	Z, r23
    1eda:	62 91       	ld	r22, -Z
    1edc:	ae 17       	cp	r26, r30
    1ede:	bf 07       	cpc	r27, r31
    1ee0:	c8 f3       	brcs	.-14     	; 0x1ed4 <strrev+0x10>
    1ee2:	08 95       	ret

00001ee4 <eeprom_read_byte>:
    1ee4:	e1 99       	sbic	0x1c, 1	; 28
    1ee6:	fe cf       	rjmp	.-4      	; 0x1ee4 <eeprom_read_byte>
    1ee8:	9f bb       	out	0x1f, r25	; 31
    1eea:	8e bb       	out	0x1e, r24	; 30
    1eec:	e0 9a       	sbi	0x1c, 0	; 28
    1eee:	99 27       	eor	r25, r25
    1ef0:	8d b3       	in	r24, 0x1d	; 29
    1ef2:	08 95       	ret

00001ef4 <eeprom_read_word>:
    1ef4:	a8 e1       	ldi	r26, 0x18	; 24
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	42 e0       	ldi	r20, 0x02	; 2
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <eeprom_read_blraw>

00001efe <eeprom_write_word>:
    1efe:	12 d0       	rcall	.+36     	; 0x1f24 <eeprom_write_byte>
    1f00:	27 2f       	mov	r18, r23
    1f02:	11 c0       	rjmp	.+34     	; 0x1f26 <eeprom_write_r18>

00001f04 <eeprom_read_block>:
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22

00001f08 <eeprom_read_blraw>:
    1f08:	fc 01       	movw	r30, r24
    1f0a:	e1 99       	sbic	0x1c, 1	; 28
    1f0c:	fe cf       	rjmp	.-4      	; 0x1f0a <eeprom_read_blraw+0x2>
    1f0e:	06 c0       	rjmp	.+12     	; 0x1f1c <eeprom_read_blraw+0x14>
    1f10:	ff bb       	out	0x1f, r31	; 31
    1f12:	ee bb       	out	0x1e, r30	; 30
    1f14:	e0 9a       	sbi	0x1c, 0	; 28
    1f16:	31 96       	adiw	r30, 0x01	; 1
    1f18:	0d b2       	in	r0, 0x1d	; 29
    1f1a:	0d 92       	st	X+, r0
    1f1c:	41 50       	subi	r20, 0x01	; 1
    1f1e:	50 40       	sbci	r21, 0x00	; 0
    1f20:	b8 f7       	brcc	.-18     	; 0x1f10 <eeprom_read_blraw+0x8>
    1f22:	08 95       	ret

00001f24 <eeprom_write_byte>:
    1f24:	26 2f       	mov	r18, r22

00001f26 <eeprom_write_r18>:
    1f26:	e1 99       	sbic	0x1c, 1	; 28
    1f28:	fe cf       	rjmp	.-4      	; 0x1f26 <eeprom_write_r18>
    1f2a:	1c ba       	out	0x1c, r1	; 28
    1f2c:	9f bb       	out	0x1f, r25	; 31
    1f2e:	8e bb       	out	0x1e, r24	; 30
    1f30:	2d bb       	out	0x1d, r18	; 29
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	e2 9a       	sbi	0x1c, 2	; 28
    1f38:	e1 9a       	sbi	0x1c, 1	; 28
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	08 95       	ret

00001f40 <_exit>:
    1f40:	f8 94       	cli

00001f42 <__stop_program>:
    1f42:	ff cf       	rjmp	.-2      	; 0x1f42 <__stop_program>
